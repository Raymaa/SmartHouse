###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         27/Jun/2019  19:59:42 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\SOENGKINNG\Desktop\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZS #
#                          tack-2.5.1a\Projects\zstack\Samples\SampleApp\Sour #
#                          ce\SampleApp.c                                     #
#    Command line       =  -f C:\Users\SOENGKINNG\Desktop\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ #
#                          \ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg       #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6         #
#                          -DMAC_CFG_RX_MAX=3) -f C:\Users\SOENGKINNG\Desktop #
#                          \33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530D #
#                          B\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0            #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x1234                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 C:\Users\SOENGKINNG\Desktop #
#                          \33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack #
#                          \Samples\SampleApp\Source\SampleApp.c -D           #
#                          NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D            #
#                          MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG  #
#                          -lC C:\Users\SOENGKINNG\Desktop\33.ÊªÊª¶È+ÆøÌå+¹âÕ #
#                          Õ\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\ #
#                          CC2530DB\EndDeviceEB\List\ -lA                     #
#                          C:\Users\SOENGKINNG\Desktop\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZS #
#                          tack-2.5.1a\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\EndDeviceEB\List\ --diag_suppress             #
#                          Pe001,Pa010 -o C:\Users\SOENGKINNG\Desktop\33.ÊªÊª #
#                          ¶È+ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\EndDeviceEB\Obj\ -e            #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I C:\Users\SOENGKINNG\Desktop\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ #
#                          \ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\ -I C:\Users\SOENGKINNG\Desktop\33.ÊªÊª¶È+ #
#                          ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\Source\ -I                     #
#                          C:\Users\SOENGKINNG\Desktop\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZS #
#                          tack-2.5.1a\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\ZMain\TI2530DB\ -I                   #
#                          C:\Users\SOENGKINNG\Desktop\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZS #
#                          tack-2.5.1a\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\Components\hal\include\ -I     #
#                          C:\Users\SOENGKINNG\Desktop\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZS #
#                          tack-2.5.1a\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\Components\hal\target\CC2530EB #
#                          \ -I C:\Users\SOENGKINNG\Desktop\33.ÊªÊª¶È+ÆøÌå+¹â #
#                          ÕÕ\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\..\..\..\..\..\Components\mac\include\   #
#                          -I C:\Users\SOENGKINNG\Desktop\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ #
#                          \ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\..\..\..\..\Components\mac\high_level\  #
#                          -I C:\Users\SOENGKINNG\Desktop\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ #
#                          \ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\..\..\..\..\Components\mac\low_level\sr #
#                          f04\ -I C:\Users\SOENGKINNG\Desktop\33.ÊªÊª¶È+ÆøÌå #
#                          +¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples\Sample #
#                          App\CC2530DB\..\..\..\..\..\Components\mac\low_lev #
#                          el\srf04\single_chip\ -I                           #
#                          C:\Users\SOENGKINNG\Desktop\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZS #
#                          tack-2.5.1a\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\Components\mt\ -I              #
#                          C:\Users\SOENGKINNG\Desktop\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZS #
#                          tack-2.5.1a\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\Components\osal\include\ -I    #
#                          C:\Users\SOENGKINNG\Desktop\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZS #
#                          tack-2.5.1a\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\Components\services\saddr\ -I  #
#                          C:\Users\SOENGKINNG\Desktop\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZS #
#                          tack-2.5.1a\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\Components\services\sdata\ -I  #
#                          C:\Users\SOENGKINNG\Desktop\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZS #
#                          tack-2.5.1a\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\Components\stack\af\ -I        #
#                          C:\Users\SOENGKINNG\Desktop\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZS #
#                          tack-2.5.1a\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\Components\stack\nwk\ -I       #
#                          C:\Users\SOENGKINNG\Desktop\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZS #
#                          tack-2.5.1a\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\Components\stack\sapi\ -I      #
#                          C:\Users\SOENGKINNG\Desktop\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZS #
#                          tack-2.5.1a\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\Components\stack\sec\ -I       #
#                          C:\Users\SOENGKINNG\Desktop\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZS #
#                          tack-2.5.1a\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\Components\stack\sys\ -I       #
#                          C:\Users\SOENGKINNG\Desktop\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZS #
#                          tack-2.5.1a\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\Components\stack\zdo\ -I       #
#                          C:\Users\SOENGKINNG\Desktop\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZS #
#                          tack-2.5.1a\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\Components\zmac\ -I            #
#                          C:\Users\SOENGKINNG\Desktop\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZS #
#                          tack-2.5.1a\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\Components\zmac\f8w\ -Ohz      #
#                          --require_prototypes                               #
#    List file          =  C:\Users\SOENGKINNG\Desktop\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZS #
#                          tack-2.5.1a\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\EndDeviceEB\List\SampleApp.lst                #
#    Object file        =  C:\Users\SOENGKINNG\Desktop\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZS #
#                          tack-2.5.1a\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\EndDeviceEB\Obj\SampleApp.r51                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\SOENGKINNG\Desktop\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          #include "OSAL.h"
      2          #include "ZGlobals.h"
      3          #include "AF.h"
      4          #include "aps_groups.h"
      5          #include "ZDApp.h"
      6          
      7          #include "SampleApp.h"
      8          #include "SampleAppHw.h"
      9          
     10          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x88
   \   union <unnamed> volatile __sfr _A_TCON
   \                     _A_TCON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb6
   \   unsigned char volatile __sfr ADCCON3
   \                     ADCCON3:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xba
   \   unsigned char volatile __sfr ADCL
   \                     ADCL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbb
   \   unsigned char volatile __sfr ADCH
   \                     ADCH:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1
     11          
     12          /* HAL */
     13          #include "hal_lcd.h"
     14          #include "hal_led.h"
     15          #include "hal_key.h"
     16          #include "MT_UART.h"
     17          #include "MT_APP.h"
     18          #include "MT.h"
     19          #include "DHT11.h"
     20          #include "hal_adc.h"
     21          #include "stdio.h"
     22          
     23          /*********************************************************************
     24           * MACROS
     25           */
     26          #define DATA_PIN05          P0_5    //¶¨ÒåP0.5¿ÚÎª´«¸ÐÆ÷µÄÊäÈë¶Ë
     27          
     28          #define HAL_ADC_DEC_064     0x00    /* Decimate by 64 : 8-bit resolution */
     29          #define HAL_ADC_DEC_128     0x10    /* Decimate by 128 : 10-bit resolution */
     30          #define HAL_ADC_DEC_256     0x20    /* Decimate by 256 : 12-bit resolution */
     31          #define HAL_ADC_DEC_512     0x30    /* Decimate by 512 : 14-bit resolution */
     32          #define HAL_ADC_DEC_BITS    0x30    /* Bits [5:4] */
     33          
     34          
     35          /*********************************************************************
     36           * CONSTANTS
     37           */
     38          
     39          /*********************************************************************
     40           * TYPEDEFS
     41           */
     42          
     43          /*********************************************************************
     44           * GLOBAL VARIABLES
     45           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
     46          uint8 AppTitle[] = "ALD2530 DHT11"; //Ó¦ÓÃ³ÌÐòÃû³Æ
   \                     AppTitle:
   \   000000                DS 14
   \   00000E                REQUIRE `?<Initializer for AppTitle>`
   \   00000E                REQUIRE __INIT_XDATA_I
     47          
     48          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     49          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
   \   000004   0300         DW 3
     50          {
     51            SAMPLEAPP_PERIODIC_CLUSTERID,
     52            SAMPLEAPP_FLASH_CLUSTERID,
     53            SAMPLEAPP_P2P_CLUSTERID
     54          };
     55          

   \                                 In  segment XDATA_ROM_C, align 1
     56          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   03           DB 3
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   03           DB 3
   \   00000A   ....         DW SampleApp_ClusterList
     57          {
     58            SAMPLEAPP_ENDPOINT,              //  int Endpoint;//¶Ë¿ÚºÅ
     59            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];//Ó¦ÓÃ¹æ·¶ID
     60            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];//Éè±¸ÀàÐÍ
     61            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
     62            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
     63            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
     64            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
     65            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
     66            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
     67          };
     68          
     69          // This is the Endpoint/Interface description.  It is defined here, but
     70          // filled-in in SampleApp_Init().  Another way to go would be to fill
     71          // in the structure here and make it a "const" (in code space).  The
     72          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     73          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
     74          
     75          /*********************************************************************
     76           * EXTERNAL VARIABLES
     77           */
     78          
     79          /*********************************************************************
     80           * EXTERNAL FUNCTIONS
     81           */
     82          
     83          /*********************************************************************
     84           * LOCAL VARIABLES
     85           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     86          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     87                                    // This variable will be received when
     88                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     89          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     90          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     91          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     92          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     93          afAddrType_t SampleApp_Periodic_DstAddr; //¹ã²¥
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     94          afAddrType_t SampleApp_Flash_DstAddr;    //×é²¥
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     95          afAddrType_t SampleApp_P2P_DstAddr;      //µã²¥
   \                     SampleApp_P2P_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
     96          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     97          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
     98          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     99          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    100          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    101          
    102          /*********************************************************************
    103           * LOCAL FUNCTIONS
    104           */
    105          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    106          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    107          void SampleApp_SendPeriodicMessage( void );
    108          void SampleApp_SendFlashMessage( uint16 flashTime );
    109          void SampleApp_Send_P2P_Message(void);
    110          uint16 ReadGasData( void );
    111          uint16 ReadLightData( void );
    112          /*********************************************************************
    113           * NETWORK LAYER CALLBACKS
    114           */
    115          
    116          /*********************************************************************
    117           * PUBLIC FUNCTIONS
    118           */
    119          
    120          /*********************************************************************
    121           * @fn      SampleApp_Init
    122           *
    123           * @brief   Initialization function for the Generic App Task.
    124           *          This is called during initialization and should contain
    125           *          any application specific initialization (ie. hardware
    126           *          initialization/setup, table initialization, power up
    127           *          notificaiton ... ).
    128           *
    129           * @param   task_id - the ID assigned by OSAL.  This ID should be
    130           *                    used to send messages and set timers.
    131           *
    132           * @return  none
    133           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    134          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    135          { 
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    136            SampleApp_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    137            SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    138            SampleApp_TransID = 0;
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    139            
    140            MT_UartInit();                  //´®¿Ú³õÊ¼»¯
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL   ??MT_UartInit?relay
    141            MT_UartRegisterTaskID(task_id); //×¢²á´®¿ÚÈÎÎñ
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV     A,R6
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??MT_UartRegisterTaskID?relay
    142            
    143            P0DIR &= 0x1F;                 //P0.5 P0.6 P0_7¶¨ ÒåÎªÊäÈë¿Ú  0001 1111      
   \   00001E   53FD1F       ANL     0xfd,#0x1f
    144            P0SEL &= 0x1F;                 //ÉèÖÃP0.5 P0.6 P0_7ÎªÆÕÍ¨IO¿Ú 0001 1111
   \   000021   53F31F       ANL     0xf3,#0x1f
    145           
    146            // Device hardware initialization can be added here or in main() (Zmain.c).
    147            // If the hardware is application specific - add it here.
    148            // If the hardware is other parts of the device add it in main().
    149          
    150           #if defined ( BUILD_ALL_DEVICES )
    151            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    152            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    153            // together - if they are - we will start up a coordinator. Otherwise,
    154            // the device will start as a router.
    155            if ( readCoordinatorJumper() )
    156              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    157            else
    158              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    159          #endif // BUILD_ALL_DEVICES
    160          
    161          #if defined ( HOLD_AUTO_START )
    162            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    163            //  from starting the device and wait for the application to
    164            //  start the device.
    165            ZDOInitDevice(0);
    166          #endif
    167          
    168            // Setup for the periodic message's destination address
    169            // Broadcast to everyone
    170            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000024   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000027   740F         MOV     A,#0xf
   \   000029   F0           MOVX    @DPTR,A
    171            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;//20
   \   00002A   A3           INC     DPTR
   \   00002B   7414         MOV     A,#0x14
   \   00002D   F0           MOVX    @DPTR,A
    172            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;//¶ÌµØÖ·
   \   00002E   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   000031   74FF         MOV     A,#-0x1
   \   000033   F0           MOVX    @DPTR,A
   \   000034   A3           INC     DPTR
   \   000035   F0           MOVX    @DPTR,A
    173          
    174            // Setup for the flash command's destination address - Group 1
    175            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000036   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000039   7401         MOV     A,#0x1
   \   00003B   F0           MOVX    @DPTR,A
    176            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00003C   A3           INC     DPTR
   \   00003D   7414         MOV     A,#0x14
   \   00003F   F0           MOVX    @DPTR,A
    177            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   000040   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   000043   7401         MOV     A,#0x1
   \   000045   F0           MOVX    @DPTR,A
   \   000046   A3           INC     DPTR
   \   000047   E4           CLR     A
   \   000048   F0           MOVX    @DPTR,A
    178            
    179            SampleApp_P2P_DstAddr.addrMode = (afAddrMode_t)Addr16Bit; //µã²¥ 
   \   000049   90....       MOV     DPTR,#SampleApp_P2P_DstAddr + 8
   \   00004C   7402         MOV     A,#0x2
   \   00004E   F0           MOVX    @DPTR,A
    180            SampleApp_P2P_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; 
   \   00004F   A3           INC     DPTR
   \   000050   7414         MOV     A,#0x14
   \   000052   F0           MOVX    @DPTR,A
    181            SampleApp_P2P_DstAddr.addr.shortAddr = 0x0000;            //·¢¸øÐ­µ÷Æ÷
   \   000053   90....       MOV     DPTR,#SampleApp_P2P_DstAddr
   \   000056   E4           CLR     A
   \   000057   F0           MOVX    @DPTR,A
   \   000058   A3           INC     DPTR
   \   000059   F0           MOVX    @DPTR,A
    182          
    183            // Fill out the endpoint description.
    184            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   00005A   90....       MOV     DPTR,#SampleApp_epDesc
   \   00005D   7414         MOV     A,#0x14
   \   00005F   F0           MOVX    @DPTR,A
    185            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000060   A3           INC     DPTR
   \   000061   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   000063   F0           MOVX    @DPTR,A
   \   000064   A3           INC     DPTR
   \   000065   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000067   F0           MOVX    @DPTR,A
    186            SampleApp_epDesc.simpleDesc
    187                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   000068   A3           INC     DPTR
   \   000069   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   00006B   F0           MOVX    @DPTR,A
   \   00006C   A3           INC     DPTR
   \   00006D   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   00006F   F0           MOVX    @DPTR,A
    188            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   000070   A3           INC     DPTR
   \   000071   E4           CLR     A
   \   000072   F0           MOVX    @DPTR,A
    189          
    190            // Register the endpoint description with the AF
    191            afRegister( &SampleApp_epDesc );
   \   000073                ; Setup parameters for call to function afRegister
   \   000073   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   000075   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000077   12....       LCALL   ??afRegister?relay
    192          
    193            // Register for all key events - This app will handle all key events
    194            RegisterForKeys( SampleApp_TaskID );
   \   00007A                ; Setup parameters for call to function RegisterForKeys
   \   00007A   90....       MOV     DPTR,#SampleApp_TaskID
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   F9           MOV     R1,A
   \   00007F   12....       LCALL   ??RegisterForKeys?relay
    195          
    196            // By default, all devices start out in Group 1
    197            SampleApp_Group.ID = 0x0001;
   \   000082   90....       MOV     DPTR,#SampleApp_Group
   \   000085   7401         MOV     A,#0x1
   \   000087   F0           MOVX    @DPTR,A
   \   000088   A3           INC     DPTR
   \   000089   E4           CLR     A
   \   00008A   F0           MOVX    @DPTR,A
    198            osal_memcpy( SampleApp_Group.name, "Group 1", 7 );
   \   00008B                ; Setup parameters for call to function osal_memcpy
   \   00008B   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   00008E   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   000091   F5..         MOV     ?V0 + 2,A
   \   000093   78..         MOV     R0,#?V0 + 0
   \   000095   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000098   7C07         MOV     R4,#0x7
   \   00009A   7D00         MOV     R5,#0x0
   \   00009C   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   00009E   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000A0   12....       LCALL   ??osal_memcpy?relay
   \   0000A3   7403         MOV     A,#0x3
   \   0000A5   12....       LCALL   ?DEALLOC_XSTACK8
    199            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   0000A8                ; Setup parameters for call to function aps_AddGroup
   \   0000A8   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000AA   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000AC   7914         MOV     R1,#0x14
   \   0000AE   12....       LCALL   ??aps_AddGroup?relay
    200          
    201          #if defined ( LCD_SUPPORTED )
    202            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   0000B1                ; Setup parameters for call to function HalLcdWriteString
   \   0000B1   7900         MOV     R1,#0x0
   \   0000B3   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000B5   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000B7   12....       LCALL   ??HalLcdWriteString?relay
    203          #endif
    204          }
   \   0000BA   7F03         MOV     R7,#0x3
   \   0000BC   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000BF                REQUIRE P0DIR
   \   0000BF                REQUIRE P0SEL
    205          
    206          /*********************************************************************
    207           * @fn      SampleApp_ProcessEvent
    208           *
    209           * @brief   Generic Application Task event processor.  This function
    210           *          is called to process all events for the task.  Events
    211           *          include timers, messages and any other user defined events.
    212           *
    213           * @param   task_id  - The OSAL assigned task ID.
    214           * @param   events - events to process.  This is a bit map and can
    215           *                   contain more than one event.
    216           *
    217           * @return  none
    218           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    219          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    220          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    221            afIncomingMSGPacket_t *MSGpkt;
    222            (void)task_id;  // Intentionally unreferenced parameter
    223          
    224            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   6074         JZ      ??SampleApp_ProcessEvent_0
    225            {
    226              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   8026         SJMP    ??SampleApp_ProcessEvent_1
    227              while ( MSGpkt )
    228              {
    229                switch ( MSGpkt->hdr.event )
    230                {
    231                  // Received when a key is pressed
    232                  case KEY_CHANGE:
    233                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    234                    break;
    235          
    236                  // Received when a messages is received (OTA) for this endpoint
    237                  case AF_INCOMING_MSG_CMD:
    238                    SampleApp_MessageMSGCB( MSGpkt );
    239                    break;
    240          
    241                  // Received whenever the device changes state in the network
    242                  case ZDO_STATE_CHANGE:
    243                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    244                    if ( //(SampleApp_NwkState == DEV_ZB_COORD) ||
    245                           (SampleApp_NwkState == DEV_ROUTER)
    246                        || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6407         XRL     A,#0x7
   \   000017   6005         JZ      ??SampleApp_ProcessEvent_3
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6406         XRL     A,#0x6
   \   00001C   7010         JNZ     ??SampleApp_ProcessEvent_4
    247                    {
    248                      // Start sending the periodic message in a regular interval.
    249                      osal_start_timerEx( SampleApp_TaskID,
    250                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    251                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   00001E                ; Setup parameters for call to function osal_start_timerEx
   \   00001E   7CD0         MOV     R4,#-0x30
   \   000020   7D07         MOV     R5,#0x7
   \   000022   7A01         MOV     R2,#0x1
   \   000024   7B00         MOV     R3,#0x0
   \   000026   90....       MOV     DPTR,#SampleApp_TaskID
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   12....       LCALL   ??osal_start_timerEx?relay
    252                    }
    253                    else
    254                    {
    255                      // Device is no longer in the network
    256                    }
    257                    break;
    258          
    259                  default:
    260                    break;
    261                }
    262          
    263                // Release the memory
    264                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   00002E                ; Setup parameters for call to function osal_msg_deallocate
   \   00002E   AA..         MOV     R2,?V0 + 0
   \   000030   AB..         MOV     R3,?V0 + 1
   \   000032   12....       LCALL   ??osal_msg_deallocate?relay
    265          
    266                // Next - if one is available
    267                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000035                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000035   90....       MOV     DPTR,#SampleApp_TaskID
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F9           MOV     R1,A
   \   00003A   12....       LCALL   ??osal_msg_receive?relay
   \   00003D   8A..         MOV     ?V0 + 0,R2
   \   00003F   8B..         MOV     ?V0 + 1,R3
   \   000041   E5..         MOV     A,?V0 + 0
   \   000043   45..         ORL     A,?V0 + 1
   \   000045   6032         JZ      ??SampleApp_ProcessEvent_5
   \   000047   85..82       MOV     DPL,?V0 + 0
   \   00004A   85..83       MOV     DPH,?V0 + 1
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   24E6         ADD     A,#-0x1a
   \   000050   601E         JZ      ??SampleApp_ProcessEvent_6
   \   000052   245A         ADD     A,#0x5a
   \   000054   6006         JZ      ??SampleApp_ProcessEvent_7
   \   000056   24EF         ADD     A,#-0x11
   \   000058   60B5         JZ      ??SampleApp_ProcessEvent_2
   \   00005A   80D2         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   00005C                ; Setup parameters for call to function SampleApp_HandleKeys
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   FA           MOV     R2,A
   \   000061   85..82       MOV     DPL,?V0 + 0
   \   000064   85..83       MOV     DPH,?V0 + 1
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F9           MOV     R1,A
   \   00006B   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   00006E   80BE         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000070                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000070   AA..         MOV     R2,?V0 + 0
   \   000072   AB..         MOV     R3,?V0 + 1
   \   000074   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   000077   80B5         SJMP    ??SampleApp_ProcessEvent_4
    268              }
    269          
    270              // return unprocessed events
    271              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   000079   EE           MOV     A,R6
   \   00007A   FA           MOV     R2,A
   \   00007B   EF           MOV     A,R7
   \   00007C   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_8:
   \   00007E   FB           MOV     R3,A
   \   00007F   802A         SJMP    ??SampleApp_ProcessEvent_9
    272            }
    273          
    274            // Send a message out - This event is generated by a timer
    275            //  (setup in SampleApp_Init()).
    276            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000081   EE           MOV     A,R6
   \   000082   A2E0         MOV     C,0xE0 /* A   */.0
   \   000084   5021         JNC     ??SampleApp_ProcessEvent_10
    277            {
    278              // Send the periodic message
    279              //SampleApp_SendPeriodicMessage();
    280              SampleApp_Send_P2P_Message();
   \   000086                ; Setup parameters for call to function SampleApp_Send_P2P_Message
   \   000086   12....       LCALL   ??SampleApp_Send_P2P_Message?relay
    281          
    282              // Setup to send message again in normal period (+ a little jitter)
    283              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    284                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   000089                ; Setup parameters for call to function osal_rand
   \   000089   12....       LCALL   ??osal_rand?relay
   \   00008C                ; Setup parameters for call to function osal_start_timerEx
   \   00008C   EA           MOV     A,R2
   \   00008D   24D0         ADD     A,#-0x30
   \   00008F   FC           MOV     R4,A
   \   000090   E4           CLR     A
   \   000091   3407         ADDC    A,#0x7
   \   000093   FD           MOV     R5,A
   \   000094   7A01         MOV     R2,#0x1
   \   000096   7B00         MOV     R3,#0x0
   \   000098   90....       MOV     DPTR,#SampleApp_TaskID
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   F9           MOV     R1,A
   \   00009D   12....       LCALL   ??osal_start_timerEx?relay
    285          
    286              // return unprocessed events
    287              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000A0   EE           MOV     A,R6
   \   0000A1   6401         XRL     A,#0x1
   \   0000A3   FA           MOV     R2,A
   \   0000A4   EF           MOV     A,R7
   \   0000A5   80D7         SJMP    ??SampleApp_ProcessEvent_8
    288            }
    289          
    290            // Discard unknown events
    291            return 0;
   \                     ??SampleApp_ProcessEvent_10:
   \   0000A7   7A00         MOV     R2,#0x0
   \   0000A9   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_9:
   \   0000AB   7F04         MOV     R7,#0x4
   \   0000AD   02....       LJMP    ?BANKED_LEAVE_XDATA
    292          }
    293          
    294          /*********************************************************************
    295           * Event Generation Functions
    296           */
    297          /*********************************************************************
    298           * @fn      SampleApp_HandleKeys
    299           *
    300           * @brief   Handles all key events for this device.
    301           *
    302           * @param   shift - true if in shift/alt.
    303           * @param   keys - bit field for key events. Valid entries:
    304           *                 HAL_KEY_SW_2
    305           *                 HAL_KEY_SW_1
    306           *
    307           * @return  none
    308           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    309          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    310          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    311            (void)shift;  // Intentionally unreferenced parameter
    312            
    313            if ( keys & HAL_KEY_SW_1 )
   \   000007   A2E0         MOV     C,0xE0 /* A   */.0
   \   000009   5007         JNC     ??SampleApp_HandleKeys_0
    314            {
    315              /* This key sends the Flash Command is sent to Group 1.
    316               * This device will not receive the Flash Command from this
    317               * device (even if it belongs to group 1).
    318               */
    319              SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   00000B                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000B   7AE8         MOV     R2,#-0x18
   \   00000D   7B03         MOV     R3,#0x3
   \   00000F   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    320            }
    321          
    322            if ( keys & HAL_KEY_SW_2 )
   \                     ??SampleApp_HandleKeys_0:
   \   000012   EE           MOV     A,R6
   \   000013   A2E1         MOV     C,0xE0 /* A   */.1
   \   000015   5024         JNC     ??SampleApp_HandleKeys_1
    323            {
    324              /* The Flashr Command is sent to Group 1.
    325               * This key toggles this device in and out of group 1.
    326               * If this device doesn't belong to group 1, this application
    327               * will not receive the Flash command sent to group 1.
    328               */
    329              aps_Group_t *grp;
    330              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    331              if ( grp )
   \   000017                ; Setup parameters for call to function aps_FindGroup
   \   000017   7A01         MOV     R2,#0x1
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   7914         MOV     R1,#0x14
   \   00001D   12....       LCALL   ??aps_FindGroup?relay
   \   000020   8B..         MOV     ?V0 + 1,R3
   \   000022   EA           MOV     A,R2
   \   000023   45..         ORL     A,?V0 + 1
   \   000025   600B         JZ      ??SampleApp_HandleKeys_2
    332              {
    333                // Remove from the group
    334                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   000027                ; Setup parameters for call to function aps_RemoveGroup
   \   000027   7A01         MOV     R2,#0x1
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   7914         MOV     R1,#0x14
   \   00002D   12....       LCALL   ??aps_RemoveGroup?relay
   \   000030   8009         SJMP    ??SampleApp_HandleKeys_1
    335              }
    336              else
    337              {
    338                // Add to the flash group
    339                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_2:
   \   000032                ; Setup parameters for call to function aps_AddGroup
   \   000032   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000034   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000036   7914         MOV     R1,#0x14
   \   000038   12....       LCALL   ??aps_AddGroup?relay
    340              }
    341            }
    342          }
   \                     ??SampleApp_HandleKeys_1:
   \   00003B   80..         SJMP    ??Subroutine7_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine7_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    343          
    344          /*********************************************************************
    345           * LOCAL FUNCTIONS
    346           */
    347          
    348          /*********************************************************************
    349           * @fn      SampleApp_MessageMSGCB
    350           *
    351           * @brief   Data message processor callback.  This function processes
    352           *          any incoming data - probably from other devices.  So, based
    353           *          on cluster ID, perform the intended action.
    354           *
    355           * @param   none
    356           *
    357           * @return  none
    358           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    359          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    360          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    361            uint16 flashTime;
    362          
    363            switch ( pkt->clusterId )
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F5..         MOV     ?V0 + 0,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F5..         MOV     ?V0 + 1,A
   \   000014   78..         MOV     R0,#?V0 + 0
   \   000016   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   000019   0200         DW        2
   \   00001B   01           DB        1
   \   00001C   ....         DW        ??SampleApp_MessageMSGCB_0
   \   00001E   ....         DW        ??SampleApp_MessageMSGCB_1
   \   000020   ....         DW        ??SampleApp_MessageMSGCB_2
    364            {
    365              case SAMPLEAPP_P2P_CLUSTERID:
    366                //HalUARTWrite(0, "CD:", 3);       //ÌáÊ¾½ÓÊÕµ½Êý¾Ý T&H&G&L:
    367                HalUARTWrite(0, pkt->cmd.Data, pkt->cmd.DataLength); //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
   \                     ??SampleApp_MessageMSGCB_2:
   \   000022                ; Setup parameters for call to function HalUARTWrite
   \   000022   EA           MOV     A,R2
   \   000023   2420         ADD     A,#0x20
   \   000025   F582         MOV     DPL,A
   \   000027   EB           MOV     A,R3
   \   000028   3400         ADDC    A,#0x0
   \   00002A   F583         MOV     DPH,A
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   FC           MOV     R4,A
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   FD           MOV     R5,A
   \   000031   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000034   FA           MOV     R2,A
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   FB           MOV     R3,A
   \   000038   12....       LCALL   ?Subroutine3 & 0xFFFF
    368                HalUARTWrite(0, "\n", 1);         // »Ø³µ»»ÐÐ
    369                break;    
   \                     ??CrossCallReturnLabel_4:
   \   00003B   8033         SJMP    ??SampleApp_MessageMSGCB_0
    370              case SAMPLEAPP_PERIODIC_CLUSTERID:
    371                break;
    372          
    373              case SAMPLEAPP_FLASH_CLUSTERID:
    374                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    375                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \                     ??SampleApp_MessageMSGCB_1:
   \   00003D   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000040   F8           MOV     R0,A
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F9           MOV     R1,A
   \   000044                ; Setup parameters for call to function HalLedBlink
   \   000044   8882         MOV     DPL,R0
   \   000046   8983         MOV     DPH,R1
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   FA           MOV     R2,A
   \   00004B   8882         MOV     DPL,R0
   \   00004D   8983         MOV     DPH,R1
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   E0           MOVX    A,@DPTR
   \   000052   F9           MOV     R1,A
   \   000053   EA           MOV     A,R2
   \   000054   2400         ADD     A,#0x0
   \   000056   F5..         MOV     ?V0 + 0,A
   \   000058   E4           CLR     A
   \   000059   39           ADDC    A,R1
   \   00005A   F5..         MOV     ?V0 + 1,A
   \   00005C   7402         MOV     A,#0x2
   \   00005E   78..         MOV     R0,#?V0 + 0
   \   000060   12....       LCALL   ?US_SHR
   \   000063   AC..         MOV     R4,?V0 + 0
   \   000065   AD..         MOV     R5,?V0 + 1
   \   000067   7B32         MOV     R3,#0x32
   \   000069   7A04         MOV     R2,#0x4
   \   00006B   7908         MOV     R1,#0x8
   \   00006D   12....       LCALL   ??HalLedBlink?relay
    376                break;
    377            }
    378          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   000070   80..         SJMP    ??Subroutine7_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   EA           MOV     A,R2
   \   000001   2422         ADD     A,#0x22
   \   000003   F582         MOV     DPL,A
   \   000005   EB           MOV     A,R3
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7900         MOV     R1,#0x0
   \   000002   12....       LCALL   ??HalUARTWrite?relay
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005   7C01         MOV     R4,#0x1
   \   000007   7D00         MOV     R5,#0x0
   \   000009   7A..         MOV     R2,#`?<Constant "\\n">` & 0xff
   \   00000B   7B..         MOV     R3,#(`?<Constant "\\n">` >> 8) & 0xff
   \   00000D   7900         MOV     R1,#0x0
   \   00000F   12....       LCALL   ??HalUARTWrite?relay
   \   000012   22           RET
    379          
    380          /*********************************************************************
    381           * @fn      SampleApp_SendPeriodicMessage
    382           *
    383           * @brief   Send the periodic message.
    384           *
    385           * @param   none
    386           *
    387           * @return  none
    388           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine7_0
   \   000003                ; // Fall through to label ??Subroutine7_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    389          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    390          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    391            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,//Ä¿±êµØÖ·£¬±¾Éí·¢ËÍ¶Ë¿ÚµÄ¶Ë¿ÚÃèÊö·û
    392                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    393                                 1,
    394                                 (uint8*)&SampleAppPeriodicCounter,
    395                                 &SampleApp_TransID,
    396                                 AF_DISCV_ROUTE,
    397                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000005                ; Setup parameters for call to function AF_DataRequest
   \   000005   75..1E       MOV     ?V0 + 0,#0x1e
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00000D   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000010   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   75....       MOV     ?V0 + 0,#SampleAppPeriodicCounter & 0xff
   \   00001B   75....       MOV     ?V0 + 1,#(SampleAppPeriodicCounter >> 8) & 0xff
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..01       MOV     ?V0 + 0,#0x1
   \   000026   75..00       MOV     ?V0 + 1,#0x0
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   78..         MOV     R0,#?V0 + 0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   7920         MOV     R1,#0x20
   \   000035   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000037   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000039   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00003B   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00003D   12....       LCALL   ??AF_DataRequest?relay
   \   000040   7409         MOV     A,#0x9
   \   000042   02....       LJMP    ?Subroutine0 & 0xFFFF
    398            {
    399            }
    400            else
    401            {
    402              // Error occurred in request to send.
    403            }
    404          }
    405          
    406          /*********************************************************************
    407           * @fn      SampleApp_SendFlashMessage
    408           *
    409           * @brief   Send the flash message to group 1.
    410           *
    411           * @param   flashTime - in milliseconds
    412           *
    413           * @return  none
    414           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    415          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    416          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    417            uint8 buffer[3];
    418            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    419            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    420            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    421          
    422            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    423                                 SAMPLEAPP_FLASH_CLUSTERID,
    424                                 3,
    425                                 buffer,
    426                                 &SampleApp_TransID,
    427                                 AF_DISCV_ROUTE,
    428                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV     ?V0 + 0,#0x1e
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000034   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   8582..       MOV     ?V0 + 0,DPL
   \   000044   8583..       MOV     ?V0 + 1,DPH
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   75..03       MOV     ?V0 + 0,#0x3
   \   00004F   75..00       MOV     ?V0 + 1,#0x0
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   75..02       MOV     ?V0 + 0,#0x2
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7920         MOV     R1,#0x20
   \   000061   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000063   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000065   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000067   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000069   12....       LCALL   ??AF_DataRequest?relay
   \   00006C   7409         MOV     A,#0x9
   \   00006E   12....       LCALL   ?DEALLOC_XSTACK8
    429            {
    430            }
    431            else
    432            {
    433              // Error occurred in request to send.
    434            }
    435          }
   \   000071   7403         MOV     A,#0x3
   \   000073   02....       LJMP    ?Subroutine0 & 0xFFFF
    436          
    437          /*********************************************************************
    438           * @fn      SampleApp_Send_P2P_Message
    439           *
    440           * @brief   point to point.
    441           *
    442           * @param   none
    443           *
    444           * @return  none
    445           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    446          void SampleApp_Send_P2P_Message( void )
   \                     SampleApp_Send_P2P_Message:
    447          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 34
   \   000005   74DE         MOV     A,#-0x22
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    448            char temp[3], humidity[3], GasData[4],LightData[4], strTemp[20];
    449            uint16 nGasData=0;
    450            uint16 nLightData=0;
    451            char state;
    452            
    453            DHT11();             //»ñÈ¡ÎÂÊª¶È
   \   00000A                ; Setup parameters for call to function DHT11
   \   00000A   12....       LCALL   ??DHT11?relay
    454            Delay_ms(100); 
   \   00000D                ; Setup parameters for call to function Delay_ms
   \   00000D   7A64         MOV     R2,#0x64
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   12....       LCALL   ??Delay_ms?relay
    455            //½«ÎÂÊª¶ÈµÄ×ª»»³É×Ö·û´®,¹©LCDÏÔÊ¾  
    456            temp[0] = wendu_shi+0x30;
   \   000014   90....       MOV     DPTR,#wendu_shi
   \   000017   E0           MOVX    A,@DPTR
   \   000018   2430         ADD     A,#0x30
   \   00001A   C0E0         PUSH    A
   \   00001C   7403         MOV     A,#0x3
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   D0E0         POP     A
   \   000023   F0           MOVX    @DPTR,A
    457            temp[1] = wendu_ge+0x30;
   \   000024   90....       MOV     DPTR,#wendu_ge
   \   000027   E0           MOVX    A,@DPTR
   \   000028   2430         ADD     A,#0x30
   \   00002A   C0E0         PUSH    A
   \   00002C   7404         MOV     A,#0x4
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   D0E0         POP     A
   \   000033   F0           MOVX    @DPTR,A
    458            temp[2] = '\0';
   \   000034   7405         MOV     A,#0x5
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   E4           CLR     A
   \   00003A   F0           MOVX    @DPTR,A
    459            humidity[0] = shidu_shi+0x30;
   \   00003B   90....       MOV     DPTR,#shidu_shi
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   2430         ADD     A,#0x30
   \   000041   85..82       MOV     DPL,?XSP + 0
   \   000044   85..83       MOV     DPH,?XSP + 1
   \   000047   F0           MOVX    @DPTR,A
    460            humidity[1] = shidu_ge+0x30;
   \   000048   90....       MOV     DPTR,#shidu_ge
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   2430         ADD     A,#0x30
   \   00004E   C0E0         PUSH    A
   \   000050   7401         MOV     A,#0x1
   \   000052   12....       LCALL   ?XSTACK_DISP0_8
   \   000055   D0E0         POP     A
   \   000057   F0           MOVX    @DPTR,A
    461            humidity[2] = '\0';
   \   000058   7402         MOV     A,#0x2
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   E4           CLR     A
   \   00005E   F0           MOVX    @DPTR,A
    462            
    463            if(DATA_PIN05 == 1)
   \   00005F   A285         MOV     C,0x80.5
   \   000061   5005         JNC     ??SampleApp_Send_P2P_Message_0
    464              state = 0x30;       //µ±¹âÃôµç×è´¦ÓÚºÚ°µÖÐÊ±P0.5¸ßµçÆ½
   \   000063   75..30       MOV     ?V0 + 0,#0x30
   \   000066   8003         SJMP    ??SampleApp_Send_P2P_Message_1
    465            else
    466              state = 0x31;  
   \                     ??SampleApp_Send_P2P_Message_0:
   \   000068   75..31       MOV     ?V0 + 0,#0x31
    467            nGasData = ReadGasData();
   \                     ??SampleApp_Send_P2P_Message_1:
   \   00006B                ; Setup parameters for call to function ReadGasData
   \   00006B   12....       LCALL   ??ReadGasData?relay
   \   00006E   8A..         MOV     ?V0 + 2,R2
   \   000070   8B..         MOV     ?V0 + 3,R3
   \   000072   AE..         MOV     R6,?V0 + 2
   \   000074   AF..         MOV     R7,?V0 + 3
    468            Delay_ms(100); 
   \   000076                ; Setup parameters for call to function Delay_ms
   \   000076   12....       LCALL   ?Subroutine5 & 0xFFFF
    469            GasData[0] = nGasData / 100 + '0';
   \                     ??CrossCallReturnLabel_12:
   \   000079   12....       LCALL   ?US_DIV_MOD
   \   00007C   E8           MOV     A,R0
   \   00007D   2430         ADD     A,#0x30
   \   00007F   C0E0         PUSH    A
   \   000081   740A         MOV     A,#0xa
   \   000083   12....       LCALL   ?XSTACK_DISP0_8
   \   000086   D0E0         POP     A
   \   000088   12....       LCALL   ?Subroutine2 & 0xFFFF
    470            GasData[1] = nGasData / 10%10 + '0';
   \                     ??CrossCallReturnLabel_0:
   \   00008B   12....       LCALL   ?US_DIV_MOD
   \   00008E   7A0A         MOV     R2,#0xa
   \   000090   7B00         MOV     R3,#0x0
   \   000092   12....       LCALL   ?US_DIV_MOD
   \   000095   EA           MOV     A,R2
   \   000096   2430         ADD     A,#0x30
   \   000098   F5..         MOV     ?V0 + 2,A
   \   00009A   740B         MOV     A,#0xb
   \   00009C   12....       LCALL   ?XSTACK_DISP0_8
   \   00009F   E5..         MOV     A,?V0 + 2
   \   0000A1   12....       LCALL   ?Subroutine2 & 0xFFFF
    471            GasData[2] = nGasData % 10 + '0';  
   \                     ??CrossCallReturnLabel_1:
   \   0000A4   12....       LCALL   ?US_DIV_MOD
   \   0000A7   EA           MOV     A,R2
   \   0000A8   2430         ADD     A,#0x30
   \   0000AA   F5..         MOV     ?V0 + 3,A
   \   0000AC   740C         MOV     A,#0xc
   \   0000AE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B1   E5..         MOV     A,?V0 + 3
   \   0000B3   F0           MOVX    @DPTR,A
    472            GasData[3] = '\0';
   \   0000B4   740D         MOV     A,#0xd
   \   0000B6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B9   E4           CLR     A
   \   0000BA   F0           MOVX    @DPTR,A
    473            
    474            
    475            nLightData = ReadLightData();
   \   0000BB                ; Setup parameters for call to function ReadLightData
   \   0000BB   12....       LCALL   ??ReadLightData?relay
   \   0000BE   8A..         MOV     ?V0 + 4,R2
   \   0000C0   8B..         MOV     ?V0 + 5,R3
   \   0000C2   AE..         MOV     R6,?V0 + 4
   \   0000C4   AF..         MOV     R7,?V0 + 5
    476            Delay_ms(100);
   \   0000C6                ; Setup parameters for call to function Delay_ms
   \   0000C6   12....       LCALL   ?Subroutine5 & 0xFFFF
    477            LightData[0] = nLightData / 100 + '0';
   \                     ??CrossCallReturnLabel_13:
   \   0000C9   12....       LCALL   ?US_DIV_MOD
   \   0000CC   E8           MOV     A,R0
   \   0000CD   2430         ADD     A,#0x30
   \   0000CF   C0E0         PUSH    A
   \   0000D1   7406         MOV     A,#0x6
   \   0000D3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D6   D0E0         POP     A
   \   0000D8   12....       LCALL   ?Subroutine2 & 0xFFFF
    478            LightData[1] = nLightData / 10%10 + '0';
   \                     ??CrossCallReturnLabel_2:
   \   0000DB   12....       LCALL   ?US_DIV_MOD
   \   0000DE   7A0A         MOV     R2,#0xa
   \   0000E0   7B00         MOV     R3,#0x0
   \   0000E2   12....       LCALL   ?US_DIV_MOD
   \   0000E5   EA           MOV     A,R2
   \   0000E6   2430         ADD     A,#0x30
   \   0000E8   F5..         MOV     ?V0 + 4,A
   \   0000EA   7407         MOV     A,#0x7
   \   0000EC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EF   E5..         MOV     A,?V0 + 4
   \   0000F1   12....       LCALL   ?Subroutine2 & 0xFFFF
    479            LightData[2] = nLightData % 10 + '0';  
   \                     ??CrossCallReturnLabel_3:
   \   0000F4   12....       LCALL   ?US_DIV_MOD
   \   0000F7   EA           MOV     A,R2
   \   0000F8   2430         ADD     A,#0x30
   \   0000FA   F9           MOV     R1,A
   \   0000FB   7408         MOV     A,#0x8
   \   0000FD   12....       LCALL   ?XSTACK_DISP0_8
   \   000100   E9           MOV     A,R1
   \   000101   F0           MOVX    @DPTR,A
    480            LightData[3] = '\0';
   \   000102   7409         MOV     A,#0x9
   \   000104   12....       LCALL   ?XSTACK_DISP0_8
   \   000107   E4           CLR     A
   \   000108   F0           MOVX    @DPTR,A
    481            
    482              //½«Êý¾ÝÕûºÏºó·½±ã·¢¸øÐ­µ÷Æ÷ÏÔÊ¾
    483            /*
    484            osal_memcpy(strTemp, temp, 2); 
    485            osal_memcpy(&strTemp[2], "  ", 2);
    486            osal_memcpy(&strTemp[4], humidity, 2);
    487            osal_memcpy(&strTemp[6], "  ", 2);
    488            osal_memcpy(&strTemp[8], GasData, 3);
    489            osal_memcpy(&strTemp[11], "  ", 2);
    490            osal_memcpy(&strTemp[13], LightData, 3);
    491            osal_memcpy(&strTemp[16], "  ", 2);
    492            
    493            */
    494            strTemp[15] = state;
   \   000109   741D         MOV     A,#0x1d
   \   00010B   12....       LCALL   ?XSTACK_DISP0_8
   \   00010E   E5..         MOV     A,?V0 + 0
   \   000110   F0           MOVX    @DPTR,A
    495            sprintf((char *)strTemp,"%c%c %c%c %c%c%c %c%c%c%c",temp[0],temp[1],humidity[0],humidity[1],LightData[0],LightData[1],LightData[2],GasData[0],GasData[1],GasData[2],strTemp[15]);
   \   000111                ; Setup parameters for call to function sprintf
   \   000111   75..00       MOV     ?V0 + 1,#0x0
   \   000114   78..         MOV     R0,#?V0 + 0
   \   000116   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000119   85....       MOV     ?V0 + 0,?V0 + 3
   \   00011C   78..         MOV     R0,#?V0 + 0
   \   00011E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000121   75..00       MOV     ?V0 + 3,#0x0
   \   000124   78..         MOV     R0,#?V0 + 2
   \   000126   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000129   7410         MOV     A,#0x10
   \   00012B   12....       LCALL   ?XSTACK_DISP0_8
   \   00012E   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000131   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000134   89..         MOV     ?V0 + 0,R1
   \   000136   78..         MOV     R0,#?V0 + 0
   \   000138   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00013B   75..00       MOV     ?V0 + 5,#0x0
   \   00013E   78..         MOV     R0,#?V0 + 4
   \   000140   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000143   7412         MOV     A,#0x12
   \   000145   12....       LCALL   ?XSTACK_DISP0_8
   \   000148   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00014B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00014E   740F         MOV     A,#0xf
   \   000150   12....       LCALL   ?XSTACK_DISP0_8
   \   000153   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000156   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000159   7410         MOV     A,#0x10
   \   00015B   12....       LCALL   ?XSTACK_DISP0_8
   \   00015E   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000161   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000164   7416         MOV     A,#0x16
   \   000166   12....       LCALL   ?XSTACK_DISP0_8
   \   000169   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00016C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00016F   7417         MOV     A,#0x17
   \   000171   12....       LCALL   ?XSTACK_DISP0_8
   \   000174   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000177   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00017A   7C..         MOV     R4,#`?<Constant "%c%c %c%c %c%c%c %c%c...">` & 0xff
   \   00017C   7D..         MOV     R5,#(`?<Constant "%c%c %c%c %c%c%c %c%c...">` >> 8) & 0xff
   \   00017E   7424         MOV     A,#0x24
   \   000180   12....       LCALL   ?XSTACK_DISP0_8
   \   000183   AA82         MOV     R2,DPL
   \   000185   AB83         MOV     R3,DPH
   \   000187   12....       LCALL   ??sprintf?relay
   \   00018A   7416         MOV     A,#0x16
   \   00018C   12....       LCALL   ?DEALLOC_XSTACK8
    496            //»ñµÃµÄÎÂÊª¶ÈÍ¨¹ý´®¿ÚÊä³öµ½µçÄÔÏÔÊ¾
    497            //HalUARTWrite(0, "T&H&G&L:", 8);
    498            HalUARTWrite(0, (uint8 *)strTemp, 16);
   \   00018F                ; Setup parameters for call to function HalUARTWrite
   \   00018F   7C10         MOV     R4,#0x10
   \   000191   7D00         MOV     R5,#0x0
   \   000193   740E         MOV     A,#0xe
   \   000195   12....       LCALL   ?XSTACK_DISP0_8
   \   000198   AA82         MOV     R2,DPL
   \   00019A   AB83         MOV     R3,DPH
   \   00019C   12....       LCALL   ?Subroutine3 & 0xFFFF
    499            HalUARTWrite(0, "\n",1);
    500            
    501            //Êä³öµ½LCDÏÔÊ¾
    502           /* Color    = BLACK;
    503            Color_BK = WHITE; //±³¾°É«  
    504            LCD_write_CN_string(7, 80, "ÎÂ¶È£º");
    505            LCD_write_CN_string(7, 95, "Êª¶È£º");
    506            
    507            Color    = RED;
    508            HalLcdWriteEnString( 49, 80, temp );                  
    509            HalLcdWriteEnString( 49, 95, humidity );
    510            
    511            Color    = BLACK; 
    512            LCD_write_CN_string(63, 80, "¡æ");
    513            LCD_write_CN_string(63, 95, "£¥");
    514          */
    515           
    516            if ( AF_DataRequest( &SampleApp_P2P_DstAddr, &SampleApp_epDesc,
    517                                 SAMPLEAPP_P2P_CLUSTERID,
    518                                 14,
    519                                 (uint8 *)strTemp,
    520                                 &SampleApp_TransID,
    521                                 AF_DISCV_ROUTE,
    522                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \                     ??CrossCallReturnLabel_5:
   \   00019F                ; Setup parameters for call to function AF_DataRequest
   \   00019F   75..1E       MOV     ?V0 + 0,#0x1e
   \   0001A2   78..         MOV     R0,#?V0 + 0
   \   0001A4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001A7   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   0001AA   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   0001AD   78..         MOV     R0,#?V0 + 0
   \   0001AF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001B2   7411         MOV     A,#0x11
   \   0001B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B7   8582..       MOV     ?V0 + 0,DPL
   \   0001BA   8583..       MOV     ?V0 + 1,DPH
   \   0001BD   78..         MOV     R0,#?V0 + 0
   \   0001BF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001C2   75..0E       MOV     ?V0 + 0,#0xe
   \   0001C5   75..00       MOV     ?V0 + 1,#0x0
   \   0001C8   78..         MOV     R0,#?V0 + 0
   \   0001CA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001CD   75..03       MOV     ?V0 + 0,#0x3
   \   0001D0   78..         MOV     R0,#?V0 + 0
   \   0001D2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001D5   7920         MOV     R1,#0x20
   \   0001D7   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   0001D9   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   0001DB   7A..         MOV     R2,#SampleApp_P2P_DstAddr & 0xff
   \   0001DD   7B..         MOV     R3,#(SampleApp_P2P_DstAddr >> 8) & 0xff
   \   0001DF   12....       LCALL   ??AF_DataRequest?relay
   \   0001E2   7409         MOV     A,#0x9
   \   0001E4   12....       LCALL   ?DEALLOC_XSTACK8
    523            {
    524            }
    525            else
    526            {
    527              // Error occurred in request to send.
    528            }
    529          }
   \   0001E7   7422         MOV     A,#0x22
   \   0001E9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001EC   7F06         MOV     R7,#0x6
   \   0001EE   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0001F1                REQUIRE _A_P0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7A64         MOV     R2,#0x64
   \   000002   7B00         MOV     R3,#0x0
   \   000004   12....       LCALL   ??Delay_ms?relay
   \   000007   EE           MOV     A,R6
   \   000008   F8           MOV     R0,A
   \   000009   EF           MOV     A,R7
   \   00000A   F9           MOV     R1,A
   \   00000B   7A64         MOV     R2,#0x64
   \   00000D   7B00         MOV     R3,#0x0
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   78..         MOV     R0,#?V0 + 0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   F8           MOV     R0,A
   \   000003   EF           MOV     A,R7
   \   000004   F9           MOV     R1,A
   \   000005   7A0A         MOV     R2,#0xa
   \   000007   7B00         MOV     R3,#0x0
   \   000009   22           RET
    530          
    531          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    532          uint16 ReadGasData( void )
   \                     ReadGasData:
    533          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    534            uint16 reading = 0;//ao
    535            
    536            P0DIR &= ~0x40;  // ÉèÖÃP0.6ÎªÊäÈë·½Ê½0x0100 0000
   \   000004   53FDBF       ANL     0xfd,#0xbf
    537            asm("NOP");asm("NOP");
   \   000007   00           NOP
   \   000008   00           NOP
    538            Delay_ms(10);
   \   000009                ; Setup parameters for call to function Delay_ms
   \   000009   7A0A         MOV     R2,#0xa
   \   00000B   7B00         MOV     R3,#0x0
   \   00000D   12....       LCALL   ??Delay_ms?relay
    539          
    540            
    541            ADCCON3 = (0x40 | HAL_ADC_DEC_064 | HAL_ADC_CHANNEL_6);
   \   000010   75B646       MOV     0xb6,#0x46
    542            
    543            /* Wait for the conversion to finish */
    544            while ( !ADCIF );
   \                     ??ReadGasData_0:
   \   000013   A28D         MOV     C,0x88.5
   \   000015   50FC         JNC     ??ReadGasData_0
    545            Delay_ms(5);
   \   000017                ; Setup parameters for call to function Delay_ms
   \   000017   7A05         MOV     R2,#0x5
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   12....       LCALL   ??Delay_ms?relay
    546            asm("NOP");asm("NOP");
   \   00001E   00           NOP
   \   00001F   00           NOP
    547            
    548            /* Read the result *
    549            reading = ADCL;
    550            reading |= (int16) (ADCH << 8);//0011 1101 0011 1101
    551            reading >>= 8;
    552            
    553             /* Clear ADC interrupt flag */
                    ^
Warning[Pe009]: nested comment is not allowed
    554            ADCIF = 0;
   \   000020   C28D         CLR     0x88.5
    555            return reading;
   \   000022   7A00         MOV     R2,#0x0
   \   000024   7B00         MOV     R3,#0x0
   \   000026                REQUIRE ?Subroutine1
   \   000026                REQUIRE P0DIR
   \   000026                REQUIRE ADCCON3
   \   000026                REQUIRE _A_TCON
   \   000026                ; // Fall through to label ?Subroutine1
    556          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    557          
    558          
    559          
    560          
    561          
    562          
    563          
    564          
    565          
    566          
    567          
    568          
    569          
    570          
    571          
    572          
    573          
    574          
    575          
    576          
    577          
    578          
    579          
    580          
    581          
    582          
    583          
    584          
    585          
    586          
    587          
    588          
    589          
    590          
    591          
    592          
    593          
    594          
    595          
    596          
    597          
    598          
    599          
    600          
    601          
    602          
    603          
    604          
    605          
    606          
    607          
    608          
    609          
    610          
    611          
    612          
    613          
    614          
    615          
    616          
    617          
    618          
    619          
    620          
    621          
    622          
    623          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    624          uint16 ReadLightData( void )
   \                     ReadLightData:
    625          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    626            uint16 reading = 0;
    627            
    628            P0DIR &= ~0x10;  // ÉèÖÃP0.4ÎªÊäÈë·½Ê½0x0001 0000
   \   000004   53FDEF       ANL     0xfd,#0xef
    629            asm("NOP");asm("NOP");
   \   000007   00           NOP
   \   000008   00           NOP
    630            
    631          
    632            Delay_ms(10);
   \   000009                ; Setup parameters for call to function Delay_ms
   \   000009   7A0A         MOV     R2,#0xa
   \   00000B   7B00         MOV     R3,#0x0
   \   00000D   12....       LCALL   ??Delay_ms?relay
    633            ADCCON3 = (0x40 | HAL_ADC_DEC_064 | HAL_ADC_CHANNEL_4);
   \   000010   75B644       MOV     0xb6,#0x44
    634            
    635            /* Wait for the conversion to finish */
    636            while ( !ADCIF );
   \                     ??ReadLightData_0:
   \   000013   A28D         MOV     C,0x88.5
   \   000015   50FC         JNC     ??ReadLightData_0
    637            Delay_ms(5);
   \   000017                ; Setup parameters for call to function Delay_ms
   \   000017   7A05         MOV     R2,#0x5
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   12....       LCALL   ??Delay_ms?relay
    638            asm("NOP");asm("NOP");
   \   00001E   00           NOP
   \   00001F   00           NOP
    639            
    640            /* Read the result */
    641            reading = ADCL;
   \   000020   E5BA         MOV     A,0xba
    642            reading |= (int16) (ADCH << 8);
   \   000022   E5BB         MOV     A,0xbb
    643            reading >>= 8;
    644            
    645             /* Clear ADC interrupt flag */
    646            ADCIF = 0;
   \   000024   C28D         CLR     0x88.5
    647            return reading;
   \   000026   FA           MOV     R2,A
   \   000027   E4           CLR     A
   \   000028   FB           MOV     R3,A
   \   000029   80..         SJMP    ?Subroutine1
   \   00002B                REQUIRE P0DIR
   \   00002B                REQUIRE ADCCON3
   \   00002B                REQUIRE _A_TCON
   \   00002B                REQUIRE ADCL
   \   00002B                REQUIRE ADCH
    648          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AppTitle>`:
   \   000000   414C4432     DB "ALD2530 DHT11"
   \            35333020
   \            44485431
   \            3100    

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Send_P2P_Message?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Send_P2P_Message

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ReadGasData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ReadGasData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ReadLightData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ReadLightData

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\n">`:
   \   000000   0A00         DB "\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%c%c %c%c %c%c%c %c%c...">`:
   \   000000   25632563     DB "%c%c %c%c %c%c%c %c%c%c%c"
   \            20256325
   \            63202563
   \            25632563
   \            20256325
   \            63256325
   \            6300    
    649          
    650          
    651          /*********************************************************************
    652          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     ReadGasData                        2      0     48
       -> Delay_ms                      4      0      0
       -> Delay_ms                      4      0      0
     ReadLightData                      2      0     48
       -> Delay_ms                      4      0      0
       -> Delay_ms                      4      0      0
     SampleApp_HandleKeys               0      0     22
       -> SampleApp_SendFlashMessage
                                        0      0     20
       -> aps_FindGroup                 0      0     20
       -> aps_RemoveGroup               0      0     20
       -> aps_AddGroup                  0      0     20
     SampleApp_Init                     0      0     14
       -> MT_UartInit                   0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLcdWriteString             0      0     22
     SampleApp_MessageMSGCB             0      0     22
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalLedBlink                   0      0     20
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> SampleApp_Send_P2P_Message
                                        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendFlashMessage         1      0     32
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      0      0     19
       -> AF_DataRequest                0      0     38
     SampleApp_Send_P2P_Message         1      0     82
       -> DHT11                         0      0     96
       -> Delay_ms                      0      0     96
       -> ReadGasData                   0      0     96
       -> Delay_ms                      0      0     96
       -> ReadLightData                 0      0     96
       -> Delay_ms                      0      0     96
       -> sprintf                       0      0    140
       -> HalUARTWrite                  0      0     96
       -> HalUARTWrite                  0      0     96
       -> AF_DataRequest                0      0    114


   Segment part sizes:

     Function/Label                         Bytes
     --------------                         -----
     _A_P0                                     1
     _A_TCON                                   1
     ADCCON3                                   1
     ADCL                                      1
     ADCH                                      1
     P0SEL                                     1
     P0DIR                                     1
     AppTitle                                 14
     SampleApp_ClusterList                     6
     SampleApp_SimpleDesc                     12
     SampleApp_epDesc                          6
     SampleApp_TaskID                          1
     SampleApp_NwkState                        1
     SampleApp_TransID                         1
     SampleApp_Periodic_DstAddr               12
     SampleApp_Flash_DstAddr                  12
     SampleApp_P2P_DstAddr                    12
     SampleApp_Group                          18
     SampleAppPeriodicCounter                  1
     SampleAppFlashCounter                     1
     SampleApp_Init                          191
     SampleApp_ProcessEvent                  176
     SampleApp_HandleKeys                     61
     ??Subroutine7_0                           5
     SampleApp_MessageMSGCB                  114
     ?Subroutine6                             12
     ?Subroutine3                             19
     ?Subroutine0                              3
     SampleApp_SendPeriodicMessage            69
     SampleApp_SendFlashMessage              118
     SampleApp_Send_P2P_Message              497
     ?Subroutine5                             16
     ?Subroutine4                              6
     ?Subroutine2                             10
     ReadGasData                              38
     ?Subroutine1                              7
     ReadLightData                            43
     ?<Initializer for AppTitle>              14
     ??SampleApp_Init?relay                    6
     ??SampleApp_ProcessEvent?relay            6
     ??SampleApp_HandleKeys?relay              6
     ??SampleApp_MessageMSGCB?relay            6
     ??SampleApp_SendPeriodicMessage?relay     6
     ??SampleApp_SendFlashMessage?relay        6
     ??SampleApp_Send_P2P_Message?relay        6
     ??ReadGasData?relay                       6
     ??ReadLightData?relay                     6
     ?<Constant "Group 1">                     8
     ?<Constant "SampleApp">                  10
     ?<Constant "\n">                          2
     ?<Constant "%c%c %c%c %c%c%c %c%c...">   26

 
 1 385 bytes in segment BANKED_CODE
    54 bytes in segment BANK_RELAYS
     7 bytes in segment SFR_AN
    14 bytes in segment XDATA_I
    14 bytes in segment XDATA_ID
    64 bytes in segment XDATA_ROM_C
    65 bytes in segment XDATA_Z
 
 1 453 bytes of CODE  memory
    64 bytes of CONST memory
     0 bytes of DATA  memory (+ 7 bytes shared)
    79 bytes of XDATA memory

Errors: none
Warnings: 1
