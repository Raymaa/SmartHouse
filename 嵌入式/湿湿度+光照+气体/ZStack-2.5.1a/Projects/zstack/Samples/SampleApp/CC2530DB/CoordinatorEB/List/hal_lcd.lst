###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         18/Jun/2019  22:50:13 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+Æ #
#                          øÌå+¹âÕÕ\ZStack-2.5.1a\Components\hal\target\CC253 #
#                          0EB\hal_lcd.c                                      #
#    Command line       =  -f "F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª #
#                          ¶È+ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoo #
#                          rd.cfg" (-DCPU32MHZ -DROOT=__near_func             #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f "F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª #
#                          ¶È+ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCon #
#                          fig.cfg" (-DZIGBEEPRO -DSECURE=0                   #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x1234                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "F:\Zigbee\µÚ5ÕÂ            #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZStack- #
#                          2.5.1a\Components\hal\target\CC2530EB\hal_lcd.c"   #
#                          -D ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D         #
#                          xMT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC            #
#                          "F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ #
#                          ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\CoordinatorEB\List\" -lA          #
#                          "F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ #
#                          ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\CoordinatorEB\List\"              #
#                          --diag_suppress Pe001,Pa010 -o "F:\Zigbee\µÚ5ÕÂ    #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          CoordinatorEB\Obj\" -e --no_code_motion --debug    #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "F:\Zigbee\µÚ5ÕÂ           #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          " -I "F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.Êª #
#                          Êª¶È+ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Sampl #
#                          es\SampleApp\CC2530DB\..\Source\" -I               #
#                          "F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ #
#                          ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\ZMain\TI2530DB\" -I      #
#                          "F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ #
#                          ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\..\..\Components\hal\inc #
#                          lude\" -I "F:\Zigbee\µÚ5ÕÂ                         #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\hal\target\CC2530EB\"    #
#                          -I "F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª #
#                          ¶È+ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\..\..\Components\mac\ #
#                          include\" -I "F:\Zigbee\µÚ5ÕÂ                      #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\mac\high_level\" -I      #
#                          "F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ #
#                          ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\..\..\Components\mac\low #
#                          _level\srf04\" -I "F:\Zigbee\µÚ5ÕÂ                 #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\mac\low_level\srf04\sing #
#                          le_chip\" -I "F:\Zigbee\µÚ5ÕÂ                      #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\mt\" -I                  #
#                          "F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ #
#                          ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\..\..\Components\osal\in #
#                          clude\" -I "F:\Zigbee\µÚ5ÕÂ                        #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\services\saddr\" -I      #
#                          "F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ #
#                          ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\..\..\Components\service #
#                          s\sdata\" -I "F:\Zigbee\µÚ5ÕÂ                      #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\stack\af\" -I            #
#                          "F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ #
#                          ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\..\..\Components\stack\n #
#                          wk\" -I "F:\Zigbee\µÚ5ÕÂ                           #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\stack\sapi\" -I          #
#                          "F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ #
#                          ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\..\..\Components\stack\s #
#                          ec\" -I "F:\Zigbee\µÚ5ÕÂ                           #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\stack\sys\" -I           #
#                          "F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ #
#                          ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\..\..\Components\stack\z #
#                          do\" -I "F:\Zigbee\µÚ5ÕÂ                           #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\zmac\" -I                #
#                          "F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ #
#                          ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8 #
#                          w\" -Ohz --require_prototypes                      #
#    List file          =  F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+Æ #
#                          øÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples\Sam #
#                          pleApp\CC2530DB\CoordinatorEB\List\hal_lcd.lst     #
#    Object file        =  F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+Æ #
#                          øÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples\Sam #
#                          pleApp\CC2530DB\CoordinatorEB\Obj\hal_lcd.r51      #
#                                                                             #
#                                                                             #
###############################################################################

F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Components\hal\target\CC2530EB\hal_lcd.c
      1          /****************************************************************************
      2          * Filename: hal_lcd.c
      3          * Author:      Andy  https://aldsz.taobao.com
      4          * Date:        2015-06-16
      5          * Version:     1.0
      6          * Description: OLED driver
      7          ****************************************************************************/
      8          #include "hal_types.h"
      9          #include "hal_lcd.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     10          #include "OSAL.h"
     11          #include "OnBoard.h"
     12          #include "hal_assert.h"
     13          #include <string.h>
     14          
     15          #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
     16            #include "DebugTrace.h"
     17          #endif
     18          
     19          
     20          //------------------------------------------------------------------------------
     21          #define LCD_COMMAND 0x00
     22          #define LCD_DATA    0x01
     23          
     24          #define LCD_MAX_BUF 25
     25          
     26          #define SOFTWARE_SPI
     27          //#define HARDWARE_SPI //²ÉÓÃÓ²¼şSPIÍ¨Ñ¶
     28          
     29          #define COL_SPACE   2  //×Ö·û¼ä¾à
     30          #define ROW_SPACE   4  //ĞĞ¼ä¾à
     31          #define ALL_CNS     128
     32          #define X_MAX_PIXEL 128
     33          #define Y_MAX_PIXEL 128
     34          
     35          // SPI TFT LCD¶Ë¿Ú¶¨Òå
     36          #define LCD_DC           P0_0  // Êı¾İ/ÃüÁîÑ¡Ôñ
     37          #define LCD_SDA          P1_3  // Ë«ÏòÊı¾İ 
     38          #define LCD_SCL          P1_2  // Ê±ÖÓ   
     39          //#define LCD_CS         P1_2  // Æ¬Ñ¡, L_S ½«Æ¬Ñ¡½ÓµØ
     40          #define LCD_RST          P1_7  // ¿ØÖÆlcd¸´Î»   
     41          
     42          //Òº¾§¿ØÖÆ¿ÚÖÃ1²Ù×÷Óï¾äºê¶¨Òå
     43          //#define LCD_CS_SET  	(LCD_CS_CLRx01)   
     44          #define	LCD_DC_SET  	(LCD_DC = 0x01)  
     45          #define	LCD_SDA_SET  	(LCD_SDA = 0x01)    
     46          #define	LCD_SCL_SET  	(LCD_SCL = 0x01)   
     47          #define	LCD_RST_SET  	(LCD_RST = 0x01)  
     48          
     49          //Òº¾§¿ØÖÆ¿ÚÖÃ0²Ù×÷Óï¾äºê¶¨Òå
     50          //#define LCD_CS_CLR  	(LCD_CS_CLRx00)    
     51          #define	LCD_DC_CLR  	(LCD_DC = 0x00)  
     52          #define	LCD_SDA_CLR  	(LCD_SDA = 0x00)     
     53          #define	LCD_SCL_CLR  	(LCD_SCL = 0x00)
     54          #define	LCD_RST_CLR  	(LCD_RST = 0x00)   
     55          
     56          
     57          void SPI_Init(void);
     58          void LCD_clear(unsigned int color);
     59          void HalLcdWriteEnString(uint8 x, uint8 y, char *title);
     60          void LCD_write_EN_string(unsigned char X,unsigned char Y,uint8 *s);
     61          static void LCD_set_window(unsigned int X, unsigned int Y, 
     62                                     unsigned Width,unsigned int Height);
     63          static void LCD_write_EN(unsigned int X, unsigned int Y, unsigned char c);
     64          static void LCD_write_CN(unsigned int X, unsigned int Y, unsigned char c);
     65          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     66          unsigned int  Color    = BLUE; //Ä¬ÈÏÇ°¾°ÑÕÉ«
   \                     Color:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for Color>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     67          unsigned int  Color_BK = GREEN;//Ä¬ÈÏ±³¾°ÑÕÉ«
   \                     Color_BK:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for Color_BK>`
   \   000002                REQUIRE __INIT_XDATA_I
     68          //------------------------------------------------------------------------------
     69          
     70          #define XLevelL            0x00
     71          #define XLevelH            0x10
     72          #define XLevel             ((XLevelH&0x0F)*16+XLevelL)
     73          #define Max_Column         128
     74          #define Max_Row            64
     75          #define Brightness         0xCF 
     76          #define X_WIDTH            128
     77          #define Y_WIDTH            64
     78          
     79          #define LCD_MAX_BUF        25
     80          #define HAL_LCD_MAX_CHARS  16   // Max number of chars on a single LCD line 
     81          
     82          
     83          #if (HAL_LCD == TRUE)
     84          void HalLcd_HW_Init(void);
     85          void HalLcd_HW_WaitUs(uint16 i);
     86          void HalLcd_HW_Clear(void);
     87          void HalLcd_HW_Control(uint8 cmd);
     88          void HalLcd_HW_Write(uint8 data);
     89          void HalLcd_HW_SetContrast(uint8 value);
     90          void HalLcd_HW_WriteChar(uint8 line, uint8 col, char text);
     91          void HalLcd_HW_WriteLine(uint8 line, const char *pText);
     92          
     93          void DelayMS(unsigned int msec);
     94          void LCD_WrDat(unsigned char dat);
     95          void LCD_WrCmd(unsigned char cmd);
     96          void LCD_Set_Pos(unsigned char x, unsigned char y);
     97          void LCD_Fill(unsigned char bmp_dat) ;
     98          void LCD_CLS(void);
     99          
    100          //-----------------------------------------------------------------------------
    101          void DrawRect(unsigned int Xpos, unsigned int Ypos, unsigned int Width, 
    102                        unsigned int Height,unsigned Color);
    103          void DrawRectFill(unsigned int Xpos  , unsigned int Ypos, unsigned int Width, 
    104                            unsigned int Height, unsigned Color);
    105          void  SendByte(unsigned char Data);
    106          void  SPI_WriteData(unsigned char Data);
    107          void LCD_write_byte(unsigned char data, unsigned char command);
    108          void LCD_WriteData_16Bit(unsigned short Data);
    109          void LCD_write_CN_string(unsigned char X,unsigned char Y,uint8 *s);
    110          void ShowImage(const unsigned char *p);
    111          
    112          void DrawPixel(unsigned int x, unsigned int y, unsigned int color);
    113          void DrawVerticalLine(unsigned int x, unsigned int y, 
    114                                unsigned int Length,unsigned int Color);
    115          void DrawHorizonLine(unsigned int x, unsigned int y, 
    116                               unsigned int Length,unsigned int Color);               
    117          void Lcd_Reset(void);
    118          
    119          
    120          //ÖĞÎÄ14x14µãÕó×Ö·ûË÷Òı ALD

   \                                 In  segment CODE_C, align 1
    121          __code const  unsigned char CN14x14_Index[] =
   \                     CN14x14_Index:
   \   000000   C9EEDBDA     DB 0C9H, 0EEH, 0DBH, 0DAH, 0CAH, 0D0H, 0B0H, 0B2H
   \            CAD0B0B2
   \   000008   C1AAB5C2     DB 0C1H, 0AAH, 0B5H, 0C2H, 0BFH, 0C6H, 0BCH, 0BCH
   \            BFC6BCBC
   \   000010   D3C3BBA7     DB 0D3H, 0C3H, 0BBH, 0A7H, 0B5H, 0C7H, 0C2H, 0BCH
   \            B5C7C2BC
   \   000018   D5CABAC5     DB 0D5H, 0CAH, 0BAH, 0C5H, 0C3H, 0DCH, 0C2H, 0EBH
   \            C3DCC2EB
   \   000020   C8B7B6A8     DB 0C8H, 0B7H, 0B6H, 0A8H, 0C8H, 0A1H, 0CFH, 0FBH
   \            C8A1CFFB
   \   000028   D7A8D2B5     DB 0D7H, 0A8H, 0D2H, 0B5H, 0D7H, 0A8H, 0D7H, 0A2H
   \            D7A8D7A2
   \   000030   CEDECFDF     DB 0CEH, 0DEH, 0CFH, 0DFH, 0CDH, 0A8H, 0D1H, 0B6H
   \            CDA8D1B6
   \   000038   B3CFD0C5     DB 0B3H, 0CFH, 0D0H, 0C5H, 0C1H, 0A2H, 0D7H, 0E3H
   \            C1A2D7E3
   \   000040   B4B4D0C2     DB 0B4H, 0B4H, 0D0H, 0C2H, 0D6H, 0C2H, 0D4H, 0B6H
   \            D6C2D4B6
   \   000048   C7BFB4F3     DB 0C7H, 0BFH, 0B4H, 0F3H, 0D4H, 0ADH, 0CEH, 0C2H
   \            D4ADCEC2
   \   000050   CAAAB6C8     DB 0CAH, 0AAH, 0B6H, 0C8H, 0D6H, 0D5H, 0B6H, 0CBH
   \            D6D5B6CB
   \   000058   D2BBB6FE     DB 0D2H, 0BBH, 0B6H, 0FEH, 0C8H, 0FDH, 0CBH, 0C4H
   \            C8FDCBC4
   \   000060   CDA3CBAE     DB 0CDH, 0A3H, 0CBH, 0AEH, 0B5H, 0E7H, 0D7H, 0C5H
   \            B5E7D7C5
   \   000068   BBF0B6CF     DB 0BBH, 0F0H, 0B6H, 0CFH, 0CDH, 0F8H, 0B5H, 0D8H
   \            CDF8B5D8
   \   000070   D6B7D0AD     DB 0D6H, 0B7H, 0D0H, 0ADH, 0B5H, 0F7H, 0C6H, 0F7H
   \            B5F7C6F7
   \   000078   C2B7D3C9     DB 0C2H, 0B7H, 0D3H, 0C9H, 0A3H, 0BAH, 0A1H, 0E6H
   \            A3BAA1E6
   \   000080   A3A500       DB 0A3H, 0A5H, 0
    122          {
    123            "ÉîÛÚÊĞ°²ÁªµÂ¿Æ¼¼ÓÃ»§µÇÂ¼ÕÊºÅÃÜÂëÈ·¶¨È¡Ïû×¨Òµ×¨×¢ÎŞÏßÍ¨Ñ¶³ÏĞÅÁ¢×ã´´ĞÂÖÂÔ¶Ç¿´óÔ­ÎÂÊª¶ÈÖÕ¶ËÒ»¶şÈıËÄÍ£Ë®µç×Å»ğ¶ÏÍøµØÖ·Ğ­µ÷Æ÷Â·ÓÉ£º¡æ£¥"
    124          };
    125          
    126          //ÖĞÎÄ14x14µãÕó×Ö·û ald

   \                                 In  segment CODE_C, align 1
    127          __code const unsigned char CN14x14[][28] =
   \                     CN14x14:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   4F           DB 79
   \   000003   F8           DB 248
   \   000004   28           DB 40
   \   000005   08           DB 8
   \   000006   02           DB 2
   \   000007   20           DB 32
   \   000008   84           DB 132
   \   000009   10           DB 16
   \   00000A   48           DB 72
   \   00000B   88           DB 136
   \   00000C   00           DB 0
   \   00000D   80           DB 128
   \   00000E   2F           DB 47
   \   00000F   F8           DB 248
   \   000010   21           DB 33
   \   000011   C0           DB 192
   \   000012   42           DB 66
   \   000013   A0           DB 160
   \   000014   42           DB 66
   \   000015   A0           DB 160
   \   000016   84           DB 132
   \   000017   90           DB 144
   \   000018   88           DB 136
   \   000019   88           DB 136
   \   00001A   00           DB 0
   \   00001B   80           DB 128
   \   00001C   22           DB 34
   \   00001D   08           DB 8
   \   00001E   22           DB 34
   \   00001F   48           DB 72
   \   000020   22           DB 34
   \   000021   48           DB 72
   \   000022   22           DB 34
   \   000023   48           DB 72
   \   000024   FA           DB 250
   \   000025   48           DB 72
   \   000026   22           DB 34
   \   000027   48           DB 72
   \   000028   22           DB 34
   \   000029   48           DB 72
   \   00002A   22           DB 34
   \   00002B   48           DB 72
   \   00002C   22           DB 34
   \   00002D   48           DB 72
   \   00002E   3A           DB 58
   \   00002F   48           DB 72
   \   000030   E2           DB 226
   \   000031   48           DB 72
   \   000032   02           DB 2
   \   000033   48           DB 72
   \   000034   02           DB 2
   \   000035   08           DB 8
   \   000036   04           DB 4
   \   000037   08           DB 8
   \   000038   04           DB 4
   \   000039   00           DB 0
   \   00003A   02           DB 2
   \   00003B   00           DB 0
   \   00003C   FF           DB 255
   \   00003D   F8           DB 248
   \   00003E   02           DB 2
   \   00003F   00           DB 0
   \   000040   02           DB 2
   \   000041   00           DB 0
   \   000042   7F           DB 127
   \   000043   F0           DB 240
   \   000044   42           DB 66
   \   000045   10           DB 16
   \   000046   42           DB 66
   \   000047   10           DB 16
   \   000048   42           DB 66
   \   000049   10           DB 16
   \   00004A   42           DB 66
   \   00004B   10           DB 16
   \   00004C   42           DB 66
   \   00004D   10           DB 16
   \   00004E   42           DB 66
   \   00004F   70           DB 112
   \   000050   02           DB 2
   \   000051   00           DB 0
   \   000052   02           DB 2
   \   000053   00           DB 0
   \   000054   04           DB 4
   \   000055   00           DB 0
   \   000056   02           DB 2
   \   000057   00           DB 0
   \   000058   FF           DB 255
   \   000059   F8           DB 248
   \   00005A   80           DB 128
   \   00005B   08           DB 8
   \   00005C   84           DB 132
   \   00005D   08           DB 8
   \   00005E   04           DB 4
   \   00005F   00           DB 0
   \   000060   FF           DB 255
   \   000061   F8           DB 248
   \   000062   08           DB 8
   \   000063   40           DB 64
   \   000064   10           DB 16
   \   000065   40           DB 64
   \   000066   3C           DB 60
   \   000067   80           DB 128
   \   000068   03           DB 3
   \   000069   00           DB 0
   \   00006A   04           DB 4
   \   00006B   C0           DB 192
   \   00006C   18           DB 24
   \   00006D   20           DB 32
   \   00006E   E0           DB 224
   \   00006F   10           DB 16
   \   000070   01           DB 1
   \   000071   10           DB 16
   \   000072   FC           DB 252
   \   000073   A0           DB 160
   \   000074   48           DB 72
   \   000075   00           DB 0
   \   000076   49           DB 73
   \   000077   F0           DB 240
   \   000078   78           DB 120
   \   000079   40           DB 64
   \   00007A   48           DB 72
   \   00007B   40           DB 64
   \   00007C   48           DB 72
   \   00007D   40           DB 64
   \   00007E   7B           DB 123
   \   00007F   F8           DB 248
   \   000080   48           DB 72
   \   000081   40           DB 64
   \   000082   48           DB 72
   \   000083   40           DB 64
   \   000084   5C           DB 92
   \   000085   A0           DB 160
   \   000086   E8           DB 232
   \   000087   A0           DB 160
   \   000088   09           DB 9
   \   000089   10           DB 16
   \   00008A   0A           DB 10
   \   00008B   08           DB 8
   \   00008C   10           DB 16
   \   00008D   80           DB 128
   \   00008E   27           DB 39
   \   00008F   F8           DB 248
   \   000090   40           DB 64
   \   000091   80           DB 128
   \   000092   97           DB 151
   \   000093   F0           DB 240
   \   000094   15           DB 21
   \   000095   50           DB 80
   \   000096   25           DB 37
   \   000097   50           DB 80
   \   000098   67           DB 103
   \   000099   F0           DB 240
   \   00009A   A0           DB 160
   \   00009B   00           DB 0
   \   00009C   27           DB 39
   \   00009D   F0           DB 240
   \   00009E   21           DB 33
   \   00009F   00           DB 0
   \   0000A0   20           DB 32
   \   0000A1   90           DB 144
   \   0000A2   2A           DB 42
   \   0000A3   88           DB 136
   \   0000A4   2A           DB 42
   \   0000A5   28           DB 40
   \   0000A6   31           DB 49
   \   0000A7   E0           DB 224
   \   0000A8   00           DB 0
   \   0000A9   20           DB 32
   \   0000AA   0D           DB 13
   \   0000AB   20           DB 32
   \   0000AC   70           DB 112
   \   0000AD   A0           DB 160
   \   0000AE   10           DB 16
   \   0000AF   A0           DB 160
   \   0000B0   12           DB 18
   \   0000B1   20           DB 32
   \   0000B2   FD           DB 253
   \   0000B3   20           DB 32
   \   0000B4   11           DB 17
   \   0000B5   20           DB 32
   \   0000B6   30           DB 48
   \   0000B7   38           DB 56
   \   0000B8   3B           DB 59
   \   0000B9   E0           DB 224
   \   0000BA   54           DB 84
   \   0000BB   20           DB 32
   \   0000BC   90           DB 144
   \   0000BD   20           DB 32
   \   0000BE   10           DB 16
   \   0000BF   20           DB 32
   \   0000C0   10           DB 16
   \   0000C1   20           DB 32
   \   0000C2   10           DB 16
   \   0000C3   20           DB 32
   \   0000C4   20           DB 32
   \   0000C5   80           DB 128
   \   0000C6   20           DB 32
   \   0000C7   80           DB 128
   \   0000C8   20           DB 32
   \   0000C9   80           DB 128
   \   0000CA   F7           DB 247
   \   0000CB   F0           DB 240
   \   0000CC   20           DB 32
   \   0000CD   80           DB 128
   \   0000CE   20           DB 32
   \   0000CF   80           DB 128
   \   0000D0   27           DB 39
   \   0000D1   E0           DB 224
   \   0000D2   32           DB 50
   \   0000D3   20           DB 32
   \   0000D4   E2           DB 226
   \   0000D5   20           DB 32
   \   0000D6   21           DB 33
   \   0000D7   40           DB 64
   \   0000D8   20           DB 32
   \   0000D9   80           DB 128
   \   0000DA   21           DB 33
   \   0000DB   40           DB 64
   \   0000DC   22           DB 34
   \   0000DD   20           DB 32
   \   0000DE   EC           DB 236
   \   0000DF   18           DB 24
   \   0000E0   00           DB 0
   \   0000E1   00           DB 0
   \   0000E2   3F           DB 63
   \   0000E3   F8           DB 248
   \   0000E4   21           DB 33
   \   0000E5   08           DB 8
   \   0000E6   21           DB 33
   \   0000E7   08           DB 8
   \   0000E8   21           DB 33
   \   0000E9   08           DB 8
   \   0000EA   3F           DB 63
   \   0000EB   F8           DB 248
   \   0000EC   21           DB 33
   \   0000ED   08           DB 8
   \   0000EE   21           DB 33
   \   0000EF   08           DB 8
   \   0000F0   3F           DB 63
   \   0000F1   F8           DB 248
   \   0000F2   21           DB 33
   \   0000F3   08           DB 8
   \   0000F4   21           DB 33
   \   0000F5   08           DB 8
   \   0000F6   41           DB 65
   \   0000F7   08           DB 8
   \   0000F8   41           DB 65
   \   0000F9   08           DB 8
   \   0000FA   80           DB 128
   \   0000FB   38           DB 56
   \   0000FC   02           DB 2
   \   0000FD   00           DB 0
   \   0000FE   01           DB 1
   \   0000FF   00           DB 0
   \   000100   3F           DB 63
   \   000101   F8           DB 248
   \   000102   20           DB 32
   \   000103   08           DB 8
   \   000104   20           DB 32
   \   000105   08           DB 8
   \   000106   20           DB 32
   \   000107   08           DB 8
   \   000108   3F           DB 63
   \   000109   F8           DB 248
   \   00010A   20           DB 32
   \   00010B   08           DB 8
   \   00010C   20           DB 32
   \   00010D   00           DB 0
   \   00010E   20           DB 32
   \   00010F   00           DB 0
   \   000110   20           DB 32
   \   000111   00           DB 0
   \   000112   40           DB 64
   \   000113   00           DB 0
   \   000114   40           DB 64
   \   000115   00           DB 0
   \   000116   80           DB 128
   \   000117   00           DB 0
   \   000118   01           DB 1
   \   000119   20           DB 32
   \   00011A   7D           DB 125
   \   00011B   40           DB 64
   \   00011C   04           DB 4
   \   00011D   90           DB 144
   \   00011E   28           DB 40
   \   00011F   A0           DB 160
   \   000120   10           DB 16
   \   000121   40           DB 64
   \   000122   2F           DB 47
   \   000123   A0           DB 160
   \   000124   40           DB 64
   \   000125   18           DB 24
   \   000126   9F           DB 159
   \   000127   C0           DB 192
   \   000128   10           DB 16
   \   000129   40           DB 64
   \   00012A   10           DB 16
   \   00012B   40           DB 64
   \   00012C   1F           DB 31
   \   00012D   C0           DB 192
   \   00012E   10           DB 16
   \   00012F   40           DB 64
   \   000130   08           DB 8
   \   000131   80           DB 128
   \   000132   FF           DB 255
   \   000133   F8           DB 248
   \   000134   00           DB 0
   \   000135   00           DB 0
   \   000136   7F           DB 127
   \   000137   E0           DB 224
   \   000138   00           DB 0
   \   000139   20           DB 32
   \   00013A   3F           DB 63
   \   00013B   E0           DB 224
   \   00013C   00           DB 0
   \   00013D   20           DB 32
   \   00013E   FF           DB 255
   \   00013F   F8           DB 248
   \   000140   02           DB 2
   \   000141   00           DB 0
   \   000142   22           DB 34
   \   000143   20           DB 32
   \   000144   13           DB 19
   \   000145   40           DB 64
   \   000146   0A           DB 10
   \   000147   80           DB 128
   \   000148   12           DB 18
   \   000149   40           DB 64
   \   00014A   22           DB 34
   \   00014B   20           DB 32
   \   00014C   C2           DB 194
   \   00014D   18           DB 24
   \   00014E   0E           DB 14
   \   00014F   00           DB 0
   \   000150   21           DB 33
   \   000151   00           DB 0
   \   000152   21           DB 33
   \   000153   10           DB 16
   \   000154   21           DB 33
   \   000155   10           DB 16
   \   000156   F9           DB 249
   \   000157   20           DB 32
   \   000158   A9           DB 169
   \   000159   40           DB 64
   \   00015A   A9           DB 169
   \   00015B   00           DB 0
   \   00015C   AB           DB 171
   \   00015D   F8           DB 248
   \   00015E   A9           DB 169
   \   00015F   40           DB 64
   \   000160   A9           DB 169
   \   000161   40           DB 64
   \   000162   A9           DB 169
   \   000163   20           DB 32
   \   000164   B9           DB 185
   \   000165   20           DB 32
   \   000166   21           DB 33
   \   000167   50           DB 80
   \   000168   21           DB 33
   \   000169   88           DB 136
   \   00016A   21           DB 33
   \   00016B   00           DB 0
   \   00016C   3F           DB 63
   \   00016D   E0           DB 224
   \   00016E   20           DB 32
   \   00016F   20           DB 32
   \   000170   20           DB 32
   \   000171   20           DB 32
   \   000172   3F           DB 63
   \   000173   E0           DB 224
   \   000174   00           DB 0
   \   000175   00           DB 0
   \   000176   00           DB 0
   \   000177   00           DB 0
   \   000178   FF           DB 255
   \   000179   F8           DB 248
   \   00017A   08           DB 8
   \   00017B   00           DB 0
   \   00017C   10           DB 16
   \   00017D   00           DB 0
   \   00017E   3F           DB 63
   \   00017F   E0           DB 224
   \   000180   00           DB 0
   \   000181   20           DB 32
   \   000182   00           DB 0
   \   000183   20           DB 32
   \   000184   00           DB 0
   \   000185   20           DB 32
   \   000186   00           DB 0
   \   000187   C0           DB 192
   \   000188   02           DB 2
   \   000189   00           DB 0
   \   00018A   FF           DB 255
   \   00018B   F8           DB 248
   \   00018C   80           DB 128
   \   00018D   08           DB 8
   \   00018E   04           DB 4
   \   00018F   40           DB 64
   \   000190   52           DB 82
   \   000191   90           DB 144
   \   000192   51           DB 81
   \   000193   08           DB 8
   \   000194   92           DB 146
   \   000195   28           DB 40
   \   000196   0F           DB 15
   \   000197   E0           DB 224
   \   000198   30           DB 48
   \   000199   00           DB 0
   \   00019A   C2           DB 194
   \   00019B   00           DB 0
   \   00019C   22           DB 34
   \   00019D   20           DB 32
   \   00019E   22           DB 34
   \   00019F   20           DB 32
   \   0001A0   3F           DB 63
   \   0001A1   E0           DB 224
   \   0001A2   00           DB 0
   \   0001A3   20           DB 32
   \   0001A4   00           DB 0
   \   0001A5   00           DB 0
   \   0001A6   07           DB 7
   \   0001A7   E0           DB 224
   \   0001A8   F8           DB 248
   \   0001A9   20           DB 32
   \   0001AA   22           DB 34
   \   0001AB   20           DB 32
   \   0001AC   22           DB 34
   \   0001AD   20           DB 32
   \   0001AE   42           DB 66
   \   0001AF   20           DB 32
   \   0001B0   7B           DB 123
   \   0001B1   F8           DB 248
   \   0001B2   C8           DB 200
   \   0001B3   08           DB 8
   \   0001B4   48           DB 72
   \   0001B5   08           DB 8
   \   0001B6   4F           DB 79
   \   0001B7   E8           DB 232
   \   0001B8   48           DB 72
   \   0001B9   08           DB 8
   \   0001BA   78           DB 120
   \   0001BB   08           DB 8
   \   0001BC   48           DB 72
   \   0001BD   08           DB 8
   \   0001BE   00           DB 0
   \   0001BF   30           DB 48
   \   0001C0   01           DB 1
   \   0001C1   00           DB 0
   \   0001C2   01           DB 1
   \   0001C3   F0           DB 240
   \   0001C4   FA           DB 250
   \   0001C5   10           DB 16
   \   0001C6   24           DB 36
   \   0001C7   20           DB 32
   \   0001C8   23           DB 35
   \   0001C9   F8           DB 248
   \   0001CA   42           DB 66
   \   0001CB   48           DB 72
   \   0001CC   7A           DB 122
   \   0001CD   48           DB 72
   \   0001CE   CB           DB 203
   \   0001CF   F8           DB 248
   \   0001D0   4A           DB 74
   \   0001D1   48           DB 72
   \   0001D2   4A           DB 74
   \   0001D3   48           DB 72
   \   0001D4   4B           DB 75
   \   0001D5   F8           DB 248
   \   0001D6   7A           DB 122
   \   0001D7   48           DB 72
   \   0001D8   42           DB 66
   \   0001D9   48           DB 72
   \   0001DA   04           DB 4
   \   0001DB   18           DB 24
   \   0001DC   04           DB 4
   \   0001DD   00           DB 0
   \   0001DE   02           DB 2
   \   0001DF   00           DB 0
   \   0001E0   FF           DB 255
   \   0001E1   F8           DB 248
   \   0001E2   80           DB 128
   \   0001E3   08           DB 8
   \   0001E4   00           DB 0
   \   0001E5   00           DB 0
   \   0001E6   3F           DB 63
   \   0001E7   E0           DB 224
   \   0001E8   02           DB 2
   \   0001E9   00           DB 0
   \   0001EA   02           DB 2
   \   0001EB   00           DB 0
   \   0001EC   22           DB 34
   \   0001ED   00           DB 0
   \   0001EE   23           DB 35
   \   0001EF   E0           DB 224
   \   0001F0   22           DB 34
   \   0001F1   00           DB 0
   \   0001F2   22           DB 34
   \   0001F3   00           DB 0
   \   0001F4   52           DB 82
   \   0001F5   00           DB 0
   \   0001F6   8F           DB 143
   \   0001F7   F8           DB 248
   \   0001F8   00           DB 0
   \   0001F9   00           DB 0
   \   0001FA   FC           DB 252
   \   0001FB   00           DB 0
   \   0001FC   4B           DB 75
   \   0001FD   F0           DB 240
   \   0001FE   49           DB 73
   \   0001FF   10           DB 16
   \   000200   79           DB 121
   \   000201   10           DB 16
   \   000202   49           DB 73
   \   000203   10           DB 16
   \   000204   49           DB 73
   \   000205   10           DB 16
   \   000206   78           DB 120
   \   000207   A0           DB 160
   \   000208   48           DB 72
   \   000209   A0           DB 160
   \   00020A   4E           DB 78
   \   00020B   40           DB 64
   \   00020C   F8           DB 248
   \   00020D   40           DB 64
   \   00020E   08           DB 8
   \   00020F   A0           DB 160
   \   000210   09           DB 9
   \   000211   10           DB 16
   \   000212   0A           DB 10
   \   000213   08           DB 8
   \   000214   00           DB 0
   \   000215   80           DB 128
   \   000216   44           DB 68
   \   000217   90           DB 144
   \   000218   22           DB 34
   \   000219   A0           DB 160
   \   00021A   10           DB 16
   \   00021B   80           DB 128
   \   00021C   07           DB 7
   \   00021D   F0           DB 240
   \   00021E   84           DB 132
   \   00021F   10           DB 16
   \   000220   44           DB 68
   \   000221   10           DB 16
   \   000222   17           DB 23
   \   000223   F0           DB 240
   \   000224   14           DB 20
   \   000225   10           DB 16
   \   000226   24           DB 36
   \   000227   10           DB 16
   \   000228   27           DB 39
   \   000229   F0           DB 240
   \   00022A   44           DB 68
   \   00022B   10           DB 16
   \   00022C   44           DB 68
   \   00022D   10           DB 16
   \   00022E   04           DB 4
   \   00022F   70           DB 112
   \   000230   02           DB 2
   \   000231   00           DB 0
   \   000232   02           DB 2
   \   000233   00           DB 0
   \   000234   7F           DB 127
   \   000235   F0           DB 240
   \   000236   04           DB 4
   \   000237   00           DB 0
   \   000238   04           DB 4
   \   000239   00           DB 0
   \   00023A   FF           DB 255
   \   00023B   F8           DB 248
   \   00023C   08           DB 8
   \   00023D   00           DB 0
   \   00023E   10           DB 16
   \   00023F   00           DB 0
   \   000240   3F           DB 63
   \   000241   E0           DB 224
   \   000242   00           DB 0
   \   000243   20           DB 32
   \   000244   00           DB 0
   \   000245   40           DB 64
   \   000246   1C           DB 28
   \   000247   80           DB 128
   \   000248   03           DB 3
   \   000249   00           DB 0
   \   00024A   00           DB 0
   \   00024B   80           DB 128
   \   00024C   08           DB 8
   \   00024D   80           DB 128
   \   00024E   08           DB 8
   \   00024F   80           DB 128
   \   000250   08           DB 8
   \   000251   80           DB 128
   \   000252   88           DB 136
   \   000253   90           DB 144
   \   000254   48           DB 72
   \   000255   90           DB 144
   \   000256   48           DB 72
   \   000257   90           DB 144
   \   000258   28           DB 40
   \   000259   A0           DB 160
   \   00025A   28           DB 40
   \   00025B   A0           DB 160
   \   00025C   28           DB 40
   \   00025D   C0           DB 192
   \   00025E   08           DB 8
   \   00025F   80           DB 128
   \   000260   08           DB 8
   \   000261   80           DB 128
   \   000262   08           DB 8
   \   000263   80           DB 128
   \   000264   08           DB 8
   \   000265   80           DB 128
   \   000266   FF           DB 255
   \   000267   F8           DB 248
   \   000268   02           DB 2
   \   000269   00           DB 0
   \   00026A   02           DB 2
   \   00026B   00           DB 0
   \   00026C   7F           DB 127
   \   00026D   F0           DB 240
   \   00026E   04           DB 4
   \   00026F   00           DB 0
   \   000270   04           DB 4
   \   000271   00           DB 0
   \   000272   FF           DB 255
   \   000273   F8           DB 248
   \   000274   08           DB 8
   \   000275   00           DB 0
   \   000276   10           DB 16
   \   000277   00           DB 0
   \   000278   3F           DB 63
   \   000279   E0           DB 224
   \   00027A   00           DB 0
   \   00027B   20           DB 32
   \   00027C   00           DB 0
   \   00027D   40           DB 64
   \   00027E   1C           DB 28
   \   00027F   80           DB 128
   \   000280   03           DB 3
   \   000281   00           DB 0
   \   000282   00           DB 0
   \   000283   80           DB 128
   \   000284   01           DB 1
   \   000285   00           DB 0
   \   000286   40           DB 64
   \   000287   80           DB 128
   \   000288   20           DB 32
   \   000289   00           DB 0
   \   00028A   17           DB 23
   \   00028B   F0           DB 240
   \   00028C   00           DB 0
   \   00028D   80           DB 128
   \   00028E   80           DB 128
   \   00028F   80           DB 128
   \   000290   40           DB 64
   \   000291   80           DB 128
   \   000292   00           DB 0
   \   000293   80           DB 128
   \   000294   17           DB 23
   \   000295   F0           DB 240
   \   000296   10           DB 16
   \   000297   80           DB 128
   \   000298   20           DB 32
   \   000299   80           DB 128
   \   00029A   20           DB 32
   \   00029B   80           DB 128
   \   00029C   40           DB 64
   \   00029D   80           DB 128
   \   00029E   4F           DB 79
   \   00029F   F8           DB 248
   \   0002A0   00           DB 0
   \   0002A1   00           DB 0
   \   0002A2   7F           DB 127
   \   0002A3   F0           DB 240
   \   0002A4   02           DB 2
   \   0002A5   00           DB 0
   \   0002A6   02           DB 2
   \   0002A7   00           DB 0
   \   0002A8   02           DB 2
   \   0002A9   00           DB 0
   \   0002AA   02           DB 2
   \   0002AB   00           DB 0
   \   0002AC   FF           DB 255
   \   0002AD   F8           DB 248
   \   0002AE   05           DB 5
   \   0002AF   00           DB 0
   \   0002B0   05           DB 5
   \   0002B1   00           DB 0
   \   0002B2   09           DB 9
   \   0002B3   00           DB 0
   \   0002B4   11           DB 17
   \   0002B5   00           DB 0
   \   0002B6   21           DB 33
   \   0002B7   08           DB 8
   \   0002B8   41           DB 65
   \   0002B9   08           DB 8
   \   0002BA   80           DB 128
   \   0002BB   F8           DB 248
   \   0002BC   20           DB 32
   \   0002BD   A0           DB 160
   \   0002BE   20           DB 32
   \   0002BF   90           DB 144
   \   0002C0   48           DB 72
   \   0002C1   80           DB 128
   \   0002C2   48           DB 72
   \   0002C3   F0           DB 240
   \   0002C4   F3           DB 243
   \   0002C5   80           DB 128
   \   0002C6   10           DB 16
   \   0002C7   80           DB 128
   \   0002C8   20           DB 32
   \   0002C9   B8           DB 184
   \   0002CA   43           DB 67
   \   0002CB   C0           DB 192
   \   0002CC   F8           DB 248
   \   0002CD   90           DB 144
   \   0002CE   00           DB 0
   \   0002CF   A0           DB 160
   \   0002D0   00           DB 0
   \   0002D1   48           DB 72
   \   0002D2   18           DB 24
   \   0002D3   A8           DB 168
   \   0002D4   E3           DB 227
   \   0002D5   18           DB 24
   \   0002D6   00           DB 0
   \   0002D7   08           DB 8
   \   0002D8   47           DB 71
   \   0002D9   F0           DB 240
   \   0002DA   21           DB 33
   \   0002DB   20           DB 32
   \   0002DC   20           DB 32
   \   0002DD   C0           DB 192
   \   0002DE   07           DB 7
   \   0002DF   F0           DB 240
   \   0002E0   04           DB 4
   \   0002E1   90           DB 144
   \   0002E2   E4           DB 228
   \   0002E3   90           DB 144
   \   0002E4   27           DB 39
   \   0002E5   F0           DB 240
   \   0002E6   24           DB 36
   \   0002E7   90           DB 144
   \   0002E8   24           DB 36
   \   0002E9   90           DB 144
   \   0002EA   27           DB 39
   \   0002EB   F0           DB 240
   \   0002EC   24           DB 36
   \   0002ED   90           DB 144
   \   0002EE   24           DB 36
   \   0002EF   B0           DB 176
   \   0002F0   50           DB 80
   \   0002F1   00           DB 0
   \   0002F2   8F           DB 143
   \   0002F3   F8           DB 248
   \   0002F4   40           DB 64
   \   0002F5   00           DB 0
   \   0002F6   2F           DB 47
   \   0002F7   E0           DB 224
   \   0002F8   22           DB 34
   \   0002F9   20           DB 32
   \   0002FA   02           DB 2
   \   0002FB   20           DB 32
   \   0002FC   02           DB 2
   \   0002FD   20           DB 32
   \   0002FE   E2           DB 226
   \   0002FF   20           DB 32
   \   000300   2F           DB 47
   \   000301   E0           DB 224
   \   000302   22           DB 34
   \   000303   20           DB 32
   \   000304   22           DB 34
   \   000305   20           DB 32
   \   000306   22           DB 34
   \   000307   28           DB 40
   \   000308   2A           DB 42
   \   000309   28           DB 40
   \   00030A   32           DB 50
   \   00030B   28           DB 40
   \   00030C   22           DB 34
   \   00030D   18           DB 24
   \   00030E   02           DB 2
   \   00030F   08           DB 8
   \   000310   40           DB 64
   \   000311   50           DB 80
   \   000312   20           DB 32
   \   000313   48           DB 72
   \   000314   20           DB 32
   \   000315   40           DB 64
   \   000316   07           DB 7
   \   000317   F8           DB 248
   \   000318   E4           DB 228
   \   000319   40           DB 64
   \   00031A   24           DB 36
   \   00031B   48           DB 72
   \   00031C   27           DB 39
   \   00031D   48           DB 72
   \   00031E   25           DB 37
   \   00031F   50           DB 80
   \   000320   25           DB 37
   \   000321   50           DB 80
   \   000322   2D           DB 45
   \   000323   20           DB 32
   \   000324   35           DB 53
   \   000325   28           DB 40
   \   000326   2B           DB 43
   \   000327   68           DB 104
   \   000328   08           DB 8
   \   000329   98           DB 152
   \   00032A   11           DB 17
   \   00032B   08           DB 8
   \   00032C   11           DB 17
   \   00032D   00           DB 0
   \   00032E   10           DB 16
   \   00032F   80           DB 128
   \   000330   2F           DB 47
   \   000331   F8           DB 248
   \   000332   20           DB 32
   \   000333   00           DB 0
   \   000334   67           DB 103
   \   000335   F0           DB 240
   \   000336   A0           DB 160
   \   000337   00           DB 0
   \   000338   27           DB 39
   \   000339   F0           DB 240
   \   00033A   20           DB 32
   \   00033B   00           DB 0
   \   00033C   27           DB 39
   \   00033D   F0           DB 240
   \   00033E   24           DB 36
   \   00033F   10           DB 16
   \   000340   24           DB 36
   \   000341   10           DB 16
   \   000342   24           DB 36
   \   000343   10           DB 16
   \   000344   27           DB 39
   \   000345   F0           DB 240
   \   000346   24           DB 36
   \   000347   10           DB 16
   \   000348   04           DB 4
   \   000349   00           DB 0
   \   00034A   02           DB 2
   \   00034B   00           DB 0
   \   00034C   00           DB 0
   \   00034D   00           DB 0
   \   00034E   7F           DB 127
   \   00034F   F0           DB 240
   \   000350   00           DB 0
   \   000351   00           DB 0
   \   000352   00           DB 0
   \   000353   00           DB 0
   \   000354   00           DB 0
   \   000355   20           DB 32
   \   000356   20           DB 32
   \   000357   20           DB 32
   \   000358   10           DB 16
   \   000359   40           DB 64
   \   00035A   10           DB 16
   \   00035B   40           DB 64
   \   00035C   08           DB 8
   \   00035D   80           DB 128
   \   00035E   08           DB 8
   \   00035F   80           DB 128
   \   000360   01           DB 1
   \   000361   00           DB 0
   \   000362   FF           DB 255
   \   000363   F8           DB 248
   \   000364   00           DB 0
   \   000365   00           DB 0
   \   000366   3F           DB 63
   \   000367   E0           DB 224
   \   000368   20           DB 32
   \   000369   20           DB 32
   \   00036A   20           DB 32
   \   00036B   20           DB 32
   \   00036C   20           DB 32
   \   00036D   20           DB 32
   \   00036E   3F           DB 63
   \   00036F   E0           DB 224
   \   000370   02           DB 2
   \   000371   00           DB 0
   \   000372   02           DB 2
   \   000373   00           DB 0
   \   000374   22           DB 34
   \   000375   00           DB 0
   \   000376   23           DB 35
   \   000377   F0           DB 240
   \   000378   22           DB 34
   \   000379   00           DB 0
   \   00037A   22           DB 34
   \   00037B   00           DB 0
   \   00037C   52           DB 82
   \   00037D   00           DB 0
   \   00037E   8F           DB 143
   \   00037F   F8           DB 248
   \   000380   10           DB 16
   \   000381   10           DB 16
   \   000382   10           DB 16
   \   000383   10           DB 16
   \   000384   28           DB 40
   \   000385   10           DB 16
   \   000386   24           DB 36
   \   000387   90           DB 144
   \   000388   42           DB 66
   \   000389   90           DB 144
   \   00038A   80           DB 128
   \   00038B   90           DB 144
   \   00038C   7C           DB 124
   \   00038D   90           DB 144
   \   00038E   44           DB 68
   \   00038F   90           DB 144
   \   000390   44           DB 68
   \   000391   90           DB 144
   \   000392   44           DB 68
   \   000393   90           DB 144
   \   000394   58           DB 88
   \   000395   10           DB 16
   \   000396   42           DB 66
   \   000397   10           DB 16
   \   000398   42           DB 66
   \   000399   10           DB 16
   \   00039A   3E           DB 62
   \   00039B   70           DB 112
   \   00039C   20           DB 32
   \   00039D   18           DB 24
   \   00039E   10           DB 16
   \   00039F   E0           DB 224
   \   0003A0   FE           DB 254
   \   0003A1   80           DB 128
   \   0003A2   44           DB 68
   \   0003A3   80           DB 128
   \   0003A4   28           DB 40
   \   0003A5   80           DB 128
   \   0003A6   FE           DB 254
   \   0003A7   F8           DB 248
   \   0003A8   00           DB 0
   \   0003A9   90           DB 144
   \   0003AA   10           DB 16
   \   0003AB   90           DB 144
   \   0003AC   FE           DB 254
   \   0003AD   90           DB 144
   \   0003AE   10           DB 16
   \   0003AF   90           DB 144
   \   0003B0   54           DB 84
   \   0003B1   90           DB 144
   \   0003B2   92           DB 146
   \   0003B3   90           DB 144
   \   0003B4   11           DB 17
   \   0003B5   10           DB 16
   \   0003B6   72           DB 114
   \   0003B7   10           DB 16
   \   0003B8   00           DB 0
   \   0003B9   80           DB 128
   \   0003BA   FE           DB 254
   \   0003BB   80           DB 128
   \   0003BC   10           DB 16
   \   0003BD   80           DB 128
   \   0003BE   24           DB 36
   \   0003BF   F8           DB 248
   \   0003C0   43           DB 67
   \   0003C1   10           DB 16
   \   0003C2   FE           DB 254
   \   0003C3   90           DB 144
   \   0003C4   12           DB 18
   \   0003C5   90           DB 144
   \   0003C6   10           DB 16
   \   0003C7   90           DB 144
   \   0003C8   FE           DB 254
   \   0003C9   A0           DB 160
   \   0003CA   10           DB 16
   \   0003CB   A0           DB 160
   \   0003CC   10           DB 16
   \   0003CD   40           DB 64
   \   0003CE   1E           DB 30
   \   0003CF   A0           DB 160
   \   0003D0   F1           DB 241
   \   0003D1   10           DB 16
   \   0003D2   02           DB 2
   \   0003D3   08           DB 8
   \   0003D4   00           DB 0
   \   0003D5   00           DB 0
   \   0003D6   47           DB 71
   \   0003D7   E0           DB 224
   \   0003D8   20           DB 32
   \   0003D9   00           DB 0
   \   0003DA   20           DB 32
   \   0003DB   00           DB 0
   \   0003DC   00           DB 0
   \   0003DD   00           DB 0
   \   0003DE   0F           DB 15
   \   0003DF   F0           DB 240
   \   0003E0   E2           DB 226
   \   0003E1   40           DB 64
   \   0003E2   22           DB 34
   \   0003E3   40           DB 64
   \   0003E4   22           DB 34
   \   0003E5   40           DB 64
   \   0003E6   22           DB 34
   \   0003E7   48           DB 72
   \   0003E8   24           DB 36
   \   0003E9   48           DB 72
   \   0003EA   28           DB 40
   \   0003EB   38           DB 56
   \   0003EC   50           DB 80
   \   0003ED   00           DB 0
   \   0003EE   8F           DB 143
   \   0003EF   F8           DB 248
   \   0003F0   00           DB 0
   \   0003F1   00           DB 0
   \   0003F2   F3           DB 243
   \   0003F3   E0           DB 224
   \   0003F4   12           DB 18
   \   0003F5   20           DB 32
   \   0003F6   12           DB 18
   \   0003F7   20           DB 32
   \   0003F8   F3           DB 243
   \   0003F9   E0           DB 224
   \   0003FA   80           DB 128
   \   0003FB   80           DB 128
   \   0003FC   87           DB 135
   \   0003FD   F0           DB 240
   \   0003FE   84           DB 132
   \   0003FF   90           DB 144
   \   000400   F4           DB 244
   \   000401   90           DB 144
   \   000402   17           DB 23
   \   000403   F0           DB 240
   \   000404   10           DB 16
   \   000405   80           DB 128
   \   000406   10           DB 16
   \   000407   90           DB 144
   \   000408   1F           DB 31
   \   000409   F8           DB 248
   \   00040A   60           DB 96
   \   00040B   08           DB 8
   \   00040C   02           DB 2
   \   00040D   00           DB 0
   \   00040E   02           DB 2
   \   00040F   00           DB 0
   \   000410   02           DB 2
   \   000411   00           DB 0
   \   000412   02           DB 2
   \   000413   00           DB 0
   \   000414   FF           DB 255
   \   000415   F8           DB 248
   \   000416   02           DB 2
   \   000417   00           DB 0
   \   000418   05           DB 5
   \   000419   00           DB 0
   \   00041A   05           DB 5
   \   00041B   00           DB 0
   \   00041C   05           DB 5
   \   00041D   00           DB 0
   \   00041E   08           DB 8
   \   00041F   80           DB 128
   \   000420   08           DB 8
   \   000421   80           DB 128
   \   000422   10           DB 16
   \   000423   40           DB 64
   \   000424   20           DB 32
   \   000425   20           DB 32
   \   000426   C0           DB 192
   \   000427   18           DB 24
   \   000428   3F           DB 63
   \   000429   F8           DB 248
   \   00042A   20           DB 32
   \   00042B   80           DB 128
   \   00042C   21           DB 33
   \   00042D   00           DB 0
   \   00042E   27           DB 39
   \   00042F   F0           DB 240
   \   000430   24           DB 36
   \   000431   10           DB 16
   \   000432   27           DB 39
   \   000433   F0           DB 240
   \   000434   24           DB 36
   \   000435   10           DB 16
   \   000436   27           DB 39
   \   000437   F0           DB 240
   \   000438   20           DB 32
   \   000439   80           DB 128
   \   00043A   24           DB 36
   \   00043B   90           DB 144
   \   00043C   24           DB 36
   \   00043D   88           DB 136
   \   00043E   48           DB 72
   \   00043F   88           DB 136
   \   000440   40           DB 64
   \   000441   80           DB 128
   \   000442   83           DB 131
   \   000443   80           DB 128
   \   000444   07           DB 7
   \   000445   E0           DB 224
   \   000446   44           DB 68
   \   000447   20           DB 32
   \   000448   24           DB 36
   \   000449   20           DB 32
   \   00044A   07           DB 7
   \   00044B   E0           DB 224
   \   00044C   84           DB 132
   \   00044D   20           DB 32
   \   00044E   44           DB 68
   \   00044F   20           DB 32
   \   000450   07           DB 7
   \   000451   E0           DB 224
   \   000452   20           DB 32
   \   000453   00           DB 0
   \   000454   2F           DB 47
   \   000455   F0           DB 240
   \   000456   4A           DB 74
   \   000457   50           DB 80
   \   000458   4A           DB 74
   \   000459   50           DB 80
   \   00045A   8A           DB 138
   \   00045B   50           DB 80
   \   00045C   8A           DB 138
   \   00045D   50           DB 80
   \   00045E   1F           DB 31
   \   00045F   F8           DB 248
   \   000460   00           DB 0
   \   000461   00           DB 0
   \   000462   4F           DB 79
   \   000463   F0           DB 240
   \   000464   28           DB 40
   \   000465   10           DB 16
   \   000466   08           DB 8
   \   000467   10           DB 16
   \   000468   8F           DB 143
   \   000469   F0           DB 240
   \   00046A   48           DB 72
   \   00046B   10           DB 16
   \   00046C   08           DB 8
   \   00046D   10           DB 16
   \   00046E   2F           DB 47
   \   00046F   F0           DB 240
   \   000470   22           DB 34
   \   000471   40           DB 64
   \   000472   52           DB 82
   \   000473   48           DB 72
   \   000474   4A           DB 74
   \   000475   50           DB 80
   \   000476   86           DB 134
   \   000477   60           DB 96
   \   000478   82           DB 130
   \   000479   40           DB 64
   \   00047A   1F           DB 31
   \   00047B   F8           DB 248
   \   00047C   02           DB 2
   \   00047D   00           DB 0
   \   00047E   01           DB 1
   \   00047F   00           DB 0
   \   000480   3F           DB 63
   \   000481   F8           DB 248
   \   000482   24           DB 36
   \   000483   20           DB 32
   \   000484   3F           DB 63
   \   000485   F8           DB 248
   \   000486   24           DB 36
   \   000487   20           DB 32
   \   000488   27           DB 39
   \   000489   E0           DB 224
   \   00048A   20           DB 32
   \   00048B   00           DB 0
   \   00048C   2F           DB 47
   \   00048D   F0           DB 240
   \   00048E   24           DB 36
   \   00048F   20           DB 32
   \   000490   22           DB 34
   \   000491   40           DB 64
   \   000492   41           DB 65
   \   000493   80           DB 128
   \   000494   46           DB 70
   \   000495   60           DB 96
   \   000496   98           DB 152
   \   000497   18           DB 24
   \   000498   21           DB 33
   \   000499   00           DB 0
   \   00049A   21           DB 33
   \   00049B   00           DB 0
   \   00049C   41           DB 65
   \   00049D   E0           DB 224
   \   00049E   92           DB 146
   \   00049F   20           DB 32
   \   0004A0   F5           DB 245
   \   0004A1   40           DB 64
   \   0004A2   20           DB 32
   \   0004A3   80           DB 128
   \   0004A4   41           DB 65
   \   0004A5   40           DB 64
   \   0004A6   82           DB 130
   \   0004A7   20           DB 32
   \   0004A8   F4           DB 244
   \   0004A9   18           DB 24
   \   0004AA   01           DB 1
   \   0004AB   80           DB 128
   \   0004AC   00           DB 0
   \   0004AD   60           DB 96
   \   0004AE   33           DB 51
   \   0004AF   00           DB 0
   \   0004B0   C0           DB 192
   \   0004B1   C0           DB 192
   \   0004B2   00           DB 0
   \   0004B3   20           DB 32
   \   0004B4   20           DB 32
   \   0004B5   40           DB 64
   \   0004B6   12           DB 18
   \   0004B7   48           DB 72
   \   0004B8   12           DB 18
   \   0004B9   48           DB 72
   \   0004BA   FA           DB 250
   \   0004BB   48           DB 72
   \   0004BC   03           DB 3
   \   0004BD   F8           DB 248
   \   0004BE   08           DB 8
   \   0004BF   00           DB 0
   \   0004C0   8B           DB 139
   \   0004C1   F8           DB 248
   \   0004C2   48           DB 72
   \   0004C3   80           DB 128
   \   0004C4   53           DB 83
   \   0004C5   F8           DB 248
   \   0004C6   52           DB 82
   \   0004C7   A8           DB 168
   \   0004C8   02           DB 2
   \   0004C9   A8           DB 168
   \   0004CA   1A           DB 26
   \   0004CB   A8           DB 168
   \   0004CC   E2           DB 226
   \   0004CD   A8           DB 168
   \   0004CE   02           DB 2
   \   0004CF   18           DB 24
   \   0004D0   00           DB 0
   \   0004D1   00           DB 0
   \   0004D2   00           DB 0
   \   0004D3   00           DB 0
   \   0004D4   00           DB 0
   \   0004D5   00           DB 0
   \   0004D6   00           DB 0
   \   0004D7   00           DB 0
   \   0004D8   00           DB 0
   \   0004D9   00           DB 0
   \   0004DA   00           DB 0
   \   0004DB   00           DB 0
   \   0004DC   FF           DB 255
   \   0004DD   F8           DB 248
   \   0004DE   00           DB 0
   \   0004DF   00           DB 0
   \   0004E0   00           DB 0
   \   0004E1   00           DB 0
   \   0004E2   00           DB 0
   \   0004E3   00           DB 0
   \   0004E4   00           DB 0
   \   0004E5   00           DB 0
   \   0004E6   00           DB 0
   \   0004E7   00           DB 0
   \   0004E8   00           DB 0
   \   0004E9   00           DB 0
   \   0004EA   00           DB 0
   \   0004EB   00           DB 0
   \   0004EC   00           DB 0
   \   0004ED   00           DB 0
   \   0004EE   00           DB 0
   \   0004EF   00           DB 0
   \   0004F0   7F           DB 127
   \   0004F1   F0           DB 240
   \   0004F2   00           DB 0
   \   0004F3   00           DB 0
   \   0004F4   00           DB 0
   \   0004F5   00           DB 0
   \   0004F6   00           DB 0
   \   0004F7   00           DB 0
   \   0004F8   00           DB 0
   \   0004F9   00           DB 0
   \   0004FA   00           DB 0
   \   0004FB   00           DB 0
   \   0004FC   00           DB 0
   \   0004FD   00           DB 0
   \   0004FE   00           DB 0
   \   0004FF   00           DB 0
   \   000500   00           DB 0
   \   000501   00           DB 0
   \   000502   00           DB 0
   \   000503   00           DB 0
   \   000504   FF           DB 255
   \   000505   F8           DB 248
   \   000506   00           DB 0
   \   000507   00           DB 0
   \   000508   00           DB 0
   \   000509   00           DB 0
   \   00050A   7F           DB 127
   \   00050B   F0           DB 240
   \   00050C   00           DB 0
   \   00050D   00           DB 0
   \   00050E   00           DB 0
   \   00050F   00           DB 0
   \   000510   00           DB 0
   \   000511   00           DB 0
   \   000512   00           DB 0
   \   000513   00           DB 0
   \   000514   00           DB 0
   \   000515   00           DB 0
   \   000516   3F           DB 63
   \   000517   E0           DB 224
   \   000518   00           DB 0
   \   000519   00           DB 0
   \   00051A   00           DB 0
   \   00051B   00           DB 0
   \   00051C   00           DB 0
   \   00051D   00           DB 0
   \   00051E   00           DB 0
   \   00051F   00           DB 0
   \   000520   00           DB 0
   \   000521   00           DB 0
   \   000522   FF           DB 255
   \   000523   F8           DB 248
   \   000524   00           DB 0
   \   000525   00           DB 0
   \   000526   7F           DB 127
   \   000527   F8           DB 248
   \   000528   44           DB 68
   \   000529   88           DB 136
   \   00052A   44           DB 68
   \   00052B   88           DB 136
   \   00052C   44           DB 68
   \   00052D   88           DB 136
   \   00052E   44           DB 68
   \   00052F   88           DB 136
   \   000530   44           DB 68
   \   000531   88           DB 136
   \   000532   44           DB 68
   \   000533   88           DB 136
   \   000534   44           DB 68
   \   000535   88           DB 136
   \   000536   48           DB 72
   \   000537   78           DB 120
   \   000538   50           DB 80
   \   000539   08           DB 8
   \   00053A   40           DB 64
   \   00053B   08           DB 8
   \   00053C   7F           DB 127
   \   00053D   F8           DB 248
   \   00053E   40           DB 64
   \   00053F   08           DB 8
   \   000540   10           DB 16
   \   000541   80           DB 128
   \   000542   1F           DB 31
   \   000543   F8           DB 248
   \   000544   10           DB 16
   \   000545   00           DB 0
   \   000546   27           DB 39
   \   000547   F0           DB 240
   \   000548   24           DB 36
   \   000549   10           DB 16
   \   00054A   67           DB 103
   \   00054B   F0           DB 240
   \   00054C   A0           DB 160
   \   00054D   00           DB 0
   \   00054E   2F           DB 47
   \   00054F   F8           DB 248
   \   000550   28           DB 40
   \   000551   08           DB 8
   \   000552   27           DB 39
   \   000553   F0           DB 240
   \   000554   20           DB 32
   \   000555   40           DB 64
   \   000556   20           DB 32
   \   000557   40           DB 64
   \   000558   20           DB 32
   \   000559   40           DB 64
   \   00055A   21           DB 33
   \   00055B   C0           DB 192
   \   00055C   02           DB 2
   \   00055D   00           DB 0
   \   00055E   02           DB 2
   \   00055F   00           DB 0
   \   000560   02           DB 2
   \   000561   00           DB 0
   \   000562   02           DB 2
   \   000563   10           DB 16
   \   000564   7B           DB 123
   \   000565   20           DB 32
   \   000566   0B           DB 11
   \   000567   40           DB 64
   \   000568   0A           DB 10
   \   000569   80           DB 128
   \   00056A   12           DB 18
   \   00056B   80           DB 128
   \   00056C   12           DB 18
   \   00056D   40           DB 64
   \   00056E   22           DB 34
   \   00056F   20           DB 32
   \   000570   42           DB 66
   \   000571   10           DB 16
   \   000572   82           DB 130
   \   000573   08           DB 8
   \   000574   02           DB 2
   \   000575   00           DB 0
   \   000576   0E           DB 14
   \   000577   00           DB 0
   \   000578   02           DB 2
   \   000579   00           DB 0
   \   00057A   02           DB 2
   \   00057B   00           DB 0
   \   00057C   02           DB 2
   \   00057D   00           DB 0
   \   00057E   7F           DB 127
   \   00057F   F0           DB 240
   \   000580   42           DB 66
   \   000581   10           DB 16
   \   000582   42           DB 66
   \   000583   10           DB 16
   \   000584   7F           DB 127
   \   000585   F0           DB 240
   \   000586   42           DB 66
   \   000587   10           DB 16
   \   000588   42           DB 66
   \   000589   10           DB 16
   \   00058A   7F           DB 127
   \   00058B   F0           DB 240
   \   00058C   42           DB 66
   \   00058D   00           DB 0
   \   00058E   02           DB 2
   \   00058F   08           DB 8
   \   000590   02           DB 2
   \   000591   08           DB 8
   \   000592   01           DB 1
   \   000593   F8           DB 248
   \   000594   10           DB 16
   \   000595   40           DB 64
   \   000596   7F           DB 127
   \   000597   F0           DB 240
   \   000598   02           DB 2
   \   000599   00           DB 0
   \   00059A   3F           DB 63
   \   00059B   E0           DB 224
   \   00059C   04           DB 4
   \   00059D   00           DB 0
   \   00059E   FF           DB 255
   \   00059F   F8           DB 248
   \   0005A0   08           DB 8
   \   0005A1   00           DB 0
   \   0005A2   1F           DB 31
   \   0005A3   E0           DB 224
   \   0005A4   30           DB 48
   \   0005A5   20           DB 32
   \   0005A6   5F           DB 95
   \   0005A7   E0           DB 224
   \   0005A8   90           DB 144
   \   0005A9   20           DB 32
   \   0005AA   1F           DB 31
   \   0005AB   E0           DB 224
   \   0005AC   10           DB 16
   \   0005AD   20           DB 32
   \   0005AE   1F           DB 31
   \   0005AF   E0           DB 224
   \   0005B0   02           DB 2
   \   0005B1   00           DB 0
   \   0005B2   02           DB 2
   \   0005B3   00           DB 0
   \   0005B4   02           DB 2
   \   0005B5   00           DB 0
   \   0005B6   22           DB 34
   \   0005B7   10           DB 16
   \   0005B8   22           DB 34
   \   0005B9   10           DB 16
   \   0005BA   22           DB 34
   \   0005BB   20           DB 32
   \   0005BC   45           DB 69
   \   0005BD   40           DB 64
   \   0005BE   85           DB 133
   \   0005BF   00           DB 0
   \   0005C0   05           DB 5
   \   0005C1   00           DB 0
   \   0005C2   08           DB 8
   \   0005C3   80           DB 128
   \   0005C4   08           DB 8
   \   0005C5   80           DB 128
   \   0005C6   10           DB 16
   \   0005C7   40           DB 64
   \   0005C8   20           DB 32
   \   0005C9   20           DB 32
   \   0005CA   C0           DB 192
   \   0005CB   18           DB 24
   \   0005CC   10           DB 16
   \   0005CD   30           DB 48
   \   0005CE   91           DB 145
   \   0005CF   C0           DB 192
   \   0005D0   D5           DB 213
   \   0005D1   00           DB 0
   \   0005D2   B9           DB 185
   \   0005D3   00           DB 0
   \   0005D4   91           DB 145
   \   0005D5   00           DB 0
   \   0005D6   FD           DB 253
   \   0005D7   F8           DB 248
   \   0005D8   91           DB 145
   \   0005D9   20           DB 32
   \   0005DA   B9           DB 185
   \   0005DB   20           DB 32
   \   0005DC   D5           DB 213
   \   0005DD   20           DB 32
   \   0005DE   95           DB 149
   \   0005DF   20           DB 32
   \   0005E0   91           DB 145
   \   0005E1   20           DB 32
   \   0005E2   91           DB 145
   \   0005E3   20           DB 32
   \   0005E4   82           DB 130
   \   0005E5   20           DB 32
   \   0005E6   FC           DB 252
   \   0005E7   20           DB 32
   \   0005E8   00           DB 0
   \   0005E9   00           DB 0
   \   0005EA   7F           DB 127
   \   0005EB   F8           DB 248
   \   0005EC   40           DB 64
   \   0005ED   08           DB 8
   \   0005EE   42           DB 66
   \   0005EF   28           DB 40
   \   0005F0   53           DB 83
   \   0005F1   28           DB 40
   \   0005F2   4A           DB 74
   \   0005F3   A8           DB 168
   \   0005F4   44           DB 68
   \   0005F5   48           DB 72
   \   0005F6   44           DB 68
   \   0005F7   48           DB 72
   \   0005F8   4A           DB 74
   \   0005F9   A8           DB 168
   \   0005FA   4A           DB 74
   \   0005FB   A8           DB 168
   \   0005FC   51           DB 81
   \   0005FD   08           DB 8
   \   0005FE   62           DB 98
   \   0005FF   08           DB 8
   \   000600   40           DB 64
   \   000601   08           DB 8
   \   000602   40           DB 64
   \   000603   38           DB 56
   \   000604   20           DB 32
   \   000605   80           DB 128
   \   000606   20           DB 32
   \   000607   80           DB 128
   \   000608   24           DB 36
   \   000609   90           DB 144
   \   00060A   24           DB 36
   \   00060B   B0           DB 176
   \   00060C   F5           DB 245
   \   00060D   D0           DB 208
   \   00060E   2E           DB 46
   \   00060F   90           DB 144
   \   000610   24           DB 36
   \   000611   90           DB 144
   \   000612   24           DB 36
   \   000613   90           DB 144
   \   000614   24           DB 36
   \   000615   90           DB 144
   \   000616   24           DB 36
   \   000617   B0           DB 176
   \   000618   34           DB 52
   \   000619   80           DB 128
   \   00061A   C4           DB 196
   \   00061B   08           DB 8
   \   00061C   04           DB 4
   \   00061D   08           DB 8
   \   00061E   03           DB 3
   \   00061F   F8           DB 248
   \   000620   20           DB 32
   \   000621   40           DB 64
   \   000622   20           DB 32
   \   000623   40           DB 64
   \   000624   20           DB 32
   \   000625   40           DB 64
   \   000626   20           DB 32
   \   000627   40           DB 64
   \   000628   FA           DB 250
   \   000629   40           DB 64
   \   00062A   22           DB 34
   \   00062B   78           DB 120
   \   00062C   22           DB 34
   \   00062D   40           DB 64
   \   00062E   22           DB 34
   \   00062F   40           DB 64
   \   000630   22           DB 34
   \   000631   40           DB 64
   \   000632   22           DB 34
   \   000633   40           DB 64
   \   000634   3A           DB 58
   \   000635   40           DB 64
   \   000636   E2           DB 226
   \   000637   40           DB 64
   \   000638   02           DB 2
   \   000639   40           DB 64
   \   00063A   0F           DB 15
   \   00063B   F8           DB 248
   \   00063C   21           DB 33
   \   00063D   00           DB 0
   \   00063E   21           DB 33
   \   00063F   00           DB 0
   \   000640   21           DB 33
   \   000641   00           DB 0
   \   000642   FB           DB 251
   \   000643   E0           DB 224
   \   000644   21           DB 33
   \   000645   20           DB 32
   \   000646   21           DB 33
   \   000647   20           DB 32
   \   000648   21           DB 33
   \   000649   20           DB 32
   \   00064A   25           DB 37
   \   00064B   30           DB 48
   \   00064C   25           DB 37
   \   00064D   28           DB 40
   \   00064E   29           DB 41
   \   00064F   28           DB 40
   \   000650   22           DB 34
   \   000651   20           DB 32
   \   000652   22           DB 34
   \   000653   20           DB 32
   \   000654   24           DB 36
   \   000655   20           DB 32
   \   000656   28           DB 40
   \   000657   C0           DB 192
   \   000658   40           DB 64
   \   000659   00           DB 0
   \   00065A   27           DB 39
   \   00065B   F8           DB 248
   \   00065C   24           DB 36
   \   00065D   88           DB 136
   \   00065E   04           DB 4
   \   00065F   88           DB 136
   \   000660   E5           DB 229
   \   000661   E8           DB 232
   \   000662   24           DB 36
   \   000663   88           DB 136
   \   000664   27           DB 39
   \   000665   F8           DB 248
   \   000666   24           DB 36
   \   000667   08           DB 8
   \   000668   25           DB 37
   \   000669   E8           DB 232
   \   00066A   2D           DB 45
   \   00066B   28           DB 40
   \   00066C   35           DB 53
   \   00066D   28           DB 40
   \   00066E   25           DB 37
   \   00066F   E8           DB 232
   \   000670   04           DB 4
   \   000671   08           DB 8
   \   000672   08           DB 8
   \   000673   38           DB 56
   \   000674   7D           DB 125
   \   000675   F0           DB 240
   \   000676   45           DB 69
   \   000677   10           DB 16
   \   000678   45           DB 69
   \   000679   10           DB 16
   \   00067A   7D           DB 125
   \   00067B   F0           DB 240
   \   00067C   00           DB 0
   \   00067D   40           DB 64
   \   00067E   02           DB 2
   \   00067F   20           DB 32
   \   000680   FF           DB 255
   \   000681   F8           DB 248
   \   000682   08           DB 8
   \   000683   80           DB 128
   \   000684   30           DB 48
   \   000685   60           DB 96
   \   000686   C0           DB 192
   \   000687   18           DB 24
   \   000688   7D           DB 125
   \   000689   F0           DB 240
   \   00068A   45           DB 69
   \   00068B   10           DB 16
   \   00068C   45           DB 69
   \   00068D   10           DB 16
   \   00068E   7D           DB 125
   \   00068F   F0           DB 240
   \   000690   00           DB 0
   \   000691   80           DB 128
   \   000692   78           DB 120
   \   000693   80           DB 128
   \   000694   48           DB 72
   \   000695   F0           DB 240
   \   000696   49           DB 73
   \   000697   10           DB 16
   \   000698   4A           DB 74
   \   000699   A0           DB 160
   \   00069A   78           DB 120
   \   00069B   40           DB 64
   \   00069C   10           DB 16
   \   00069D   A0           DB 160
   \   00069E   53           DB 83
   \   00069F   18           DB 24
   \   0006A0   5C           DB 92
   \   0006A1   00           DB 0
   \   0006A2   51           DB 81
   \   0006A3   F0           DB 240
   \   0006A4   51           DB 81
   \   0006A5   10           DB 16
   \   0006A6   5D           DB 93
   \   0006A7   10           DB 16
   \   0006A8   E1           DB 225
   \   0006A9   F0           DB 240
   \   0006AA   01           DB 1
   \   0006AB   10           DB 16
   \   0006AC   02           DB 2
   \   0006AD   00           DB 0
   \   0006AE   02           DB 2
   \   0006AF   00           DB 0
   \   0006B0   02           DB 2
   \   0006B1   00           DB 0
   \   0006B2   7F           DB 127
   \   0006B3   F0           DB 240
   \   0006B4   42           DB 66
   \   0006B5   10           DB 16
   \   0006B6   42           DB 66
   \   0006B7   10           DB 16
   \   0006B8   42           DB 66
   \   0006B9   10           DB 16
   \   0006BA   42           DB 66
   \   0006BB   10           DB 16
   \   0006BC   7F           DB 127
   \   0006BD   F0           DB 240
   \   0006BE   42           DB 66
   \   0006BF   10           DB 16
   \   0006C0   42           DB 66
   \   0006C1   10           DB 16
   \   0006C2   42           DB 66
   \   0006C3   10           DB 16
   \   0006C4   42           DB 66
   \   0006C5   10           DB 16
   \   0006C6   7F           DB 127
   \   0006C7   F0           DB 240
   \   0006C8   00           DB 0
   \   0006C9   00           DB 0
   \   0006CA   00           DB 0
   \   0006CB   00           DB 0
   \   0006CC   00           DB 0
   \   0006CD   00           DB 0
   \   0006CE   00           DB 0
   \   0006CF   00           DB 0
   \   0006D0   00           DB 0
   \   0006D1   00           DB 0
   \   0006D2   00           DB 0
   \   0006D3   00           DB 0
   \   0006D4   18           DB 24
   \   0006D5   00           DB 0
   \   0006D6   18           DB 24
   \   0006D7   00           DB 0
   \   0006D8   00           DB 0
   \   0006D9   00           DB 0
   \   0006DA   00           DB 0
   \   0006DB   00           DB 0
   \   0006DC   18           DB 24
   \   0006DD   00           DB 0
   \   0006DE   18           DB 24
   \   0006DF   00           DB 0
   \   0006E0   00           DB 0
   \   0006E1   00           DB 0
   \   0006E2   00           DB 0
   \   0006E3   00           DB 0
   \   0006E4   60           DB 96
   \   0006E5   00           DB 0
   \   0006E6   90           DB 144
   \   0006E7   00           DB 0
   \   0006E8   97           DB 151
   \   0006E9   E8           DB 232
   \   0006EA   68           DB 104
   \   0006EB   18           DB 24
   \   0006EC   10           DB 16
   \   0006ED   08           DB 8
   \   0006EE   10           DB 16
   \   0006EF   08           DB 8
   \   0006F0   10           DB 16
   \   0006F1   00           DB 0
   \   0006F2   10           DB 16
   \   0006F3   00           DB 0
   \   0006F4   10           DB 16
   \   0006F5   00           DB 0
   \   0006F6   10           DB 16
   \   0006F7   00           DB 0
   \   0006F8   10           DB 16
   \   0006F9   08           DB 8
   \   0006FA   08           DB 8
   \   0006FB   10           DB 16
   \   0006FC   07           DB 7
   \   0006FD   E0           DB 224
   \   0006FE   00           DB 0
   \   0006FF   00           DB 0
   \   000700   18           DB 24
   \   000701   00           DB 0
   \   000702   24           DB 36
   \   000703   08           DB 8
   \   000704   24           DB 36
   \   000705   10           DB 16
   \   000706   24           DB 36
   \   000707   20           DB 32
   \   000708   24           DB 36
   \   000709   40           DB 64
   \   00070A   24           DB 36
   \   00070B   80           DB 128
   \   00070C   19           DB 25
   \   00070D   00           DB 0
   \   00070E   02           DB 2
   \   00070F   60           DB 96
   \   000710   04           DB 4
   \   000711   90           DB 144
   \   000712   08           DB 8
   \   000713   90           DB 144
   \   000714   10           DB 16
   \   000715   90           DB 144
   \   000716   20           DB 32
   \   000717   90           DB 144
   \   000718   40           DB 64
   \   000719   90           DB 144
   \   00071A   00           DB 0
   \   00071B   60           DB 96
    128          {
    129          0x00,0x00,0x4F,0xF8,0x28,0x08,0x02,0x20,0x84,0x10,0x48,0x88,0x00,0x80,0x2F,0xF8,
    130          0x21,0xC0,0x42,0xA0,0x42,0xA0,0x84,0x90,0x88,0x88,0x00,0x80,/*"Éî",0*/
    131          
    132          0x22,0x08,0x22,0x48,0x22,0x48,0x22,0x48,0xFA,0x48,0x22,0x48,0x22,0x48,0x22,0x48,
    133          0x22,0x48,0x3A,0x48,0xE2,0x48,0x02,0x48,0x02,0x08,0x04,0x08,/*"ÛÚ",1*/
    134          
    135          0x04,0x00,0x02,0x00,0xFF,0xF8,0x02,0x00,0x02,0x00,0x7F,0xF0,0x42,0x10,0x42,0x10,
    136          0x42,0x10,0x42,0x10,0x42,0x10,0x42,0x70,0x02,0x00,0x02,0x00,/*"ÊĞ",2*/
    137          
    138          0x04,0x00,0x02,0x00,0xFF,0xF8,0x80,0x08,0x84,0x08,0x04,0x00,0xFF,0xF8,0x08,0x40,
    139          0x10,0x40,0x3C,0x80,0x03,0x00,0x04,0xC0,0x18,0x20,0xE0,0x10,/*"°²",3*/
    140          
    141          0x01,0x10,0xFC,0xA0,0x48,0x00,0x49,0xF0,0x78,0x40,0x48,0x40,0x48,0x40,0x7B,0xF8,
    142          0x48,0x40,0x48,0x40,0x5C,0xA0,0xE8,0xA0,0x09,0x10,0x0A,0x08,/*"Áª",4*/
    143          
    144          0x10,0x80,0x27,0xF8,0x40,0x80,0x97,0xF0,0x15,0x50,0x25,0x50,0x67,0xF0,0xA0,0x00,
    145          0x27,0xF0,0x21,0x00,0x20,0x90,0x2A,0x88,0x2A,0x28,0x31,0xE0,/*"µÂ",5*/
    146          
    147          0x00,0x20,0x0D,0x20,0x70,0xA0,0x10,0xA0,0x12,0x20,0xFD,0x20,0x11,0x20,0x30,0x38,
    148          0x3B,0xE0,0x54,0x20,0x90,0x20,0x10,0x20,0x10,0x20,0x10,0x20,/*"¿Æ",6*/
    149          
    150          0x20,0x80,0x20,0x80,0x20,0x80,0xF7,0xF0,0x20,0x80,0x20,0x80,0x27,0xE0,0x32,0x20,
    151          0xE2,0x20,0x21,0x40,0x20,0x80,0x21,0x40,0x22,0x20,0xEC,0x18,/*"¼¼",7*/
    152          
    153          0x00,0x00,0x3F,0xF8,0x21,0x08,0x21,0x08,0x21,0x08,0x3F,0xF8,0x21,0x08,0x21,0x08,
    154          0x3F,0xF8,0x21,0x08,0x21,0x08,0x41,0x08,0x41,0x08,0x80,0x38,/*"ÓÃ",8*/
    155          
    156          0x02,0x00,0x01,0x00,0x3F,0xF8,0x20,0x08,0x20,0x08,0x20,0x08,0x3F,0xF8,0x20,0x08,
    157          0x20,0x00,0x20,0x00,0x20,0x00,0x40,0x00,0x40,0x00,0x80,0x00,/*"»§",9*/
    158          
    159          0x01,0x20,0x7D,0x40,0x04,0x90,0x28,0xA0,0x10,0x40,0x2F,0xA0,0x40,0x18,0x9F,0xC0,
    160          0x10,0x40,0x10,0x40,0x1F,0xC0,0x10,0x40,0x08,0x80,0xFF,0xF8,/*"µÇ",10*/
    161          
    162          0x00,0x00,0x7F,0xE0,0x00,0x20,0x3F,0xE0,0x00,0x20,0xFF,0xF8,0x02,0x00,0x22,0x20,
    163          0x13,0x40,0x0A,0x80,0x12,0x40,0x22,0x20,0xC2,0x18,0x0E,0x00,/*"Â¼",11*/
    164          
    165          0x21,0x00,0x21,0x10,0x21,0x10,0xF9,0x20,0xA9,0x40,0xA9,0x00,0xAB,0xF8,0xA9,0x40,
    166          0xA9,0x40,0xA9,0x20,0xB9,0x20,0x21,0x50,0x21,0x88,0x21,0x00,/*"ÕÊ",12*/
    167          
    168          0x3F,0xE0,0x20,0x20,0x20,0x20,0x3F,0xE0,0x00,0x00,0x00,0x00,0xFF,0xF8,0x08,0x00,
    169          0x10,0x00,0x3F,0xE0,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0xC0,/*"ºÅ",13*/
    170          
    171          0x02,0x00,0xFF,0xF8,0x80,0x08,0x04,0x40,0x52,0x90,0x51,0x08,0x92,0x28,0x0F,0xE0,
    172          0x30,0x00,0xC2,0x00,0x22,0x20,0x22,0x20,0x3F,0xE0,0x00,0x20,/*"ÃÜ",14*/
    173          
    174          0x00,0x00,0x07,0xE0,0xF8,0x20,0x22,0x20,0x22,0x20,0x42,0x20,0x7B,0xF8,0xC8,0x08,
    175          0x48,0x08,0x4F,0xE8,0x48,0x08,0x78,0x08,0x48,0x08,0x00,0x30,/*"Âë",15*/
    176          
    177          0x01,0x00,0x01,0xF0,0xFA,0x10,0x24,0x20,0x23,0xF8,0x42,0x48,0x7A,0x48,0xCB,0xF8,
    178          0x4A,0x48,0x4A,0x48,0x4B,0xF8,0x7A,0x48,0x42,0x48,0x04,0x18,/*"È·",16*/
    179          
    180          0x04,0x00,0x02,0x00,0xFF,0xF8,0x80,0x08,0x00,0x00,0x3F,0xE0,0x02,0x00,0x02,0x00,
    181          0x22,0x00,0x23,0xE0,0x22,0x00,0x22,0x00,0x52,0x00,0x8F,0xF8,/*"¶¨",17*/
    182          
    183          0x00,0x00,0xFC,0x00,0x4B,0xF0,0x49,0x10,0x79,0x10,0x49,0x10,0x49,0x10,0x78,0xA0,
    184          0x48,0xA0,0x4E,0x40,0xF8,0x40,0x08,0xA0,0x09,0x10,0x0A,0x08,/*"È¡",18*/
    185          
    186          0x00,0x80,0x44,0x90,0x22,0xA0,0x10,0x80,0x07,0xF0,0x84,0x10,0x44,0x10,0x17,0xF0,
    187          0x14,0x10,0x24,0x10,0x27,0xF0,0x44,0x10,0x44,0x10,0x04,0x70,/*"Ïû",19*/
    188          
    189          0x02,0x00,0x02,0x00,0x7F,0xF0,0x04,0x00,0x04,0x00,0xFF,0xF8,0x08,0x00,0x10,0x00,
    190          0x3F,0xE0,0x00,0x20,0x00,0x40,0x1C,0x80,0x03,0x00,0x00,0x80,/*"×¨",20*/
    191          
    192          0x08,0x80,0x08,0x80,0x08,0x80,0x88,0x90,0x48,0x90,0x48,0x90,0x28,0xA0,0x28,0xA0,
    193          0x28,0xC0,0x08,0x80,0x08,0x80,0x08,0x80,0x08,0x80,0xFF,0xF8,/*"Òµ",21*/
    194          
    195          0x02,0x00,0x02,0x00,0x7F,0xF0,0x04,0x00,0x04,0x00,0xFF,0xF8,0x08,0x00,0x10,0x00,
    196          0x3F,0xE0,0x00,0x20,0x00,0x40,0x1C,0x80,0x03,0x00,0x00,0x80,/*"×¨",22*/
    197          
    198          0x01,0x00,0x40,0x80,0x20,0x00,0x17,0xF0,0x00,0x80,0x80,0x80,0x40,0x80,0x00,0x80,
    199          0x17,0xF0,0x10,0x80,0x20,0x80,0x20,0x80,0x40,0x80,0x4F,0xF8,/*"×¢",23*/
    200          
    201          0x00,0x00,0x7F,0xF0,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0xFF,0xF8,0x05,0x00,
    202          0x05,0x00,0x09,0x00,0x11,0x00,0x21,0x08,0x41,0x08,0x80,0xF8,/*"ÎŞ",24*/
    203          
    204          0x20,0xA0,0x20,0x90,0x48,0x80,0x48,0xF0,0xF3,0x80,0x10,0x80,0x20,0xB8,0x43,0xC0,
    205          0xF8,0x90,0x00,0xA0,0x00,0x48,0x18,0xA8,0xE3,0x18,0x00,0x08,/*"Ïß",25*/
    206          
    207          0x47,0xF0,0x21,0x20,0x20,0xC0,0x07,0xF0,0x04,0x90,0xE4,0x90,0x27,0xF0,0x24,0x90,
    208          0x24,0x90,0x27,0xF0,0x24,0x90,0x24,0xB0,0x50,0x00,0x8F,0xF8,/*"Í¨",26*/
    209          
    210          0x40,0x00,0x2F,0xE0,0x22,0x20,0x02,0x20,0x02,0x20,0xE2,0x20,0x2F,0xE0,0x22,0x20,
    211          0x22,0x20,0x22,0x28,0x2A,0x28,0x32,0x28,0x22,0x18,0x02,0x08,/*"Ñ¶",27*/
    212          
    213          0x40,0x50,0x20,0x48,0x20,0x40,0x07,0xF8,0xE4,0x40,0x24,0x48,0x27,0x48,0x25,0x50,
    214          0x25,0x50,0x2D,0x20,0x35,0x28,0x2B,0x68,0x08,0x98,0x11,0x08,/*"³Ï",28*/
    215          
    216          0x11,0x00,0x10,0x80,0x2F,0xF8,0x20,0x00,0x67,0xF0,0xA0,0x00,0x27,0xF0,0x20,0x00,
    217          0x27,0xF0,0x24,0x10,0x24,0x10,0x24,0x10,0x27,0xF0,0x24,0x10,/*"ĞÅ",29*/
    218          
    219          0x04,0x00,0x02,0x00,0x00,0x00,0x7F,0xF0,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x20,
    220          0x10,0x40,0x10,0x40,0x08,0x80,0x08,0x80,0x01,0x00,0xFF,0xF8,/*"Á¢",30*/
    221          
    222          0x00,0x00,0x3F,0xE0,0x20,0x20,0x20,0x20,0x20,0x20,0x3F,0xE0,0x02,0x00,0x02,0x00,
    223          0x22,0x00,0x23,0xF0,0x22,0x00,0x22,0x00,0x52,0x00,0x8F,0xF8,/*"×ã",31*/
    224          
    225          0x10,0x10,0x10,0x10,0x28,0x10,0x24,0x90,0x42,0x90,0x80,0x90,0x7C,0x90,0x44,0x90,
    226          0x44,0x90,0x44,0x90,0x58,0x10,0x42,0x10,0x42,0x10,0x3E,0x70,/*"´´",32*/
    227          
    228          0x20,0x18,0x10,0xE0,0xFE,0x80,0x44,0x80,0x28,0x80,0xFE,0xF8,0x00,0x90,0x10,0x90,
    229          0xFE,0x90,0x10,0x90,0x54,0x90,0x92,0x90,0x11,0x10,0x72,0x10,/*"ĞÂ",33*/
    230          
    231          0x00,0x80,0xFE,0x80,0x10,0x80,0x24,0xF8,0x43,0x10,0xFE,0x90,0x12,0x90,0x10,0x90,
    232          0xFE,0xA0,0x10,0xA0,0x10,0x40,0x1E,0xA0,0xF1,0x10,0x02,0x08,/*"ÖÂ",34*/
    233          
    234          0x00,0x00,0x47,0xE0,0x20,0x00,0x20,0x00,0x00,0x00,0x0F,0xF0,0xE2,0x40,0x22,0x40,
    235          0x22,0x40,0x22,0x48,0x24,0x48,0x28,0x38,0x50,0x00,0x8F,0xF8,/*"Ô¶",35*/
    236          
    237          0x00,0x00,0xF3,0xE0,0x12,0x20,0x12,0x20,0xF3,0xE0,0x80,0x80,0x87,0xF0,0x84,0x90,
    238          0xF4,0x90,0x17,0xF0,0x10,0x80,0x10,0x90,0x1F,0xF8,0x60,0x08,/*"Ç¿",36*/
    239          
    240          0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0xFF,0xF8,0x02,0x00,0x05,0x00,0x05,0x00,
    241          0x05,0x00,0x08,0x80,0x08,0x80,0x10,0x40,0x20,0x20,0xC0,0x18,/*"´ó",37*/
    242          
    243          0x3F,0xF8,0x20,0x80,0x21,0x00,0x27,0xF0,0x24,0x10,0x27,0xF0,0x24,0x10,0x27,0xF0,
    244          0x20,0x80,0x24,0x90,0x24,0x88,0x48,0x88,0x40,0x80,0x83,0x80,/*"Ô­",38*/
    245          
    246          0x07,0xE0,0x44,0x20,0x24,0x20,0x07,0xE0,0x84,0x20,0x44,0x20,0x07,0xE0,0x20,0x00,
    247          0x2F,0xF0,0x4A,0x50,0x4A,0x50,0x8A,0x50,0x8A,0x50,0x1F,0xF8,/*"ÎÂ",39*/
    248          
    249          0x00,0x00,0x4F,0xF0,0x28,0x10,0x08,0x10,0x8F,0xF0,0x48,0x10,0x08,0x10,0x2F,0xF0,
    250          0x22,0x40,0x52,0x48,0x4A,0x50,0x86,0x60,0x82,0x40,0x1F,0xF8,/*"Êª",40*/
    251          
    252          0x02,0x00,0x01,0x00,0x3F,0xF8,0x24,0x20,0x3F,0xF8,0x24,0x20,0x27,0xE0,0x20,0x00,
    253          0x2F,0xF0,0x24,0x20,0x22,0x40,0x41,0x80,0x46,0x60,0x98,0x18,/*"¶È",41*/
    254          
    255          0x21,0x00,0x21,0x00,0x41,0xE0,0x92,0x20,0xF5,0x40,0x20,0x80,0x41,0x40,0x82,0x20,
    256          0xF4,0x18,0x01,0x80,0x00,0x60,0x33,0x00,0xC0,0xC0,0x00,0x20,/*"ÖÕ",42*/
    257          
    258          0x20,0x40,0x12,0x48,0x12,0x48,0xFA,0x48,0x03,0xF8,0x08,0x00,0x8B,0xF8,0x48,0x80,
    259          0x53,0xF8,0x52,0xA8,0x02,0xA8,0x1A,0xA8,0xE2,0xA8,0x02,0x18,/*"¶Ë",43*/
    260          
    261          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xF8,0x00,0x00,
    262          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"Ò»",44*/
    263          
    264          0x00,0x00,0x00,0x00,0x7F,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    265          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xF8,0x00,0x00,/*"¶ş",45*/
    266          
    267          0x00,0x00,0x7F,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xE0,
    268          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xF8,/*"Èı",46*/
    269          
    270          0x00,0x00,0x7F,0xF8,0x44,0x88,0x44,0x88,0x44,0x88,0x44,0x88,0x44,0x88,0x44,0x88,
    271          0x44,0x88,0x48,0x78,0x50,0x08,0x40,0x08,0x7F,0xF8,0x40,0x08,/*"ËÄ",47*/
    272          
    273          0x10,0x80,0x1F,0xF8,0x10,0x00,0x27,0xF0,0x24,0x10,0x67,0xF0,0xA0,0x00,0x2F,0xF8,
    274          0x28,0x08,0x27,0xF0,0x20,0x40,0x20,0x40,0x20,0x40,0x21,0xC0,/*"Í£",48*/
    275          
    276          0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x10,0x7B,0x20,0x0B,0x40,0x0A,0x80,0x12,0x80,
    277          0x12,0x40,0x22,0x20,0x42,0x10,0x82,0x08,0x02,0x00,0x0E,0x00,/*"Ë®",49*/
    278          
    279          0x02,0x00,0x02,0x00,0x02,0x00,0x7F,0xF0,0x42,0x10,0x42,0x10,0x7F,0xF0,0x42,0x10,
    280          0x42,0x10,0x7F,0xF0,0x42,0x00,0x02,0x08,0x02,0x08,0x01,0xF8,/*"µç",50*/
    281          
    282          0x10,0x40,0x7F,0xF0,0x02,0x00,0x3F,0xE0,0x04,0x00,0xFF,0xF8,0x08,0x00,0x1F,0xE0,
    283          0x30,0x20,0x5F,0xE0,0x90,0x20,0x1F,0xE0,0x10,0x20,0x1F,0xE0,/*"×Å",51*/
    284          
    285          0x02,0x00,0x02,0x00,0x02,0x00,0x22,0x10,0x22,0x10,0x22,0x20,0x45,0x40,0x85,0x00,
    286          0x05,0x00,0x08,0x80,0x08,0x80,0x10,0x40,0x20,0x20,0xC0,0x18,/*"»ğ",52*/
    287          
    288          0x10,0x30,0x91,0xC0,0xD5,0x00,0xB9,0x00,0x91,0x00,0xFD,0xF8,0x91,0x20,0xB9,0x20,
    289          0xD5,0x20,0x95,0x20,0x91,0x20,0x91,0x20,0x82,0x20,0xFC,0x20,/*"¶Ï",53*/
    290          
    291          0x00,0x00,0x7F,0xF8,0x40,0x08,0x42,0x28,0x53,0x28,0x4A,0xA8,0x44,0x48,0x44,0x48,
    292          0x4A,0xA8,0x4A,0xA8,0x51,0x08,0x62,0x08,0x40,0x08,0x40,0x38,/*"Íø",54*/
    293          
    294          0x20,0x80,0x20,0x80,0x24,0x90,0x24,0xB0,0xF5,0xD0,0x2E,0x90,0x24,0x90,0x24,0x90,
    295          0x24,0x90,0x24,0xB0,0x34,0x80,0xC4,0x08,0x04,0x08,0x03,0xF8,/*"µØ",55*/
    296          
    297          0x20,0x40,0x20,0x40,0x20,0x40,0x20,0x40,0xFA,0x40,0x22,0x78,0x22,0x40,0x22,0x40,
    298          0x22,0x40,0x22,0x40,0x3A,0x40,0xE2,0x40,0x02,0x40,0x0F,0xF8,/*"Ö·",56*/
    299          
    300          0x21,0x00,0x21,0x00,0x21,0x00,0xFB,0xE0,0x21,0x20,0x21,0x20,0x21,0x20,0x25,0x30,
    301          0x25,0x28,0x29,0x28,0x22,0x20,0x22,0x20,0x24,0x20,0x28,0xC0,/*"Ğ­",57*/
    302          
    303          0x40,0x00,0x27,0xF8,0x24,0x88,0x04,0x88,0xE5,0xE8,0x24,0x88,0x27,0xF8,0x24,0x08,
    304          0x25,0xE8,0x2D,0x28,0x35,0x28,0x25,0xE8,0x04,0x08,0x08,0x38,/*"µ÷",58*/
    305          
    306          0x7D,0xF0,0x45,0x10,0x45,0x10,0x7D,0xF0,0x00,0x40,0x02,0x20,0xFF,0xF8,0x08,0x80,
    307          0x30,0x60,0xC0,0x18,0x7D,0xF0,0x45,0x10,0x45,0x10,0x7D,0xF0,/*"Æ÷",59*/
    308          
    309          0x00,0x80,0x78,0x80,0x48,0xF0,0x49,0x10,0x4A,0xA0,0x78,0x40,0x10,0xA0,0x53,0x18,
    310          0x5C,0x00,0x51,0xF0,0x51,0x10,0x5D,0x10,0xE1,0xF0,0x01,0x10,/*"Â·",60*/
    311          
    312          0x02,0x00,0x02,0x00,0x02,0x00,0x7F,0xF0,0x42,0x10,0x42,0x10,0x42,0x10,0x42,0x10,
    313          0x7F,0xF0,0x42,0x10,0x42,0x10,0x42,0x10,0x42,0x10,0x7F,0xF0,/*"ÓÉ",61*/
    314          
    315          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x18,0x00,
    316          0x00,0x00,0x00,0x00,0x18,0x00,0x18,0x00,0x00,0x00,0x00,0x00,/*"£º",62*/
    317          
    318          0x60,0x00,0x90,0x00,0x97,0xE8,0x68,0x18,0x10,0x08,0x10,0x08,0x10,0x00,0x10,0x00,
    319          0x10,0x00,0x10,0x00,0x10,0x08,0x08,0x10,0x07,0xE0,0x00,0x00,/*"¡æ",63*/
    320          
    321          0x18,0x00,0x24,0x08,0x24,0x10,0x24,0x20,0x24,0x40,0x24,0x80,0x19,0x00,0x02,0x60,
    322          0x04,0x90,0x08,0x90,0x10,0x90,0x20,0x90,0x40,0x90,0x00,0x60,/*"£¥",64*/
    323          
    324          };
    325          
    326          //Ó¢ÎÄ7x14µãÕó×Ö·û andy

   \                                 In  segment CODE_C, align 1
    327          __code const unsigned char ASCII7x14[][14] =
   \                     ASCII7x14:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   10           DB 16
   \   000011   10           DB 16
   \   000012   10           DB 16
   \   000013   10           DB 16
   \   000014   10           DB 16
   \   000015   10           DB 16
   \   000016   00           DB 0
   \   000017   00           DB 0
   \   000018   30           DB 48
   \   000019   30           DB 48
   \   00001A   00           DB 0
   \   00001B   00           DB 0
   \   00001C   00           DB 0
   \   00001D   14           DB 20
   \   00001E   28           DB 40
   \   00001F   50           DB 80
   \   000020   00           DB 0
   \   000021   00           DB 0
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   28           DB 40
   \   00002E   28           DB 40
   \   00002F   FC           DB 252
   \   000030   28           DB 40
   \   000031   48           DB 72
   \   000032   50           DB 80
   \   000033   FC           DB 252
   \   000034   50           DB 80
   \   000035   50           DB 80
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   10           DB 16
   \   00003B   38           DB 56
   \   00003C   54           DB 84
   \   00003D   54           DB 84
   \   00003E   30           DB 48
   \   00003F   18           DB 24
   \   000040   14           DB 20
   \   000041   54           DB 84
   \   000042   54           DB 84
   \   000043   38           DB 56
   \   000044   10           DB 16
   \   000045   00           DB 0
   \   000046   00           DB 0
   \   000047   00           DB 0
   \   000048   00           DB 0
   \   000049   44           DB 68
   \   00004A   A8           DB 168
   \   00004B   A8           DB 168
   \   00004C   B0           DB 176
   \   00004D   54           DB 84
   \   00004E   1A           DB 26
   \   00004F   2A           DB 42
   \   000050   2A           DB 42
   \   000051   44           DB 68
   \   000052   00           DB 0
   \   000053   00           DB 0
   \   000054   00           DB 0
   \   000055   00           DB 0
   \   000056   00           DB 0
   \   000057   20           DB 32
   \   000058   50           DB 80
   \   000059   50           DB 80
   \   00005A   60           DB 96
   \   00005B   AC           DB 172
   \   00005C   A8           DB 168
   \   00005D   98           DB 152
   \   00005E   92           DB 146
   \   00005F   7C           DB 124
   \   000060   00           DB 0
   \   000061   00           DB 0
   \   000062   00           DB 0
   \   000063   60           DB 96
   \   000064   60           DB 96
   \   000065   20           DB 32
   \   000066   C0           DB 192
   \   000067   00           DB 0
   \   000068   00           DB 0
   \   000069   00           DB 0
   \   00006A   00           DB 0
   \   00006B   00           DB 0
   \   00006C   00           DB 0
   \   00006D   00           DB 0
   \   00006E   00           DB 0
   \   00006F   00           DB 0
   \   000070   00           DB 0
   \   000071   04           DB 4
   \   000072   08           DB 8
   \   000073   08           DB 8
   \   000074   10           DB 16
   \   000075   10           DB 16
   \   000076   10           DB 16
   \   000077   10           DB 16
   \   000078   10           DB 16
   \   000079   10           DB 16
   \   00007A   08           DB 8
   \   00007B   08           DB 8
   \   00007C   04           DB 4
   \   00007D   00           DB 0
   \   00007E   00           DB 0
   \   00007F   00           DB 0
   \   000080   40           DB 64
   \   000081   20           DB 32
   \   000082   10           DB 16
   \   000083   08           DB 8
   \   000084   04           DB 4
   \   000085   08           DB 8
   \   000086   10           DB 16
   \   000087   20           DB 32
   \   000088   40           DB 64
   \   000089   00           DB 0
   \   00008A   00           DB 0
   \   00008B   00           DB 0
   \   00008C   00           DB 0
   \   00008D   00           DB 0
   \   00008E   00           DB 0
   \   00008F   10           DB 16
   \   000090   10           DB 16
   \   000091   D6           DB 214
   \   000092   38           DB 56
   \   000093   38           DB 56
   \   000094   D6           DB 214
   \   000095   10           DB 16
   \   000096   10           DB 16
   \   000097   00           DB 0
   \   000098   00           DB 0
   \   000099   00           DB 0
   \   00009A   00           DB 0
   \   00009B   00           DB 0
   \   00009C   00           DB 0
   \   00009D   10           DB 16
   \   00009E   10           DB 16
   \   00009F   10           DB 16
   \   0000A0   FE           DB 254
   \   0000A1   10           DB 16
   \   0000A2   10           DB 16
   \   0000A3   10           DB 16
   \   0000A4   00           DB 0
   \   0000A5   00           DB 0
   \   0000A6   00           DB 0
   \   0000A7   00           DB 0
   \   0000A8   00           DB 0
   \   0000A9   00           DB 0
   \   0000AA   00           DB 0
   \   0000AB   00           DB 0
   \   0000AC   00           DB 0
   \   0000AD   00           DB 0
   \   0000AE   00           DB 0
   \   0000AF   00           DB 0
   \   0000B0   00           DB 0
   \   0000B1   00           DB 0
   \   0000B2   60           DB 96
   \   0000B3   60           DB 96
   \   0000B4   20           DB 32
   \   0000B5   C0           DB 192
   \   0000B6   00           DB 0
   \   0000B7   00           DB 0
   \   0000B8   00           DB 0
   \   0000B9   00           DB 0
   \   0000BA   00           DB 0
   \   0000BB   00           DB 0
   \   0000BC   FC           DB 252
   \   0000BD   00           DB 0
   \   0000BE   00           DB 0
   \   0000BF   00           DB 0
   \   0000C0   00           DB 0
   \   0000C1   00           DB 0
   \   0000C2   00           DB 0
   \   0000C3   00           DB 0
   \   0000C4   00           DB 0
   \   0000C5   00           DB 0
   \   0000C6   00           DB 0
   \   0000C7   00           DB 0
   \   0000C8   00           DB 0
   \   0000C9   00           DB 0
   \   0000CA   00           DB 0
   \   0000CB   00           DB 0
   \   0000CC   00           DB 0
   \   0000CD   00           DB 0
   \   0000CE   60           DB 96
   \   0000CF   60           DB 96
   \   0000D0   00           DB 0
   \   0000D1   00           DB 0
   \   0000D2   00           DB 0
   \   0000D3   02           DB 2
   \   0000D4   04           DB 4
   \   0000D5   04           DB 4
   \   0000D6   04           DB 4
   \   0000D7   08           DB 8
   \   0000D8   08           DB 8
   \   0000D9   10           DB 16
   \   0000DA   10           DB 16
   \   0000DB   20           DB 32
   \   0000DC   20           DB 32
   \   0000DD   20           DB 32
   \   0000DE   40           DB 64
   \   0000DF   00           DB 0
   \   0000E0   00           DB 0
   \   0000E1   00           DB 0
   \   0000E2   00           DB 0
   \   0000E3   30           DB 48
   \   0000E4   48           DB 72
   \   0000E5   84           DB 132
   \   0000E6   84           DB 132
   \   0000E7   84           DB 132
   \   0000E8   84           DB 132
   \   0000E9   84           DB 132
   \   0000EA   48           DB 72
   \   0000EB   30           DB 48
   \   0000EC   00           DB 0
   \   0000ED   00           DB 0
   \   0000EE   00           DB 0
   \   0000EF   00           DB 0
   \   0000F0   00           DB 0
   \   0000F1   10           DB 16
   \   0000F2   70           DB 112
   \   0000F3   10           DB 16
   \   0000F4   10           DB 16
   \   0000F5   10           DB 16
   \   0000F6   10           DB 16
   \   0000F7   10           DB 16
   \   0000F8   10           DB 16
   \   0000F9   7C           DB 124
   \   0000FA   00           DB 0
   \   0000FB   00           DB 0
   \   0000FC   00           DB 0
   \   0000FD   00           DB 0
   \   0000FE   00           DB 0
   \   0000FF   38           DB 56
   \   000100   44           DB 68
   \   000101   44           DB 68
   \   000102   04           DB 4
   \   000103   08           DB 8
   \   000104   10           DB 16
   \   000105   20           DB 32
   \   000106   44           DB 68
   \   000107   7C           DB 124
   \   000108   00           DB 0
   \   000109   00           DB 0
   \   00010A   00           DB 0
   \   00010B   00           DB 0
   \   00010C   00           DB 0
   \   00010D   38           DB 56
   \   00010E   44           DB 68
   \   00010F   44           DB 68
   \   000110   18           DB 24
   \   000111   04           DB 4
   \   000112   04           DB 4
   \   000113   44           DB 68
   \   000114   44           DB 68
   \   000115   38           DB 56
   \   000116   00           DB 0
   \   000117   00           DB 0
   \   000118   00           DB 0
   \   000119   00           DB 0
   \   00011A   08           DB 8
   \   00011B   08           DB 8
   \   00011C   18           DB 24
   \   00011D   28           DB 40
   \   00011E   48           DB 72
   \   00011F   48           DB 72
   \   000120   88           DB 136
   \   000121   7C           DB 124
   \   000122   08           DB 8
   \   000123   1C           DB 28
   \   000124   00           DB 0
   \   000125   00           DB 0
   \   000126   00           DB 0
   \   000127   00           DB 0
   \   000128   00           DB 0
   \   000129   7C           DB 124
   \   00012A   40           DB 64
   \   00012B   40           DB 64
   \   00012C   78           DB 120
   \   00012D   44           DB 68
   \   00012E   04           DB 4
   \   00012F   44           DB 68
   \   000130   44           DB 68
   \   000131   38           DB 56
   \   000132   00           DB 0
   \   000133   00           DB 0
   \   000134   00           DB 0
   \   000135   00           DB 0
   \   000136   00           DB 0
   \   000137   3C           DB 60
   \   000138   44           DB 68
   \   000139   80           DB 128
   \   00013A   B8           DB 184
   \   00013B   C4           DB 196
   \   00013C   84           DB 132
   \   00013D   84           DB 132
   \   00013E   84           DB 132
   \   00013F   78           DB 120
   \   000140   00           DB 0
   \   000141   00           DB 0
   \   000142   00           DB 0
   \   000143   00           DB 0
   \   000144   00           DB 0
   \   000145   7C           DB 124
   \   000146   44           DB 68
   \   000147   48           DB 72
   \   000148   08           DB 8
   \   000149   10           DB 16
   \   00014A   10           DB 16
   \   00014B   10           DB 16
   \   00014C   10           DB 16
   \   00014D   10           DB 16
   \   00014E   00           DB 0
   \   00014F   00           DB 0
   \   000150   00           DB 0
   \   000151   00           DB 0
   \   000152   00           DB 0
   \   000153   78           DB 120
   \   000154   84           DB 132
   \   000155   84           DB 132
   \   000156   48           DB 72
   \   000157   78           DB 120
   \   000158   84           DB 132
   \   000159   84           DB 132
   \   00015A   84           DB 132
   \   00015B   78           DB 120
   \   00015C   00           DB 0
   \   00015D   00           DB 0
   \   00015E   00           DB 0
   \   00015F   00           DB 0
   \   000160   00           DB 0
   \   000161   78           DB 120
   \   000162   84           DB 132
   \   000163   84           DB 132
   \   000164   84           DB 132
   \   000165   8C           DB 140
   \   000166   74           DB 116
   \   000167   04           DB 4
   \   000168   88           DB 136
   \   000169   F0           DB 240
   \   00016A   00           DB 0
   \   00016B   00           DB 0
   \   00016C   00           DB 0
   \   00016D   00           DB 0
   \   00016E   00           DB 0
   \   00016F   00           DB 0
   \   000170   00           DB 0
   \   000171   30           DB 48
   \   000172   30           DB 48
   \   000173   00           DB 0
   \   000174   00           DB 0
   \   000175   00           DB 0
   \   000176   30           DB 48
   \   000177   30           DB 48
   \   000178   00           DB 0
   \   000179   00           DB 0
   \   00017A   00           DB 0
   \   00017B   00           DB 0
   \   00017C   00           DB 0
   \   00017D   00           DB 0
   \   00017E   00           DB 0
   \   00017F   00           DB 0
   \   000180   10           DB 16
   \   000181   00           DB 0
   \   000182   00           DB 0
   \   000183   00           DB 0
   \   000184   00           DB 0
   \   000185   10           DB 16
   \   000186   10           DB 16
   \   000187   20           DB 32
   \   000188   00           DB 0
   \   000189   00           DB 0
   \   00018A   04           DB 4
   \   00018B   08           DB 8
   \   00018C   10           DB 16
   \   00018D   20           DB 32
   \   00018E   40           DB 64
   \   00018F   20           DB 32
   \   000190   10           DB 16
   \   000191   08           DB 8
   \   000192   04           DB 4
   \   000193   00           DB 0
   \   000194   00           DB 0
   \   000195   00           DB 0
   \   000196   00           DB 0
   \   000197   00           DB 0
   \   000198   00           DB 0
   \   000199   00           DB 0
   \   00019A   00           DB 0
   \   00019B   FC           DB 252
   \   00019C   00           DB 0
   \   00019D   00           DB 0
   \   00019E   FC           DB 252
   \   00019F   00           DB 0
   \   0001A0   00           DB 0
   \   0001A1   00           DB 0
   \   0001A2   00           DB 0
   \   0001A3   00           DB 0
   \   0001A4   00           DB 0
   \   0001A5   00           DB 0
   \   0001A6   40           DB 64
   \   0001A7   20           DB 32
   \   0001A8   10           DB 16
   \   0001A9   08           DB 8
   \   0001AA   04           DB 4
   \   0001AB   08           DB 8
   \   0001AC   10           DB 16
   \   0001AD   20           DB 32
   \   0001AE   40           DB 64
   \   0001AF   00           DB 0
   \   0001B0   00           DB 0
   \   0001B1   00           DB 0
   \   0001B2   00           DB 0
   \   0001B3   00           DB 0
   \   0001B4   78           DB 120
   \   0001B5   84           DB 132
   \   0001B6   84           DB 132
   \   0001B7   84           DB 132
   \   0001B8   08           DB 8
   \   0001B9   10           DB 16
   \   0001BA   10           DB 16
   \   0001BB   00           DB 0
   \   0001BC   30           DB 48
   \   0001BD   30           DB 48
   \   0001BE   00           DB 0
   \   0001BF   00           DB 0
   \   0001C0   00           DB 0
   \   0001C1   00           DB 0
   \   0001C2   00           DB 0
   \   0001C3   38           DB 56
   \   0001C4   44           DB 68
   \   0001C5   9A           DB 154
   \   0001C6   AA           DB 170
   \   0001C7   AA           DB 170
   \   0001C8   AA           DB 170
   \   0001C9   B4           DB 180
   \   0001CA   42           DB 66
   \   0001CB   3C           DB 60
   \   0001CC   00           DB 0
   \   0001CD   00           DB 0
   \   0001CE   00           DB 0
   \   0001CF   00           DB 0
   \   0001D0   00           DB 0
   \   0001D1   10           DB 16
   \   0001D2   10           DB 16
   \   0001D3   28           DB 40
   \   0001D4   28           DB 40
   \   0001D5   28           DB 40
   \   0001D6   38           DB 56
   \   0001D7   44           DB 68
   \   0001D8   44           DB 68
   \   0001D9   EE           DB 238
   \   0001DA   00           DB 0
   \   0001DB   00           DB 0
   \   0001DC   00           DB 0
   \   0001DD   00           DB 0
   \   0001DE   00           DB 0
   \   0001DF   F8           DB 248
   \   0001E0   44           DB 68
   \   0001E1   44           DB 68
   \   0001E2   78           DB 120
   \   0001E3   44           DB 68
   \   0001E4   44           DB 68
   \   0001E5   44           DB 68
   \   0001E6   44           DB 68
   \   0001E7   F8           DB 248
   \   0001E8   00           DB 0
   \   0001E9   00           DB 0
   \   0001EA   00           DB 0
   \   0001EB   00           DB 0
   \   0001EC   00           DB 0
   \   0001ED   3C           DB 60
   \   0001EE   44           DB 68
   \   0001EF   84           DB 132
   \   0001F0   80           DB 128
   \   0001F1   80           DB 128
   \   0001F2   80           DB 128
   \   0001F3   80           DB 128
   \   0001F4   44           DB 68
   \   0001F5   38           DB 56
   \   0001F6   00           DB 0
   \   0001F7   00           DB 0
   \   0001F8   00           DB 0
   \   0001F9   00           DB 0
   \   0001FA   00           DB 0
   \   0001FB   F0           DB 240
   \   0001FC   48           DB 72
   \   0001FD   44           DB 68
   \   0001FE   44           DB 68
   \   0001FF   44           DB 68
   \   000200   44           DB 68
   \   000201   44           DB 68
   \   000202   48           DB 72
   \   000203   F0           DB 240
   \   000204   00           DB 0
   \   000205   00           DB 0
   \   000206   00           DB 0
   \   000207   00           DB 0
   \   000208   00           DB 0
   \   000209   FC           DB 252
   \   00020A   44           DB 68
   \   00020B   40           DB 64
   \   00020C   48           DB 72
   \   00020D   78           DB 120
   \   00020E   48           DB 72
   \   00020F   40           DB 64
   \   000210   44           DB 68
   \   000211   FC           DB 252
   \   000212   00           DB 0
   \   000213   00           DB 0
   \   000214   00           DB 0
   \   000215   00           DB 0
   \   000216   00           DB 0
   \   000217   FC           DB 252
   \   000218   42           DB 66
   \   000219   40           DB 64
   \   00021A   48           DB 72
   \   00021B   78           DB 120
   \   00021C   48           DB 72
   \   00021D   40           DB 64
   \   00021E   40           DB 64
   \   00021F   E0           DB 224
   \   000220   00           DB 0
   \   000221   00           DB 0
   \   000222   00           DB 0
   \   000223   00           DB 0
   \   000224   00           DB 0
   \   000225   3C           DB 60
   \   000226   44           DB 68
   \   000227   84           DB 132
   \   000228   80           DB 128
   \   000229   80           DB 128
   \   00022A   8E           DB 142
   \   00022B   84           DB 132
   \   00022C   44           DB 68
   \   00022D   38           DB 56
   \   00022E   00           DB 0
   \   00022F   00           DB 0
   \   000230   00           DB 0
   \   000231   00           DB 0
   \   000232   00           DB 0
   \   000233   EE           DB 238
   \   000234   44           DB 68
   \   000235   44           DB 68
   \   000236   44           DB 68
   \   000237   7C           DB 124
   \   000238   44           DB 68
   \   000239   44           DB 68
   \   00023A   44           DB 68
   \   00023B   EE           DB 238
   \   00023C   00           DB 0
   \   00023D   00           DB 0
   \   00023E   00           DB 0
   \   00023F   00           DB 0
   \   000240   00           DB 0
   \   000241   7C           DB 124
   \   000242   10           DB 16
   \   000243   10           DB 16
   \   000244   10           DB 16
   \   000245   10           DB 16
   \   000246   10           DB 16
   \   000247   10           DB 16
   \   000248   10           DB 16
   \   000249   7C           DB 124
   \   00024A   00           DB 0
   \   00024B   00           DB 0
   \   00024C   00           DB 0
   \   00024D   00           DB 0
   \   00024E   00           DB 0
   \   00024F   7C           DB 124
   \   000250   10           DB 16
   \   000251   10           DB 16
   \   000252   10           DB 16
   \   000253   10           DB 16
   \   000254   10           DB 16
   \   000255   10           DB 16
   \   000256   10           DB 16
   \   000257   10           DB 16
   \   000258   90           DB 144
   \   000259   E0           DB 224
   \   00025A   00           DB 0
   \   00025B   00           DB 0
   \   00025C   00           DB 0
   \   00025D   EE           DB 238
   \   00025E   44           DB 68
   \   00025F   48           DB 72
   \   000260   50           DB 80
   \   000261   70           DB 112
   \   000262   48           DB 72
   \   000263   48           DB 72
   \   000264   44           DB 68
   \   000265   EE           DB 238
   \   000266   00           DB 0
   \   000267   00           DB 0
   \   000268   00           DB 0
   \   000269   00           DB 0
   \   00026A   00           DB 0
   \   00026B   E0           DB 224
   \   00026C   40           DB 64
   \   00026D   40           DB 64
   \   00026E   40           DB 64
   \   00026F   40           DB 64
   \   000270   40           DB 64
   \   000271   40           DB 64
   \   000272   44           DB 68
   \   000273   FC           DB 252
   \   000274   00           DB 0
   \   000275   00           DB 0
   \   000276   00           DB 0
   \   000277   00           DB 0
   \   000278   00           DB 0
   \   000279   EE           DB 238
   \   00027A   6C           DB 108
   \   00027B   6C           DB 108
   \   00027C   6C           DB 108
   \   00027D   54           DB 84
   \   00027E   54           DB 84
   \   00027F   54           DB 84
   \   000280   54           DB 84
   \   000281   D6           DB 214
   \   000282   00           DB 0
   \   000283   00           DB 0
   \   000284   00           DB 0
   \   000285   00           DB 0
   \   000286   00           DB 0
   \   000287   EE           DB 238
   \   000288   64           DB 100
   \   000289   64           DB 100
   \   00028A   54           DB 84
   \   00028B   54           DB 84
   \   00028C   54           DB 84
   \   00028D   4C           DB 76
   \   00028E   4C           DB 76
   \   00028F   E4           DB 228
   \   000290   00           DB 0
   \   000291   00           DB 0
   \   000292   00           DB 0
   \   000293   00           DB 0
   \   000294   00           DB 0
   \   000295   30           DB 48
   \   000296   48           DB 72
   \   000297   84           DB 132
   \   000298   84           DB 132
   \   000299   84           DB 132
   \   00029A   84           DB 132
   \   00029B   84           DB 132
   \   00029C   48           DB 72
   \   00029D   30           DB 48
   \   00029E   00           DB 0
   \   00029F   00           DB 0
   \   0002A0   00           DB 0
   \   0002A1   00           DB 0
   \   0002A2   00           DB 0
   \   0002A3   F8           DB 248
   \   0002A4   44           DB 68
   \   0002A5   44           DB 68
   \   0002A6   44           DB 68
   \   0002A7   78           DB 120
   \   0002A8   40           DB 64
   \   0002A9   40           DB 64
   \   0002AA   40           DB 64
   \   0002AB   E0           DB 224
   \   0002AC   00           DB 0
   \   0002AD   00           DB 0
   \   0002AE   00           DB 0
   \   0002AF   00           DB 0
   \   0002B0   00           DB 0
   \   0002B1   30           DB 48
   \   0002B2   48           DB 72
   \   0002B3   84           DB 132
   \   0002B4   84           DB 132
   \   0002B5   84           DB 132
   \   0002B6   84           DB 132
   \   0002B7   B4           DB 180
   \   0002B8   48           DB 72
   \   0002B9   38           DB 56
   \   0002BA   0C           DB 12
   \   0002BB   00           DB 0
   \   0002BC   00           DB 0
   \   0002BD   00           DB 0
   \   0002BE   00           DB 0
   \   0002BF   F8           DB 248
   \   0002C0   44           DB 68
   \   0002C1   44           DB 68
   \   0002C2   78           DB 120
   \   0002C3   50           DB 80
   \   0002C4   48           DB 72
   \   0002C5   48           DB 72
   \   0002C6   44           DB 68
   \   0002C7   E6           DB 230
   \   0002C8   00           DB 0
   \   0002C9   00           DB 0
   \   0002CA   00           DB 0
   \   0002CB   00           DB 0
   \   0002CC   00           DB 0
   \   0002CD   3C           DB 60
   \   0002CE   44           DB 68
   \   0002CF   40           DB 64
   \   0002D0   20           DB 32
   \   0002D1   18           DB 24
   \   0002D2   04           DB 4
   \   0002D3   04           DB 4
   \   0002D4   44           DB 68
   \   0002D5   78           DB 120
   \   0002D6   00           DB 0
   \   0002D7   00           DB 0
   \   0002D8   00           DB 0
   \   0002D9   00           DB 0
   \   0002DA   00           DB 0
   \   0002DB   FE           DB 254
   \   0002DC   92           DB 146
   \   0002DD   10           DB 16
   \   0002DE   10           DB 16
   \   0002DF   10           DB 16
   \   0002E0   10           DB 16
   \   0002E1   10           DB 16
   \   0002E2   10           DB 16
   \   0002E3   38           DB 56
   \   0002E4   00           DB 0
   \   0002E5   00           DB 0
   \   0002E6   00           DB 0
   \   0002E7   00           DB 0
   \   0002E8   00           DB 0
   \   0002E9   EE           DB 238
   \   0002EA   44           DB 68
   \   0002EB   44           DB 68
   \   0002EC   44           DB 68
   \   0002ED   44           DB 68
   \   0002EE   44           DB 68
   \   0002EF   44           DB 68
   \   0002F0   44           DB 68
   \   0002F1   38           DB 56
   \   0002F2   00           DB 0
   \   0002F3   00           DB 0
   \   0002F4   00           DB 0
   \   0002F5   00           DB 0
   \   0002F6   00           DB 0
   \   0002F7   EE           DB 238
   \   0002F8   44           DB 68
   \   0002F9   44           DB 68
   \   0002FA   28           DB 40
   \   0002FB   28           DB 40
   \   0002FC   28           DB 40
   \   0002FD   28           DB 40
   \   0002FE   10           DB 16
   \   0002FF   10           DB 16
   \   000300   00           DB 0
   \   000301   00           DB 0
   \   000302   00           DB 0
   \   000303   00           DB 0
   \   000304   00           DB 0
   \   000305   D6           DB 214
   \   000306   54           DB 84
   \   000307   54           DB 84
   \   000308   54           DB 84
   \   000309   54           DB 84
   \   00030A   6C           DB 108
   \   00030B   28           DB 40
   \   00030C   28           DB 40
   \   00030D   28           DB 40
   \   00030E   00           DB 0
   \   00030F   00           DB 0
   \   000310   00           DB 0
   \   000311   00           DB 0
   \   000312   00           DB 0
   \   000313   EE           DB 238
   \   000314   44           DB 68
   \   000315   28           DB 40
   \   000316   28           DB 40
   \   000317   10           DB 16
   \   000318   28           DB 40
   \   000319   28           DB 40
   \   00031A   44           DB 68
   \   00031B   EE           DB 238
   \   00031C   00           DB 0
   \   00031D   00           DB 0
   \   00031E   00           DB 0
   \   00031F   00           DB 0
   \   000320   00           DB 0
   \   000321   EE           DB 238
   \   000322   44           DB 68
   \   000323   28           DB 40
   \   000324   28           DB 40
   \   000325   10           DB 16
   \   000326   10           DB 16
   \   000327   10           DB 16
   \   000328   10           DB 16
   \   000329   38           DB 56
   \   00032A   00           DB 0
   \   00032B   00           DB 0
   \   00032C   00           DB 0
   \   00032D   00           DB 0
   \   00032E   00           DB 0
   \   00032F   7C           DB 124
   \   000330   88           DB 136
   \   000331   08           DB 8
   \   000332   10           DB 16
   \   000333   20           DB 32
   \   000334   20           DB 32
   \   000335   40           DB 64
   \   000336   44           DB 68
   \   000337   FC           DB 252
   \   000338   00           DB 0
   \   000339   00           DB 0
   \   00033A   00           DB 0
   \   00033B   1C           DB 28
   \   00033C   10           DB 16
   \   00033D   10           DB 16
   \   00033E   10           DB 16
   \   00033F   10           DB 16
   \   000340   10           DB 16
   \   000341   10           DB 16
   \   000342   10           DB 16
   \   000343   10           DB 16
   \   000344   10           DB 16
   \   000345   10           DB 16
   \   000346   1C           DB 28
   \   000347   00           DB 0
   \   000348   00           DB 0
   \   000349   70           DB 112
   \   00034A   10           DB 16
   \   00034B   10           DB 16
   \   00034C   10           DB 16
   \   00034D   10           DB 16
   \   00034E   10           DB 16
   \   00034F   10           DB 16
   \   000350   10           DB 16
   \   000351   10           DB 16
   \   000352   10           DB 16
   \   000353   10           DB 16
   \   000354   70           DB 112
   \   000355   00           DB 0
   \   000356   00           DB 0
   \   000357   70           DB 112
   \   000358   10           DB 16
   \   000359   10           DB 16
   \   00035A   10           DB 16
   \   00035B   10           DB 16
   \   00035C   10           DB 16
   \   00035D   10           DB 16
   \   00035E   10           DB 16
   \   00035F   10           DB 16
   \   000360   10           DB 16
   \   000361   10           DB 16
   \   000362   70           DB 112
   \   000363   00           DB 0
   \   000364   00           DB 0
   \   000365   10           DB 16
   \   000366   28           DB 40
   \   000367   00           DB 0
   \   000368   00           DB 0
   \   000369   00           DB 0
   \   00036A   00           DB 0
   \   00036B   00           DB 0
   \   00036C   00           DB 0
   \   00036D   00           DB 0
   \   00036E   00           DB 0
   \   00036F   00           DB 0
   \   000370   00           DB 0
   \   000371   00           DB 0
   \   000372   00           DB 0
   \   000373   00           DB 0
   \   000374   00           DB 0
   \   000375   00           DB 0
   \   000376   00           DB 0
   \   000377   00           DB 0
   \   000378   00           DB 0
   \   000379   00           DB 0
   \   00037A   00           DB 0
   \   00037B   00           DB 0
   \   00037C   00           DB 0
   \   00037D   00           DB 0
   \   00037E   00           DB 0
   \   00037F   FE           DB 254
   \   000380   00           DB 0
   \   000381   60           DB 96
   \   000382   60           DB 96
   \   000383   20           DB 32
   \   000384   C0           DB 192
   \   000385   00           DB 0
   \   000386   00           DB 0
   \   000387   00           DB 0
   \   000388   00           DB 0
   \   000389   00           DB 0
   \   00038A   00           DB 0
   \   00038B   00           DB 0
   \   00038C   00           DB 0
   \   00038D   00           DB 0
   \   00038E   00           DB 0
   \   00038F   00           DB 0
   \   000390   00           DB 0
   \   000391   00           DB 0
   \   000392   00           DB 0
   \   000393   00           DB 0
   \   000394   38           DB 56
   \   000395   44           DB 68
   \   000396   1C           DB 28
   \   000397   24           DB 36
   \   000398   44           DB 68
   \   000399   3E           DB 62
   \   00039A   00           DB 0
   \   00039B   00           DB 0
   \   00039C   00           DB 0
   \   00039D   00           DB 0
   \   00039E   00           DB 0
   \   00039F   C0           DB 192
   \   0003A0   40           DB 64
   \   0003A1   40           DB 64
   \   0003A2   78           DB 120
   \   0003A3   44           DB 68
   \   0003A4   44           DB 68
   \   0003A5   44           DB 68
   \   0003A6   44           DB 68
   \   0003A7   78           DB 120
   \   0003A8   00           DB 0
   \   0003A9   00           DB 0
   \   0003AA   00           DB 0
   \   0003AB   00           DB 0
   \   0003AC   00           DB 0
   \   0003AD   00           DB 0
   \   0003AE   00           DB 0
   \   0003AF   00           DB 0
   \   0003B0   3C           DB 60
   \   0003B1   44           DB 68
   \   0003B2   40           DB 64
   \   0003B3   40           DB 64
   \   0003B4   44           DB 68
   \   0003B5   38           DB 56
   \   0003B6   00           DB 0
   \   0003B7   00           DB 0
   \   0003B8   00           DB 0
   \   0003B9   00           DB 0
   \   0003BA   00           DB 0
   \   0003BB   0C           DB 12
   \   0003BC   04           DB 4
   \   0003BD   04           DB 4
   \   0003BE   3C           DB 60
   \   0003BF   44           DB 68
   \   0003C0   44           DB 68
   \   0003C1   44           DB 68
   \   0003C2   44           DB 68
   \   0003C3   3E           DB 62
   \   0003C4   00           DB 0
   \   0003C5   00           DB 0
   \   0003C6   00           DB 0
   \   0003C7   00           DB 0
   \   0003C8   00           DB 0
   \   0003C9   00           DB 0
   \   0003CA   00           DB 0
   \   0003CB   00           DB 0
   \   0003CC   38           DB 56
   \   0003CD   44           DB 68
   \   0003CE   7C           DB 124
   \   0003CF   40           DB 64
   \   0003D0   44           DB 68
   \   0003D1   38           DB 56
   \   0003D2   00           DB 0
   \   0003D3   00           DB 0
   \   0003D4   00           DB 0
   \   0003D5   00           DB 0
   \   0003D6   00           DB 0
   \   0003D7   1C           DB 28
   \   0003D8   24           DB 36
   \   0003D9   20           DB 32
   \   0003DA   F8           DB 248
   \   0003DB   20           DB 32
   \   0003DC   20           DB 32
   \   0003DD   20           DB 32
   \   0003DE   20           DB 32
   \   0003DF   78           DB 120
   \   0003E0   00           DB 0
   \   0003E1   00           DB 0
   \   0003E2   00           DB 0
   \   0003E3   00           DB 0
   \   0003E4   00           DB 0
   \   0003E5   00           DB 0
   \   0003E6   00           DB 0
   \   0003E7   00           DB 0
   \   0003E8   3C           DB 60
   \   0003E9   48           DB 72
   \   0003EA   48           DB 72
   \   0003EB   30           DB 48
   \   0003EC   40           DB 64
   \   0003ED   78           DB 120
   \   0003EE   44           DB 68
   \   0003EF   38           DB 56
   \   0003F0   00           DB 0
   \   0003F1   00           DB 0
   \   0003F2   00           DB 0
   \   0003F3   C0           DB 192
   \   0003F4   40           DB 64
   \   0003F5   40           DB 64
   \   0003F6   58           DB 88
   \   0003F7   64           DB 100
   \   0003F8   44           DB 68
   \   0003F9   44           DB 68
   \   0003FA   44           DB 68
   \   0003FB   EE           DB 238
   \   0003FC   00           DB 0
   \   0003FD   00           DB 0
   \   0003FE   00           DB 0
   \   0003FF   00           DB 0
   \   000400   00           DB 0
   \   000401   10           DB 16
   \   000402   00           DB 0
   \   000403   00           DB 0
   \   000404   70           DB 112
   \   000405   10           DB 16
   \   000406   10           DB 16
   \   000407   10           DB 16
   \   000408   10           DB 16
   \   000409   7C           DB 124
   \   00040A   00           DB 0
   \   00040B   00           DB 0
   \   00040C   00           DB 0
   \   00040D   00           DB 0
   \   00040E   00           DB 0
   \   00040F   08           DB 8
   \   000410   00           DB 0
   \   000411   00           DB 0
   \   000412   38           DB 56
   \   000413   08           DB 8
   \   000414   08           DB 8
   \   000415   08           DB 8
   \   000416   08           DB 8
   \   000417   08           DB 8
   \   000418   08           DB 8
   \   000419   70           DB 112
   \   00041A   00           DB 0
   \   00041B   00           DB 0
   \   00041C   00           DB 0
   \   00041D   C0           DB 192
   \   00041E   40           DB 64
   \   00041F   40           DB 64
   \   000420   5C           DB 92
   \   000421   48           DB 72
   \   000422   50           DB 80
   \   000423   70           DB 112
   \   000424   48           DB 72
   \   000425   EC           DB 236
   \   000426   00           DB 0
   \   000427   00           DB 0
   \   000428   00           DB 0
   \   000429   00           DB 0
   \   00042A   00           DB 0
   \   00042B   70           DB 112
   \   00042C   10           DB 16
   \   00042D   10           DB 16
   \   00042E   10           DB 16
   \   00042F   10           DB 16
   \   000430   10           DB 16
   \   000431   10           DB 16
   \   000432   10           DB 16
   \   000433   7C           DB 124
   \   000434   00           DB 0
   \   000435   00           DB 0
   \   000436   00           DB 0
   \   000437   00           DB 0
   \   000438   00           DB 0
   \   000439   00           DB 0
   \   00043A   00           DB 0
   \   00043B   00           DB 0
   \   00043C   F8           DB 248
   \   00043D   54           DB 84
   \   00043E   54           DB 84
   \   00043F   54           DB 84
   \   000440   54           DB 84
   \   000441   D6           DB 214
   \   000442   00           DB 0
   \   000443   00           DB 0
   \   000444   00           DB 0
   \   000445   00           DB 0
   \   000446   00           DB 0
   \   000447   00           DB 0
   \   000448   00           DB 0
   \   000449   00           DB 0
   \   00044A   D8           DB 216
   \   00044B   64           DB 100
   \   00044C   44           DB 68
   \   00044D   44           DB 68
   \   00044E   44           DB 68
   \   00044F   EE           DB 238
   \   000450   00           DB 0
   \   000451   00           DB 0
   \   000452   00           DB 0
   \   000453   00           DB 0
   \   000454   00           DB 0
   \   000455   00           DB 0
   \   000456   00           DB 0
   \   000457   00           DB 0
   \   000458   38           DB 56
   \   000459   44           DB 68
   \   00045A   44           DB 68
   \   00045B   44           DB 68
   \   00045C   44           DB 68
   \   00045D   38           DB 56
   \   00045E   00           DB 0
   \   00045F   00           DB 0
   \   000460   00           DB 0
   \   000461   00           DB 0
   \   000462   00           DB 0
   \   000463   00           DB 0
   \   000464   00           DB 0
   \   000465   00           DB 0
   \   000466   F8           DB 248
   \   000467   44           DB 68
   \   000468   44           DB 68
   \   000469   44           DB 68
   \   00046A   44           DB 68
   \   00046B   78           DB 120
   \   00046C   40           DB 64
   \   00046D   E0           DB 224
   \   00046E   00           DB 0
   \   00046F   00           DB 0
   \   000470   00           DB 0
   \   000471   00           DB 0
   \   000472   00           DB 0
   \   000473   00           DB 0
   \   000474   3C           DB 60
   \   000475   44           DB 68
   \   000476   44           DB 68
   \   000477   44           DB 68
   \   000478   44           DB 68
   \   000479   3C           DB 60
   \   00047A   04           DB 4
   \   00047B   0E           DB 14
   \   00047C   00           DB 0
   \   00047D   00           DB 0
   \   00047E   00           DB 0
   \   00047F   00           DB 0
   \   000480   00           DB 0
   \   000481   00           DB 0
   \   000482   EC           DB 236
   \   000483   30           DB 48
   \   000484   20           DB 32
   \   000485   20           DB 32
   \   000486   20           DB 32
   \   000487   F8           DB 248
   \   000488   00           DB 0
   \   000489   00           DB 0
   \   00048A   00           DB 0
   \   00048B   00           DB 0
   \   00048C   00           DB 0
   \   00048D   00           DB 0
   \   00048E   00           DB 0
   \   00048F   00           DB 0
   \   000490   3C           DB 60
   \   000491   44           DB 68
   \   000492   30           DB 48
   \   000493   08           DB 8
   \   000494   44           DB 68
   \   000495   78           DB 120
   \   000496   00           DB 0
   \   000497   00           DB 0
   \   000498   00           DB 0
   \   000499   00           DB 0
   \   00049A   00           DB 0
   \   00049B   00           DB 0
   \   00049C   10           DB 16
   \   00049D   10           DB 16
   \   00049E   7C           DB 124
   \   00049F   10           DB 16
   \   0004A0   10           DB 16
   \   0004A1   10           DB 16
   \   0004A2   10           DB 16
   \   0004A3   0C           DB 12
   \   0004A4   00           DB 0
   \   0004A5   00           DB 0
   \   0004A6   00           DB 0
   \   0004A7   00           DB 0
   \   0004A8   00           DB 0
   \   0004A9   00           DB 0
   \   0004AA   00           DB 0
   \   0004AB   00           DB 0
   \   0004AC   CC           DB 204
   \   0004AD   44           DB 68
   \   0004AE   44           DB 68
   \   0004AF   44           DB 68
   \   0004B0   44           DB 68
   \   0004B1   3E           DB 62
   \   0004B2   00           DB 0
   \   0004B3   00           DB 0
   \   0004B4   00           DB 0
   \   0004B5   00           DB 0
   \   0004B6   00           DB 0
   \   0004B7   00           DB 0
   \   0004B8   00           DB 0
   \   0004B9   00           DB 0
   \   0004BA   EE           DB 238
   \   0004BB   44           DB 68
   \   0004BC   28           DB 40
   \   0004BD   28           DB 40
   \   0004BE   28           DB 40
   \   0004BF   10           DB 16
   \   0004C0   00           DB 0
   \   0004C1   00           DB 0
   \   0004C2   00           DB 0
   \   0004C3   00           DB 0
   \   0004C4   00           DB 0
   \   0004C5   00           DB 0
   \   0004C6   00           DB 0
   \   0004C7   00           DB 0
   \   0004C8   D6           DB 214
   \   0004C9   54           DB 84
   \   0004CA   54           DB 84
   \   0004CB   54           DB 84
   \   0004CC   28           DB 40
   \   0004CD   28           DB 40
   \   0004CE   00           DB 0
   \   0004CF   00           DB 0
   \   0004D0   00           DB 0
   \   0004D1   00           DB 0
   \   0004D2   00           DB 0
   \   0004D3   00           DB 0
   \   0004D4   00           DB 0
   \   0004D5   00           DB 0
   \   0004D6   DC           DB 220
   \   0004D7   48           DB 72
   \   0004D8   30           DB 48
   \   0004D9   30           DB 48
   \   0004DA   48           DB 72
   \   0004DB   EC           DB 236
   \   0004DC   00           DB 0
   \   0004DD   00           DB 0
   \   0004DE   00           DB 0
   \   0004DF   00           DB 0
   \   0004E0   00           DB 0
   \   0004E1   00           DB 0
   \   0004E2   00           DB 0
   \   0004E3   00           DB 0
   \   0004E4   EE           DB 238
   \   0004E5   44           DB 68
   \   0004E6   28           DB 40
   \   0004E7   28           DB 40
   \   0004E8   10           DB 16
   \   0004E9   10           DB 16
   \   0004EA   20           DB 32
   \   0004EB   E0           DB 224
   \   0004EC   00           DB 0
   \   0004ED   00           DB 0
   \   0004EE   00           DB 0
   \   0004EF   00           DB 0
   \   0004F0   00           DB 0
   \   0004F1   00           DB 0
   \   0004F2   7C           DB 124
   \   0004F3   48           DB 72
   \   0004F4   10           DB 16
   \   0004F5   10           DB 16
   \   0004F6   24           DB 36
   \   0004F7   7C           DB 124
   \   0004F8   00           DB 0
   \   0004F9   00           DB 0
   \   0004FA   10           DB 16
   \   0004FB   10           DB 16
   \   0004FC   10           DB 16
   \   0004FD   10           DB 16
   \   0004FE   10           DB 16
   \   0004FF   10           DB 16
   \   000500   10           DB 16
   \   000501   10           DB 16
   \   000502   10           DB 16
   \   000503   10           DB 16
   \   000504   10           DB 16
   \   000505   10           DB 16
   \   000506   10           DB 16
   \   000507   10           DB 16
    328          {
    329          {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//" ",0//
    330          {0x00,0x00,0x10,0x10,0x10,0x10,0x10,0x10,0x00,0x00,0x30,0x30,0x00,0x00},//"!",1//
    331          {0x00,0x14,0x28,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//""",2//
    332          {0x00,0x00,0x00,0x28,0x28,0xFC,0x28,0x48,0x50,0xFC,0x50,0x50,0x00,0x00},//"#",3//
    333          {0x00,0x00,0x10,0x38,0x54,0x54,0x30,0x18,0x14,0x54,0x54,0x38,0x10,0x00},//"$",4//
    334          {0x00,0x00,0x00,0x44,0xA8,0xA8,0xB0,0x54,0x1A,0x2A,0x2A,0x44,0x00,0x00},//"%",5//
    335          {0x00,0x00,0x00,0x20,0x50,0x50,0x60,0xAC,0xA8,0x98,0x92,0x7C,0x00,0x00},//"&",6//
    336          {0x00,0x60,0x60,0x20,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//"'",7//
    337          {0x00,0x04,0x08,0x08,0x10,0x10,0x10,0x10,0x10,0x10,0x08,0x08,0x04,0x00},//"(",8//
    338          {0x00,0x00,0x40,0x20,0x10,0x08,0x04,0x08,0x10,0x20,0x40,0x00,0x00,0x00},//">",9//
    339          {0x00,0x00,0x00,0x10,0x10,0xD6,0x38,0x38,0xD6,0x10,0x10,0x00,0x00,0x00},//"*",10//
    340          {0x00,0x00,0x00,0x10,0x10,0x10,0xFE,0x10,0x10,0x10,0x00,0x00,0x00,0x00},//"+",11//
    341          {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x20,0xC0},//",",12//
    342          {0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//"-",13//
    343          {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00,0x00},//".",14//
    344          {0x00,0x02,0x04,0x04,0x04,0x08,0x08,0x10,0x10,0x20,0x20,0x20,0x40,0x00},//"/",15//
    345          {0x00,0x00,0x00,0x30,0x48,0x84,0x84,0x84,0x84,0x84,0x48,0x30,0x00,0x00},//"0",16//
    346          {0x00,0x00,0x00,0x10,0x70,0x10,0x10,0x10,0x10,0x10,0x10,0x7C,0x00,0x00},//"1",17//
    347          {0x00,0x00,0x00,0x38,0x44,0x44,0x04,0x08,0x10,0x20,0x44,0x7C,0x00,0x00},//"2",18//
    348          {0x00,0x00,0x00,0x38,0x44,0x44,0x18,0x04,0x04,0x44,0x44,0x38,0x00,0x00},//"3",19//
    349          {0x00,0x00,0x08,0x08,0x18,0x28,0x48,0x48,0x88,0x7C,0x08,0x1C,0x00,0x00},//"4",20//
    350          {0x00,0x00,0x00,0x7C,0x40,0x40,0x78,0x44,0x04,0x44,0x44,0x38,0x00,0x00},//"5",21//
    351          {0x00,0x00,0x00,0x3C,0x44,0x80,0xB8,0xC4,0x84,0x84,0x84,0x78,0x00,0x00},//"6",22//
    352          {0x00,0x00,0x00,0x7C,0x44,0x48,0x08,0x10,0x10,0x10,0x10,0x10,0x00,0x00},//"7",23//
    353          {0x00,0x00,0x00,0x78,0x84,0x84,0x48,0x78,0x84,0x84,0x84,0x78,0x00,0x00},//"8",24//
    354          {0x00,0x00,0x00,0x78,0x84,0x84,0x84,0x8C,0x74,0x04,0x88,0xF0,0x00,0x00},//"9",25//
    355          {0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,0x30,0x30,0x00,0x00},//":",26//
    356          {0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x10,0x10,0x20},//";",27//
    357          {0x00,0x00,0x04,0x08,0x10,0x20,0x40,0x20,0x10,0x08,0x04,0x00,0x00,0x00},//"<",28//
    358          {0x00,0x00,0x00,0x00,0x00,0xFC,0x00,0x00,0xFC,0x00,0x00,0x00,0x00,0x00},//"=",29//
    359          {0x00,0x00,0x40,0x20,0x10,0x08,0x04,0x08,0x10,0x20,0x40,0x00,0x00,0x00},//">",30//
    360          {0x00,0x00,0x78,0x84,0x84,0x84,0x08,0x10,0x10,0x00,0x30,0x30,0x00,0x00},//"?",31//
    361          {0x00,0x00,0x00,0x38,0x44,0x9A,0xAA,0xAA,0xAA,0xB4,0x42,0x3C,0x00,0x00},//"@",32//
    362          {0x00,0x00,0x00,0x10,0x10,0x28,0x28,0x28,0x38,0x44,0x44,0xEE,0x00,0x00},//"A",33//
    363          {0x00,0x00,0x00,0xF8,0x44,0x44,0x78,0x44,0x44,0x44,0x44,0xF8,0x00,0x00},//"B",34//
    364          {0x00,0x00,0x00,0x3C,0x44,0x84,0x80,0x80,0x80,0x80,0x44,0x38,0x00,0x00},//"C",35//
    365          {0x00,0x00,0x00,0xF0,0x48,0x44,0x44,0x44,0x44,0x44,0x48,0xF0,0x00,0x00},//"D",36//
    366          {0x00,0x00,0x00,0xFC,0x44,0x40,0x48,0x78,0x48,0x40,0x44,0xFC,0x00,0x00},//"E",37//
    367          {0x00,0x00,0x00,0xFC,0x42,0x40,0x48,0x78,0x48,0x40,0x40,0xE0,0x00,0x00},//"F",38//
    368          {0x00,0x00,0x00,0x3C,0x44,0x84,0x80,0x80,0x8E,0x84,0x44,0x38,0x00,0x00},//"G",39//
    369          {0x00,0x00,0x00,0xEE,0x44,0x44,0x44,0x7C,0x44,0x44,0x44,0xEE,0x00,0x00},//"H",40//
    370          {0x00,0x00,0x00,0x7C,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x7C,0x00,0x00},//"I",41//
    371          {0x00,0x00,0x00,0x7C,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x90,0xE0},//"J",42//
    372          {0x00,0x00,0x00,0xEE,0x44,0x48,0x50,0x70,0x48,0x48,0x44,0xEE,0x00,0x00},//"K",43//
    373          {0x00,0x00,0x00,0xE0,0x40,0x40,0x40,0x40,0x40,0x40,0x44,0xFC,0x00,0x00},//"L",44//
    374          {0x00,0x00,0x00,0xEE,0x6C,0x6C,0x6C,0x54,0x54,0x54,0x54,0xD6,0x00,0x00},//"M",45//
    375          {0x00,0x00,0x00,0xEE,0x64,0x64,0x54,0x54,0x54,0x4C,0x4C,0xE4,0x00,0x00},//"N",46//
    376          {0x00,0x00,0x00,0x30,0x48,0x84,0x84,0x84,0x84,0x84,0x48,0x30,0x00,0x00},//"O",47//
    377          {0x00,0x00,0x00,0xF8,0x44,0x44,0x44,0x78,0x40,0x40,0x40,0xE0,0x00,0x00},//"P",48//
    378          {0x00,0x00,0x00,0x30,0x48,0x84,0x84,0x84,0x84,0xB4,0x48,0x38,0x0C,0x00},//"Q",49//
    379          {0x00,0x00,0x00,0xF8,0x44,0x44,0x78,0x50,0x48,0x48,0x44,0xE6,0x00,0x00},//"R",50//
    380          {0x00,0x00,0x00,0x3C,0x44,0x40,0x20,0x18,0x04,0x04,0x44,0x78,0x00,0x00},//"S",51//
    381          {0x00,0x00,0x00,0xFE,0x92,0x10,0x10,0x10,0x10,0x10,0x10,0x38,0x00,0x00},//"T",52//
    382          {0x00,0x00,0x00,0xEE,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x38,0x00,0x00},//"U",53//
    383          {0x00,0x00,0x00,0xEE,0x44,0x44,0x28,0x28,0x28,0x28,0x10,0x10,0x00,0x00},//"V",54//
    384          {0x00,0x00,0x00,0xD6,0x54,0x54,0x54,0x54,0x6C,0x28,0x28,0x28,0x00,0x00},//"W",55//
    385          {0x00,0x00,0x00,0xEE,0x44,0x28,0x28,0x10,0x28,0x28,0x44,0xEE,0x00,0x00},//"X",56//
    386          {0x00,0x00,0x00,0xEE,0x44,0x28,0x28,0x10,0x10,0x10,0x10,0x38,0x00,0x00},//"Y",57//
    387          {0x00,0x00,0x00,0x7C,0x88,0x08,0x10,0x20,0x20,0x40,0x44,0xFC,0x00,0x00},//"Z",58//
    388          {0x00,0x1C,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x1C,0x00},//"[",59//
    389          {0x00,0x70,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x70,0x00},//"]",60//
    390          {0x00,0x70,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x70,0x00},//"]",61//
    391          {0x00,0x10,0x28,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//"^",62//
    392          {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE},//"_",63//
    393          {0x00,0x60,0x60,0x20,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//"'",64//
    394          {0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x44,0x1C,0x24,0x44,0x3E,0x00,0x00},//"a",65//
    395          {0x00,0x00,0x00,0xC0,0x40,0x40,0x78,0x44,0x44,0x44,0x44,0x78,0x00,0x00},//"b",66//
    396          {0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x44,0x40,0x40,0x44,0x38,0x00,0x00},//"c",67//
    397          {0x00,0x00,0x00,0x0C,0x04,0x04,0x3C,0x44,0x44,0x44,0x44,0x3E,0x00,0x00},//"d",68//
    398          {0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x44,0x7C,0x40,0x44,0x38,0x00,0x00},//"e",69//
    399          {0x00,0x00,0x00,0x1C,0x24,0x20,0xF8,0x20,0x20,0x20,0x20,0x78,0x00,0x00},//"f",70//
    400          {0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x48,0x48,0x30,0x40,0x78,0x44,0x38},//"g",71//
    401          {0x00,0x00,0x00,0xC0,0x40,0x40,0x58,0x64,0x44,0x44,0x44,0xEE,0x00,0x00},//"h",72//
    402          {0x00,0x00,0x00,0x10,0x00,0x00,0x70,0x10,0x10,0x10,0x10,0x7C,0x00,0x00},//"i",73//
    403          {0x00,0x00,0x00,0x08,0x00,0x00,0x38,0x08,0x08,0x08,0x08,0x08,0x08,0x70},//"j",74//
    404          {0x00,0x00,0x00,0xC0,0x40,0x40,0x5C,0x48,0x50,0x70,0x48,0xEC,0x00,0x00},//"k",75//
    405          {0x00,0x00,0x00,0x70,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x7C,0x00,0x00},//"l",76//
    406          {0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x54,0x54,0x54,0x54,0xD6,0x00,0x00},//"m",77//
    407          {0x00,0x00,0x00,0x00,0x00,0x00,0xD8,0x64,0x44,0x44,0x44,0xEE,0x00,0x00},//"n",78//
    408          {0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x44,0x44,0x44,0x44,0x38,0x00,0x00},//"o",79//
    409          {0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x44,0x44,0x44,0x44,0x78,0x40,0xE0},//"p",80//
    410          {0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x44,0x44,0x44,0x44,0x3C,0x04,0x0E},//"q",81//
    411          {0x00,0x00,0x00,0x00,0x00,0x00,0xEC,0x30,0x20,0x20,0x20,0xF8,0x00,0x00},//"r",82//
    412          {0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x44,0x30,0x08,0x44,0x78,0x00,0x00},//"s",83//
    413          {0x00,0x00,0x00,0x00,0x10,0x10,0x7C,0x10,0x10,0x10,0x10,0x0C,0x00,0x00},//"t",84//
    414          {0x00,0x00,0x00,0x00,0x00,0x00,0xCC,0x44,0x44,0x44,0x44,0x3E,0x00,0x00},//"u",85//
    415          {0x00,0x00,0x00,0x00,0x00,0x00,0xEE,0x44,0x28,0x28,0x28,0x10,0x00,0x00},//"v",86//
    416          {0x00,0x00,0x00,0x00,0x00,0x00,0xD6,0x54,0x54,0x54,0x28,0x28,0x00,0x00},//"w",87//
    417          {0x00,0x00,0x00,0x00,0x00,0x00,0xDC,0x48,0x30,0x30,0x48,0xEC,0x00,0x00},//"x",88//
    418          {0x00,0x00,0x00,0x00,0x00,0x00,0xEE,0x44,0x28,0x28,0x10,0x10,0x20,0xE0},//"y",89//
    419          {0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x48,0x10,0x10,0x24,0x7C,0x00,0x00},//"z",90//
    420          {0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10},//"|",91//
    421          };
    422          //-----------------------------------------------------------------------------
    423          #endif //LCD
    424          
    425          
    426          /**************************************************************************************************
    427           * @fn      HalLcdInit
    428           *
    429           * @brief   Initilize LCD Service
    430           *
    431           * @param   init - pointer to void that contains the initialized value
    432           *
    433           * @return  None
    434           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    435          void HalLcdInit(void)
   \                     HalLcdInit:
    436          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    437          #if (HAL_LCD == TRUE)
    438            HalLcd_HW_Init();
   \   000004                ; Setup parameters for call to function HalLcd_HW_Init
   \   000004   12....       LCALL   ??HalLcd_HW_Init?relay
    439          #endif
    440          }
   \   000007                REQUIRE ?Subroutine0
   \   000007                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    441          
    442          /**************************************************************************************************
    443           * @fn      HalLcdWriteValue
    444           *
    445           * @brief   Write a value to the LCD
    446           *
    447           * @param   value  - value that will be displayed
    448           *          radix  - 8, 10, 16
    449           *          option - display options
    450           *
    451           * @return  None
    452           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    453          void HalLcdWriteValue ( uint32 value, const uint8 radix, uint8 option)
   \                     HalLcdWriteValue:
    454          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 25
   \   000005   74E7         MOV     A,#-0x19
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7429         MOV     A,#0x29
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FE           MOV     R6,A
    455          #if (HAL_LCD == TRUE)
    456            uint8 buf[LCD_MAX_BUF];
    457          
    458            _ltoa( value, &buf[0], radix );
   \   000011                ; Setup parameters for call to function _ltoa
   \   000011   85..82       MOV     DPL,?XSP + 0
   \   000014   85..83       MOV     DPH,?XSP + 1
   \   000017   8582..       MOV     ?V0 + 0,DPL
   \   00001A   8583..       MOV     ?V0 + 1,DPH
   \   00001D   78..         MOV     R0,#?V0 + 0
   \   00001F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000022   12....       LCALL   ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000025   12....       LCALL   ?DEALLOC_XSTACK8
    459            HalLcdWriteString( (char*)buf, option );
   \   000028                ; Setup parameters for call to function HalLcdWriteString
   \   000028   EE           MOV     A,R6
   \   000029   F9           MOV     R1,A
   \   00002A   85..82       MOV     DPL,?XSP + 0
   \   00002D   85..83       MOV     DPH,?XSP + 1
   \   000030   AA82         MOV     R2,DPL
   \   000032   AB83         MOV     R3,DPH
   \   000034   12....       LCALL   ??HalLcdWriteString?relay
    460          #endif
    461          }
   \   000037   7419         MOV     A,#0x19
   \   000039                REQUIRE ?Subroutine1
   \   000039                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine43_0
   \   000003                ; // Fall through to label ??Subroutine43_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   12....       LCALL   ??_ltoa?relay
   \   000003   7402         MOV     A,#0x2
   \   000005   22           RET
    462          
    463          /**************************************************************************************************
    464           * @fn      HalLcdWriteScreen
    465           *
    466           * @brief   Write a value to the LCD
    467           *
    468           * @param   line1  - string that will be displayed on line 1
    469           *          line2  - string that will be displayed on line 2
    470           *
    471           * @return  None
    472           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    473          void HalLcdWriteScreen( char *line1, char *line2 )
   \                     HalLcdWriteScreen:
    474          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   \   000007   ED           MOV     A,R5
   \   000008   FF           MOV     R7,A
    475          #if (HAL_LCD == TRUE)
    476            HalLcdWriteString( line1, 0 );//andy 
   \   000009                ; Setup parameters for call to function HalLcdWriteString
   \   000009   7900         MOV     R1,#0x0
   \   00000B   12....       LCALL   ??HalLcdWriteString?relay
    477            HalLcdWriteString( line2, 1 );
   \   00000E                ; Setup parameters for call to function HalLcdWriteString
   \   00000E   7901         MOV     R1,#0x1
   \   000010   EE           MOV     A,R6
   \   000011   FA           MOV     R2,A
   \   000012   EF           MOV     A,R7
   \   000013   FB           MOV     R3,A
   \   000014   12....       LCALL   ??HalLcdWriteString?relay
    478          #endif
    479          }
   \   000017   80..         SJMP    ??Subroutine44_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    480          
    481          /**************************************************************************************************
    482           * @fn      HalLcdWriteStringValue
    483           *
    484           * @brief   Write a string followed by a value to the LCD
    485           *
    486           * @param   title  - Title that will be displayed before the value
    487           *          value  - value
    488           *          format - redix
    489           *          line   - line number
    490           *
    491           * @return  None
    492           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    493          void HalLcdWriteStringValue( char *title, uint16 value, uint8 format, uint8 line )
   \                     HalLcdWriteStringValue:
    494          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 25
   \   000005   74E7         MOV     A,#-0x19
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V0 + 2,R4
   \   000010   8D..         MOV     ?V0 + 3,R5
   \   000012   89..         MOV     ?V0 + 0,R1
   \   000014   742B         MOV     A,#0x2b
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V0 + 1,A
    495          #if (HAL_LCD == TRUE)
    496            uint8 tmpLen;
    497            uint8 buf[LCD_MAX_BUF];
    498            uint32 err;
    499          
    500            tmpLen = (uint8)osal_strlen( (char*)title );
   \   00001C                ; Setup parameters for call to function osal_strlen
   \   00001C   12....       LCALL   ??osal_strlen?relay
   \   00001F   EA           MOV     A,R2
   \   000020   F5..         MOV     ?V0 + 8,A
    501            osal_memcpy( buf, title, tmpLen );
   \   000022                ; Setup parameters for call to function osal_memcpy
   \   000022   8E..         MOV     ?V0 + 4,R6
   \   000024   8F..         MOV     ?V0 + 5,R7
   \   000026   75..00       MOV     ?V0 + 6,#0x0
   \   000029   78..         MOV     R0,#?V0 + 4
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00002E   8A..         MOV     ?V0 + 4,R2
   \   000030   AC..         MOV     R4,?V0 + 4
   \   000032   7D00         MOV     R5,#0x0
   \   000034   7403         MOV     A,#0x3
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   AA82         MOV     R2,DPL
   \   00003B   AB83         MOV     R3,DPH
   \   00003D   12....       LCALL   ??osal_memcpy?relay
   \   000040   7403         MOV     A,#0x3
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
    502            //buf[tmpLen] = ' ';
    503            err = (uint32)(value);
    504            _ltoa( err, &buf[tmpLen], format );
   \   000045                ; Setup parameters for call to function _ltoa
   \   000045   85..82       MOV     DPL,?XSP + 0
   \   000048   85..83       MOV     DPH,?XSP + 1
   \   00004B   E582         MOV     A,DPL
   \   00004D   25..         ADD     A,?V0 + 8
   \   00004F   F5..         MOV     ?V0 + 4,A
   \   000051   E583         MOV     A,DPH
   \   000053   3400         ADDC    A,#0x0
   \   000055   F5..         MOV     ?V0 + 5,A
   \   000057   78..         MOV     R0,#?V0 + 4
   \   000059   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005C   A9..         MOV     R1,?V0 + 0
   \   00005E   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000061   12....       LCALL   ?DEALLOC_XSTACK8
    505            HalLcdWriteString( (char*)buf, line );
   \   000064                ; Setup parameters for call to function HalLcdWriteString
   \   000064   A9..         MOV     R1,?V0 + 1
   \   000066   85..82       MOV     DPL,?XSP + 0
   \   000069   85..83       MOV     DPH,?XSP + 1
   \   00006C   AA82         MOV     R2,DPL
   \   00006E   AB83         MOV     R3,DPH
   \   000070   12....       LCALL   ??HalLcdWriteString?relay
    506          #endif
    507          }
   \   000073   7419         MOV     A,#0x19
   \   000075   12....       LCALL   ?DEALLOC_XSTACK8
   \   000078   7F0A         MOV     R7,#0xa
   \   00007A   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   AA..         MOV     R2,?V0 + 2
   \   000002   AB..         MOV     R3,?V0 + 3
   \   000004                REQUIRE ??Subroutine45_0
   \   000004                ; // Fall through to label ??Subroutine45_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   E4           CLR     A
   \   000001   FC           MOV     R4,A
   \   000002   FD           MOV     R5,A
   \   000003                REQUIRE ??Subroutine46_0
   \   000003                ; // Fall through to label ??Subroutine46_0
    508          
    509          
    510          //Ğ´Ó¢ÎÄ×Ö·û´®£¬Ö»²Á³ı×Ö·û´®ÇøÓò

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    511          void HalLcdWriteEnString(uint8 x, uint8 y, char *title)
   \                     HalLcdWriteEnString:
    512          {  
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   8A..         MOV     ?V0 + 3,R2
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
    513          #if (HAL_LCD == TRUE)
    514            uint8 tmpLen;
    515          
    516            tmpLen = (uint8)osal_strlen( (char*)title );
    517            DrawRectFill(x, y, tmpLen*7, 14, WHITE); 
   \   00000D                ; Setup parameters for call to function DrawRectFill
   \   00000D   75..FF       MOV     ?V0 + 0,#-0x1
   \   000010   75..FF       MOV     ?V0 + 1,#-0x1
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   75..0E       MOV     ?V0 + 0,#0xe
   \   00001B   75..00       MOV     ?V0 + 1,#0x0
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023                ; Setup parameters for call to function osal_strlen
   \   000023   EE           MOV     A,R6
   \   000024   FA           MOV     R2,A
   \   000025   EF           MOV     A,R7
   \   000026   FB           MOV     R3,A
   \   000027   12....       LCALL   ??osal_strlen?relay
   \   00002A   EA           MOV     A,R2
   \   00002B   75F007       MOV     B,#0x7
   \   00002E   A4           MUL     AB
   \   00002F   F5..         MOV     ?V0 + 0,A
   \   000031   E5F0         MOV     A,B
   \   000033   F5..         MOV     ?V0 + 1,A
   \   000035   78..         MOV     R0,#?V0 + 0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   85....       MOV     ?V0 + 0,?V0 + 3
   \   00003D   AC..         MOV     R4,?V0 + 0
   \   00003F   7D00         MOV     R5,#0x0
   \   000041   85....       MOV     ?V0 + 0,?V0 + 2
   \   000044   AA..         MOV     R2,?V0 + 0
   \   000046   7B00         MOV     R3,#0x0
   \   000048   12....       LCALL   ??DrawRectFill?relay
   \   00004B   7406         MOV     A,#0x6
   \   00004D   12....       LCALL   ?DEALLOC_XSTACK8
    518            LCD_write_EN_string(x, y,(unsigned char *)title);
   \   000050                ; Setup parameters for call to function LCD_write_EN_string
   \   000050   EE           MOV     A,R6
   \   000051   FC           MOV     R4,A
   \   000052   EF           MOV     A,R7
   \   000053   FD           MOV     R5,A
   \   000054   AA..         MOV     R2,?V0 + 3
   \   000056   A9..         MOV     R1,?V0 + 2
   \   000058   02....       LJMP    ?Subroutine3 & 0xFFFF
    519          #endif  
    520          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ??LCD_write_EN_string?relay
   \   000003                REQUIRE ??Subroutine48_0
   \   000003                ; // Fall through to label ??Subroutine48_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    521          
    522          /**************************************************************************************************
    523           * @fn      HalLcdWriteStringValue
    524           *
    525           * @brief   Write a string followed by a value to the LCD
    526           *
    527           * @param   title   - Title that will be displayed before the value
    528           *          value1  - value #1
    529           *          format1 - redix of value #1
    530           *          value2  - value #2
    531           *          format2 - redix of value #2
    532           *          line    - line number
    533           *
    534           * @return  None
    535           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    536          void HalLcdWriteStringValueValue( char *title, uint16 value1, uint8 format1,
   \                     HalLcdWriteStringValueValue:
    537                                            uint16 value2, uint8 format2, uint8 line )
    538          {
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 25
   \   000005   74E7         MOV     A,#-0x19
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V0 + 2,R4
   \   000010   8D..         MOV     ?V0 + 3,R5
   \   000012   89..         MOV     ?V0 + 5,R1
   \   000014   742C         MOV     A,#0x2c
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V0 + 0,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V0 + 1,A
   \   000020   742E         MOV     A,#0x2e
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F5..         MOV     ?V0 + 4,A
   \   000028   742F         MOV     A,#0x2f
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V0 + 7,A
    539          #if (HAL_LCD == TRUE)
    540          
    541            uint8 tmpLen;
    542            uint8 buf[LCD_MAX_BUF];
    543            uint32 err;
    544          
    545            tmpLen = (uint8)osal_strlen( (char*)title );
   \   000030                ; Setup parameters for call to function osal_strlen
   \   000030   12....       LCALL   ??osal_strlen?relay
   \   000033   EA           MOV     A,R2
   \   000034   F5..         MOV     ?V0 + 6,A
    546            if ( tmpLen )
   \   000036   6023         JZ      ??HalLcdWriteStringValueValue_0
    547            {
    548              osal_memcpy( buf, title, tmpLen );
   \   000038                ; Setup parameters for call to function osal_memcpy
   \   000038   8E..         MOV     ?V0 + 8,R6
   \   00003A   8F..         MOV     ?V0 + 9,R7
   \   00003C   75..00       MOV     ?V0 + 10,#0x0
   \   00003F   78..         MOV     R0,#?V0 + 8
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000044   8A..         MOV     ?V0 + 8,R2
   \   000046   AC..         MOV     R4,?V0 + 8
   \   000048   7D00         MOV     R5,#0x0
   \   00004A   7403         MOV     A,#0x3
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   AA82         MOV     R2,DPL
   \   000051   AB83         MOV     R3,DPH
   \   000053   12....       LCALL   ??osal_memcpy?relay
   \   000056   7403         MOV     A,#0x3
   \   000058   12....       LCALL   ?DEALLOC_XSTACK8
    549              //buf[tmpLen++] = ' ';
    550            }
    551          
    552            err = (uint32)(value1);
    553            _ltoa( err, &buf[tmpLen], format1 );
   \                     ??HalLcdWriteStringValueValue_0:
   \   00005B                ; Setup parameters for call to function _ltoa
   \   00005B   85....       MOV     ?V0 + 8,?V0 + 6
   \   00005E   85..82       MOV     DPL,?XSP + 0
   \   000061   85..83       MOV     DPH,?XSP + 1
   \   000064   E582         MOV     A,DPL
   \   000066   25..         ADD     A,?V0 + 8
   \   000068   F5..         MOV     ?V0 + 8,A
   \   00006A   E583         MOV     A,DPH
   \   00006C   3400         ADDC    A,#0x0
   \   00006E   F5..         MOV     ?V0 + 9,A
   \   000070   78..         MOV     R0,#?V0 + 8
   \   000072   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000075   A9..         MOV     R1,?V0 + 5
   \   000077   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   00007A   12....       LCALL   ?DEALLOC_XSTACK8
    554            tmpLen = (uint8)osal_strlen( (char*)buf );
   \   00007D                ; Setup parameters for call to function osal_strlen
   \   00007D   85..82       MOV     DPL,?XSP + 0
   \   000080   85..83       MOV     DPH,?XSP + 1
   \   000083   AA82         MOV     R2,DPL
   \   000085   AB83         MOV     R3,DPH
   \   000087   12....       LCALL   ??osal_strlen?relay
   \   00008A   EA           MOV     A,R2
   \   00008B   F5..         MOV     ?V0 + 6,A
    555          
    556            buf[tmpLen++] = ',';
   \   00008D   F5..         MOV     ?V0 + 2,A
   \   00008F   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000092   742C         MOV     A,#0x2c
   \   000094   F0           MOVX    @DPTR,A
   \   000095   05..         INC     ?V0 + 6
    557            buf[tmpLen++] = ' ';
   \   000097   85....       MOV     ?V0 + 2,?V0 + 6
   \   00009A   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00009D   7420         MOV     A,#0x20
   \   00009F   F0           MOVX    @DPTR,A
    558            err = (uint32)(value2);
    559            _ltoa( err, &buf[tmpLen], format2 );
   \   0000A0                ; Setup parameters for call to function _ltoa
   \   0000A0   7401         MOV     A,#0x1
   \   0000A2   25..         ADD     A,?V0 + 6
   \   0000A4   F8           MOV     R0,A
   \   0000A5   85..82       MOV     DPL,?XSP + 0
   \   0000A8   85..83       MOV     DPH,?XSP + 1
   \   0000AB   E582         MOV     A,DPL
   \   0000AD   28           ADD     A,R0
   \   0000AE   F5..         MOV     ?V0 + 2,A
   \   0000B0   E583         MOV     A,DPH
   \   0000B2   3400         ADDC    A,#0x0
   \   0000B4   F5..         MOV     ?V0 + 3,A
   \   0000B6   78..         MOV     R0,#?V0 + 2
   \   0000B8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BB   A9..         MOV     R1,?V0 + 4
   \   0000BD   AA..         MOV     R2,?V0 + 0
   \   0000BF   AB..         MOV     R3,?V0 + 1
   \   0000C1   12....       LCALL   ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   0000C4   12....       LCALL   ?DEALLOC_XSTACK8
    560          
    561            HalLcdWriteString( (char *)buf, line );		
   \   0000C7                ; Setup parameters for call to function HalLcdWriteString
   \   0000C7   A9..         MOV     R1,?V0 + 7
   \   0000C9   85..82       MOV     DPL,?XSP + 0
   \   0000CC   85..83       MOV     DPH,?XSP + 1
   \   0000CF   AA82         MOV     R2,DPL
   \   0000D1   AB83         MOV     R3,DPH
   \   0000D3   12....       LCALL   ??HalLcdWriteString?relay
    562          
    563          #endif
    564          }
   \   0000D6   7419         MOV     A,#0x19
   \   0000D8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000DB   7F0B         MOV     R7,#0xb
   \   0000DD   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E582         MOV     A,DPL
   \   000008   25..         ADD     A,?V0 + 2
   \   00000A   F582         MOV     DPL,A
   \   00000C   E583         MOV     A,DPH
   \   00000E   3400         ADDC    A,#0x0
   \   000010   F583         MOV     DPH,A
   \   000012   22           RET
    565          
    566          #if (HAL_LCD == TRUE)

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    567          void DelayMS(unsigned int msec)
   \                     DelayMS:
    568          { 
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   8019         SJMP    ??DelayMS_0
    569            unsigned int i;
    570            while(msec >0)
    571            {
    572              for (i=0; i<8000; i++) asm("NOP"); //1ms
   \                     ??DelayMS_1:
   \   000002   7840         MOV     R0,#0x40
   \   000004   791F         MOV     R1,#0x1f
   \                     ??DelayMS_2:
   \   000006   00           NOP
   \   000007   E8           MOV     A,R0
   \   000008   24FF         ADD     A,#-0x1
   \   00000A   18           DEC     R0
   \   00000B   E9           MOV     A,R1
   \   00000C   34FF         ADDC    A,#-0x1
   \   00000E   F9           MOV     R1,A
   \   00000F   E8           MOV     A,R0
   \   000010   49           ORL     A,R1
   \   000011   70F3         JNZ     ??DelayMS_2
    573              msec--;
   \   000013   EA           MOV     A,R2
   \   000014   24FF         ADD     A,#-0x1
   \   000016   1A           DEC     R2
   \   000017   EB           MOV     A,R3
   \   000018   34FF         ADDC    A,#-0x1
   \   00001A   FB           MOV     R3,A
    574            }  
   \                     ??DelayMS_0:
   \   00001B   EA           MOV     A,R2
   \   00001C   4B           ORL     A,R3
   \   00001D   70E3         JNZ     ??DelayMS_1
    575          }
   \   00001F   02....       LJMP    ?BRET
    576          
    577          //option 1=µÚ1ĞĞ  2=µÚ2ĞĞ ÆäËüÀàÍÆ

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    578          void HalLcdWriteString (char *s, uint8 option)
   \                     HalLcdWriteString:
    579          {  
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0 + 0,R1
    580            Color = BLUE;
   \   00000B   90....       MOV     DPTR,#Color
   \   00000E   741F         MOV     A,#0x1f
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   E4           CLR     A
   \   000013   F0           MOVX    @DPTR,A
    581            Color_BK = WHITE; 
   \   000014   90....       MOV     DPTR,#Color_BK
   \   000017   74FF         MOV     A,#-0x1
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   A3           INC     DPTR
   \   00001B   F0           MOVX    @DPTR,A
    582            DrawRectFill(7,option*15+20,118,15,WHITE); 
   \   00001C                ; Setup parameters for call to function DrawRectFill
   \   00001C   F5..         MOV     ?V0 + 2,A
   \   00001E   F5..         MOV     ?V0 + 3,A
   \   000020   78..         MOV     R0,#?V0 + 2
   \   000022   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000025   75..0F       MOV     ?V0 + 2,#0xf
   \   000028   75..00       MOV     ?V0 + 3,#0x0
   \   00002B   78..         MOV     R0,#?V0 + 2
   \   00002D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000030   75..76       MOV     ?V0 + 2,#0x76
   \   000033   78..         MOV     R0,#?V0 + 2
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000038   E9           MOV     A,R1
   \   000039   75F00F       MOV     B,#0xf
   \   00003C   A4           MUL     AB
   \   00003D   2414         ADD     A,#0x14
   \   00003F   FC           MOV     R4,A
   \   000040   E5F0         MOV     A,B
   \   000042   3400         ADDC    A,#0x0
   \   000044   FD           MOV     R5,A
   \   000045   7A07         MOV     R2,#0x7
   \   000047   7B00         MOV     R3,#0x0
   \   000049   12....       LCALL   ??DrawRectFill?relay
   \   00004C   7406         MOV     A,#0x6
   \   00004E   12....       LCALL   ?DEALLOC_XSTACK8
    583            LCD_write_EN_string(7,option*15+20,(unsigned char *)s);
   \   000051                ; Setup parameters for call to function LCD_write_EN_string
   \   000051   EE           MOV     A,R6
   \   000052   FC           MOV     R4,A
   \   000053   EF           MOV     A,R7
   \   000054   FD           MOV     R5,A
   \   000055   75F00F       MOV     B,#0xf
   \   000058   E5..         MOV     A,?V0 + 0
   \   00005A   A4           MUL     AB
   \   00005B   2414         ADD     A,#0x14
   \   00005D   FA           MOV     R2,A
   \   00005E   7907         MOV     R1,#0x7
   \   000060   02....       LJMP    ?Subroutine3 & 0xFFFF
    584          }
    585          
    586          //ÏòSPI×ÜÏß´«ÊäÒ»¸ö8Î»Êı¾İ

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    587          void SendByte(unsigned char Data)
   \                     SendByte:
    588          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    589            unsigned char i=0;
    590            
    591            for(i=8;i>0;i--)
   \   000000   7808         MOV     R0,#0x8
    592            {
    593              if(Data&0x80)	
   \                     ??SendByte_0:
   \   000002   E9           MOV     A,R1
   \   000003   A2E7         MOV     C,0xE0 /* A   */.7
   \   000005   5004         JNC     ??SendByte_1
    594                LCD_SDA_SET;//Êä³öÊı¾İ
   \   000007   D293         SETB    0x90.3
   \   000009   8002         SJMP    ??SendByte_2
    595              else 
    596                LCD_SDA_CLR;
   \                     ??SendByte_1:
   \   00000B   C293         CLR     0x90.3
    597              
    598              LCD_SCL_CLR;       
   \                     ??SendByte_2:
   \   00000D   C292         CLR     0x90.2
    599              LCD_SCL_SET;
   \   00000F   D292         SETB    0x90.2
    600              Data<<=1; 
   \   000011   C3           CLR     C
   \   000012   33           RLC     A
   \   000013   F9           MOV     R1,A
    601            }
   \   000014   18           DEC     R0
   \   000015   E8           MOV     A,R0
   \   000016   70EA         JNZ     ??SendByte_0
    602          }
   \   000018   02....       LJMP    ?BRET
   \   00001B                REQUIRE _A_P1
    603          
    604          //ÏòSPI×ÜÏß´«ÊäÒ»¸ö8Î»Êı¾İ

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    605          void  SPI_WriteData(unsigned char Data)
   \                     SPI_WriteData:
    606          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    607            unsigned char i=0;
    608            
    609            for(i=8;i>0;i--)
   \   000000   7808         MOV     R0,#0x8
    610            {
    611              if(Data&0x80)	
   \                     ??SPI_WriteData_0:
   \   000002   E9           MOV     A,R1
   \   000003   A2E7         MOV     C,0xE0 /* A   */.7
   \   000005   5004         JNC     ??SPI_WriteData_1
    612                LCD_SDA_SET;//Êä³öÊı¾İ
   \   000007   D293         SETB    0x90.3
   \   000009   8002         SJMP    ??SPI_WriteData_2
    613              else 
    614                LCD_SDA_CLR;
   \                     ??SPI_WriteData_1:
   \   00000B   C293         CLR     0x90.3
    615              
    616              LCD_SCL_CLR;       
   \                     ??SPI_WriteData_2:
   \   00000D   C292         CLR     0x90.2
    617              LCD_SCL_SET;
   \   00000F   D292         SETB    0x90.2
    618              Data<<=1; 
   \   000011   C3           CLR     C
   \   000012   33           RLC     A
   \   000013   F9           MOV     R1,A
    619            }
   \   000014   18           DEC     R0
   \   000015   E8           MOV     A,R0
   \   000016   70EA         JNZ     ??SPI_WriteData_0
    620          }
   \   000018   02....       LJMP    ?BRET
   \   00001B                REQUIRE _A_P1
    621          
    622          //ÏòÒº¾§ÆÁĞ´Ò»¸ö8Î»Ö¸Áî

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ??SPI_WriteData?relay
   \   000003                REQUIRE ??Subroutine44_0
   \   000003                ; // Fall through to label ??Subroutine44_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    623          void LCD_WrCmd(unsigned char Index)
   \                     LCD_WrCmd:
    624          { 
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    625            //LCD_CS_CLR;  //ALD del  SPIĞ´ÃüÁîÊ±Ğò¿ªÊ¼
    626            LCD_DC_CLR;
   \   000005   C280         CLR     0x80.0
    627            SPI_WriteData(Index);
   \   000007                ; Setup parameters for call to function SPI_WriteData
   \   000007   02....       LJMP    ?Subroutine2 & 0xFFFF
   \   00000A                REQUIRE _A_P0
    628            //LCD_CS_SET;  //ALD del
    629          }
    630          
    631          //ÏòÒº¾§ÆÁĞ´Ò»¸ö8Î»Êı¾İ

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    632          void LCD_WrDat(unsigned char Data)
   \                     LCD_WrDat:
    633          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    634            //LCD_CS_CLR;  //ALD del
    635            LCD_DC_SET;
   \   000005   D280         SETB    0x80.0
    636            SPI_WriteData(Data);
   \   000007                ; Setup parameters for call to function SPI_WriteData
   \   000007   02....       LJMP    ?Subroutine2 & 0xFFFF
   \   00000A                REQUIRE _A_P0
    637            //LCD_CS_SET;  //ALD del 
    638          }
    639          
    640          //ÏòÒº¾§ÆÁĞ´Ò»¸ö16Î»Êı¾İ

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    641          void LCD_WriteData_16Bit(unsigned short Data)
   \                     LCD_WriteData_16Bit:
    642          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
    643            //LCD_CS_CLR;  //ALD del
    644            LCD_DC_SET;
   \   000008   D280         SETB    0x80.0
    645            SPI_WriteData(Data>>8); //Ğ´Èë¸ß8Î»Êı¾İ
   \   00000A                ; Setup parameters for call to function SPI_WriteData
   \   00000A   F9           MOV     R1,A
   \   00000B   12....       LCALL   ??SPI_WriteData?relay
    646            SPI_WriteData(Data); 	  //Ğ´ÈëµÍ8Î»Êı¾İ
   \   00000E                ; Setup parameters for call to function SPI_WriteData
   \   00000E   EE           MOV     A,R6
   \   00000F   F9           MOV     R1,A
   \   000010   02....       LJMP    ?Subroutine2 & 0xFFFF
   \   000013                REQUIRE _A_P0
    647            //LCD_CS_SET;  //ALD del 
    648          }
    649          
    650          /****************************************************************************
    651          * Ãû    ³Æ: LCD_write_byte()
    652          * ¹¦    ÄÜ: Êı¾İµ½LCD 
    653          * Èë¿Ú²ÎÊı: data    ¡ªĞ´ÈëµÄÊı¾İ
    654          *           command ¡ªĞ´Êı¾İ/ÃüÁîÑ¡Ôñ  
    655          * ³ö¿Ú²ÎÊı: ÎŞ 
    656          ****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    657          static void LCD_write_byte(unsigned char data, unsigned char command)
   \                     LCD_write_byte:
    658          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
    659            ////LCD_CS_CLR ;// Ê¹ÄÜLCD
    660            if (command == 0)
   \   000006   7005         JNZ     ??LCD_write_byte_0
    661              LCD_WrCmd(data); // ´«ËÍÃüÁî
   \   000008                ; Setup parameters for call to function LCD_WrCmd
   \   000008   12....       LCALL   ??LCD_WrCmd?relay
   \   00000B   8003         SJMP    ??LCD_write_byte_1
    662            else
    663              LCD_WrDat(data) ; // ´«ËÍÊı¾İ
   \                     ??LCD_write_byte_0:
   \   00000D                ; Setup parameters for call to function LCD_WrDat
   \   00000D   12....       LCALL   ??LCD_WrDat?relay
    664            //SendByte(data);
    665            //LCD_CS_SET; // ¹Ø±ÕLCD
    666            //LCD_DC_SET;	
    667          }
   \                     ??LCD_write_byte_1:
   \   000010   02....       LJMP    ??Subroutine44_0 & 0xFFFF
    668          
    669          // ¸´Î»lcd

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    670          void Lcd_Reset(void)
   \                     Lcd_Reset:
    671          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    672            LCD_RST_CLR;
   \   000004   C297         CLR     0x90.7
    673            DelayMS(110);
   \   000006                ; Setup parameters for call to function DelayMS
   \   000006   7A6E         MOV     R2,#0x6e
   \   000008   7B00         MOV     R3,#0x0
   \   00000A   12....       LCALL   ??DelayMS?relay
    674            LCD_RST_SET;
   \   00000D   D297         SETB    0x90.7
    675            DelayMS(50);
   \   00000F                ; Setup parameters for call to function DelayMS
   \   00000F   7A32         MOV     R2,#0x32
   \   000011   7B00         MOV     R3,#0x0
   \   000013   12....       LCALL   ??DelayMS?relay
    676          }
   \   000016   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   000019                REQUIRE _A_P1
    677          
    678          /****************************************************************************
    679          * Ãû    ³Æ: LCD_set_window()
    680          * ¹¦    ÄÜ: ÉèÖÃÏÔÊ¾´°¿Ú
    681          * Èë¿Ú²ÎÊı: X - ÏÔÊ¾´°¿Ú×óÉÏ½Çºá×ø±ê      Y ¡ªÏÔÊ¾´°¿Ú×óÉÏ½Ç×İ×ø±ê
    682          *           Width ¡ªÏÔÊ¾´°¿Ú¿í¶È          Height ¡ªÏÔÊ¾´°¿Ú¸ß¶È
    683          * ³ö¿Ú²ÎÊı: ÎŞ
    684          ****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    685          static void LCD_set_window(unsigned int X    , unsigned int Y, 
   \                     LCD_set_window:
    686                                     unsigned int Width, unsigned int Height)
    687          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   \   00000D   740E         MOV     A,#0xe
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000015   7410         MOV     A,#0x10
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   12....       LCALL   ?Subroutine11 & 0xFFFF
    688            LCD_write_byte(0x2A,LCD_COMMAND);         //ÁĞµØÖ·ÉèÖÃÃüÁî
   \                     ??CrossCallReturnLabel_13:
   \   00001D                ; Setup parameters for call to function LCD_write_byte
   \   00001D   7A00         MOV     R2,#0x0
   \   00001F   792A         MOV     R1,#0x2a
   \   000021   12....       LCALL   ??Subroutine50_0 & 0xFFFF
    689            LCD_write_byte(X>>8,LCD_DATA) ;           //ÉèÖÃÏÔÊ¾´°¿Ú×óÉÏ½Çºá×ø±ê¸ßÎ»
   \                     ??CrossCallReturnLabel_86:
   \   000024   A9..         MOV     R1,?V0 + 1
   \   000026   12....       LCALL   ??Subroutine50_0 & 0xFFFF
    690            LCD_write_byte((X+2)&0xFF,LCD_DATA);      //ÉèÖÃÏÔÊ¾´°¿Ú×óÉÏ½Çºá×ø±êµÍÎ» 	
   \                     ??CrossCallReturnLabel_87:
   \   000029   E5..         MOV     A,?V0 + 0
   \   00002B   2402         ADD     A,#0x2
   \   00002D   F9           MOV     R1,A
   \   00002E   12....       LCALL   ??Subroutine50_0 & 0xFFFF
    691            LCD_write_byte((X+Width+1)>>8,LCD_DATA);  //ÉèÖÃ¿í¶È¸ßÎ» 	
   \                     ??CrossCallReturnLabel_88:
   \   000031   E5..         MOV     A,?V0 + 0
   \   000033   25..         ADD     A,?V0 + 4
   \   000035   F8           MOV     R0,A
   \   000036   E5..         MOV     A,?V0 + 1
   \   000038   35..         ADDC    A,?V0 + 5
   \   00003A   F9           MOV     R1,A
   \   00003B   E8           MOV     A,R0
   \   00003C   2401         ADD     A,#0x1
   \   00003E   12....       LCALL   ?Subroutine16 & 0xFFFF
    692            LCD_write_byte((X+Width+1)&0xFF,LCD_DATA);// ÉèÖÃ¿í¶ÈµÍÎ» 	
   \                     ??CrossCallReturnLabel_22:
   \   000041   E5..         MOV     A,?V0 + 0
   \   000043   25..         ADD     A,?V0 + 4
   \   000045   04           INC     A
   \   000046   F9           MOV     R1,A
   \   000047   12....       LCALL   ??Subroutine51_0 & 0xFFFF
    693            
    694            LCD_write_byte(0x2B,LCD_COMMAND);         //ĞĞµØÖ·ÉèÖÃÃüÁî
   \                     ??CrossCallReturnLabel_134:
   \   00004A   792B         MOV     R1,#0x2b
   \   00004C   12....       LCALL   ??Subroutine50_0 & 0xFFFF
    695            LCD_write_byte(Y>>8,LCD_DATA) ;           //ÉèÖÃÏÔÊ¾´°¿Ú×óÉÏ½Ç×İ×ø±ê¸ßÎ»
   \                     ??CrossCallReturnLabel_89:
   \   00004F   EF           MOV     A,R7
   \   000050   12....       LCALL   ?Subroutine25 & 0xFFFF
    696            LCD_write_byte((Y+3)&0xFF,LCD_DATA);      //ÉèÖÃÏÔÊ¾´°¿Ú×óÉÏ½Ç×İ×ø±êµÍÎ» 
   \                     ??CrossCallReturnLabel_41:
   \   000053   2403         ADD     A,#0x3
   \   000055   12....       LCALL   ?Subroutine25 & 0xFFFF
    697            LCD_write_byte((Y+Height+2)>>8,LCD_DATA); // ÉèÖÃÏÔÊ¾´°¿Ú¸ß¶È¸ßÎ» 	
   \                     ??CrossCallReturnLabel_42:
   \   000058   25..         ADD     A,?V0 + 2
   \   00005A   F8           MOV     R0,A
   \   00005B   EF           MOV     A,R7
   \   00005C   35..         ADDC    A,?V0 + 3
   \   00005E   F9           MOV     R1,A
   \   00005F   E8           MOV     A,R0
   \   000060   2402         ADD     A,#0x2
   \   000062   12....       LCALL   ?Subroutine16 & 0xFFFF
    698            LCD_write_byte((Y+Height+2)&0xFF,LCD_DATA);// ÉèÖÃÏÔÊ¾´°¿Ú¸ß¶ÈµÍÎ» 	  
   \                     ??CrossCallReturnLabel_23:
   \   000065   EE           MOV     A,R6
   \   000066   25..         ADD     A,?V0 + 2
   \   000068   2402         ADD     A,#0x2
   \   00006A   F9           MOV     R1,A
   \   00006B   12....       LCALL   ??Subroutine51_0 & 0xFFFF
    699            LCD_write_byte(0x2C,LCD_COMMAND) ;
   \                     ??CrossCallReturnLabel_135:
   \   00006E   792C         MOV     R1,#0x2c
   \   000070   12....       LCALL   ??LCD_write_byte?relay
    700          }
   \   000073   02....       LJMP    ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   E9           MOV     A,R1
   \   000001   3400         ADDC    A,#0x0
   \   000003   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   F9           MOV     R1,A
   \   000001                REQUIRE ??Subroutine47_0
   \   000001                ; // Fall through to label ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000003   EE           MOV     A,R6
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 4,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 5,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL   ??LCD_write_byte?relay
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function DelayMS
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003   7A01         MOV     R2,#0x1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   12....       LCALL   ??LCD_write_byte?relay
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003   7A00         MOV     R2,#0x0
   \   000005   22           RET
    701          
    702          /****************************************************************************
    703          * Ãû    ³Æ: DrawPixel()
    704          * ¹¦    ÄÜ: ÔÚÖ¸¶¨Î»ÖÃÒÔÖ¸¶¨ÑÕÉ«ÏÔÊ¾ÏñËØ
    705          ****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    706          void DrawPixel(unsigned int x, unsigned int y, unsigned int color)
   \                     DrawPixel:
    707          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   7409         MOV     A,#0x9
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FE           MOV     R6,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
    708            //LCD_set_XY(x,y);  //Éè¶¨ÏÔÊ¾Î»ÖÃ andy
    709            LCD_write_byte(color>>8,LCD_DATA);  //·¢ËÍÏÔÊ¾ÑÕÉ«Êı¾İ¸ßÎ»×Ö½Ú
   \   00000E                ; Setup parameters for call to function LCD_write_byte
   \   00000E   7A01         MOV     R2,#0x1
   \   000010   12....       LCALL   ?Subroutine25 & 0xFFFF
    710            LCD_write_byte(color&0xFF,LCD_DATA);//·¢ËÍÏÔÊ¾ÑÕÉ«Êı¾İµÍÎ»×Ö½Ú
   \                     ??CrossCallReturnLabel_43:
   \   000013   F9           MOV     R1,A
   \   000014   12....       LCALL   ??LCD_write_byte?relay
    711          }
   \   000017   02....       LJMP    ??Subroutine44_0 & 0xFFFF
    712          
    713          /****************************************************************************
    714          * Ãû    ³Æ: DrawVerticalLine()
    715          * ¹¦    ÄÜ: ÔÚÖ¸¶¨Î»ÖÃÒÔÖ¸¶¨ÑÕÉ«»­´¹Ö±Ïß
    716          * Èë¿Ú²ÎÊı: X - ´¹Ö±ÏßÆğÊ¼Î»ÖÃºá×ø±ê      Y ¡ª´¹Ö±ÏßÆğÊ¼Î»ÖÃ×İ×ø±ê
    717          *           Length ¡ª´¹Ö±Ïß³¤¶È           Color ¡ª´¹Ö±ÏßÑÕÉ«
    718          * ³ö¿Ú²ÎÊı: ÎŞ
    719          ****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    720          void DrawVerticalLine(unsigned int x, unsigned int y, 
   \                     DrawVerticalLine:
    721                                unsigned int Length,unsigned int Color)               
    722          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   740E         MOV     A,#0xe
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   12....       LCALL   ?Subroutine13 & 0xFFFF
    723            register int  index = 0;
    724            register char ch,cl;
    725            
    726            ch = (unsigned char)(Color>>8);
    727            cl = (unsigned char)(Color);
    728            LCD_set_window(x,y,1,Length);
   \                     ??CrossCallReturnLabel_18:
   \   000013                ; Setup parameters for call to function LCD_set_window
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   75..01       MOV     ?V0 + 4,#0x1
   \   00001B   75..00       MOV     ?V0 + 5,#0x0
   \   00001E   78..         MOV     R0,#?V0 + 4
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000026   12....       LCALL   ?DEALLOC_XSTACK8
    729            for(index=0;index<Length;index++)
   \   000029   7E00         MOV     R6,#0x0
   \   00002B   7F00         MOV     R7,#0x0
   \   00002D   8003         SJMP    ??CrossCallReturnLabel_35
    730            {
    731            LCD_write_byte(ch,LCD_DATA) ;
   \                     ??DrawVerticalLine_0:
   \   00002F                ; Setup parameters for call to function LCD_write_byte
   \   00002F   12....       LCALL   ?Subroutine22 & 0xFFFF
    732            LCD_write_byte(cl,LCD_DATA) ;
    733            }
   \                     ??CrossCallReturnLabel_35:
   \   000032   C3           CLR     C
   \   000033   EE           MOV     A,R6
   \   000034   95..         SUBB    A,?V0 + 0
   \   000036   EF           MOV     A,R7
   \   000037   95..         SUBB    A,?V0 + 1
   \   000039   40F4         JC      ??DrawVerticalLine_0
    734          }
   \   00003B   80..         SJMP    ?Subroutine4

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   7A01         MOV     R2,#0x1
   \   000002   A9..         MOV     R1,?V0 + 2
   \   000004   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000007   A9..         MOV     R1,?V0 + 3
   \   000009   12....       LCALL   ??LCD_write_byte?relay
   \   00000C   EE           MOV     A,R6
   \   00000D   2401         ADD     A,#0x1
   \   00000F   0E           INC     R6
   \   000010   EF           MOV     A,R7
   \   000011   3400         ADDC    A,#0x0
   \   000013   FF           MOV     R7,A
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 1,A
   \   000007   7410         MOV     A,#0x10
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F5..         MOV     ?V0 + 2,A
   \   000006   EE           MOV     A,R6
   \   000007   F5..         MOV     ?V0 + 3,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   12....       LCALL   ??LCD_set_window?relay
   \   000003   7404         MOV     A,#0x4
   \   000005   22           RET
    735          
    736          /****************************************************************************
    737          * Ãû    ³Æ: DrawHorizonLine()
    738          * ¹¦    ÄÜ: ÔÚÖ¸¶¨Î»ÖÃÒÔÖ¸¶¨ÑÕÉ«»­Ë®Æ½Ïß
    739          * Èë¿Ú²ÎÊı: X - Ë®Æ½ÏßÆğÊ¼Î»ÖÃºá×ø±ê      Y ¡ªË®Æ½ÏßÆğÊ¼Î»ÖÃ×İ×ø±ê
    740          *           Length ¡ªË®Æ½Ïß³¤¶È           Color ¡ªË®Æ½ÏßÑÕÉ«
    741          * ³ö¿Ú²ÎÊı: ÎŞ
    742          ****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    743          void DrawHorizonLine(unsigned int x, unsigned int y, 
   \                     DrawHorizonLine:
    744                               unsigned int Length,unsigned int Color)               
    745          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   740E         MOV     A,#0xe
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   12....       LCALL   ?Subroutine13 & 0xFFFF
    746            register int  index = 0;
    747            register char ch,cl;
    748            
    749            ch = (unsigned char)(Color>>8);
    750            cl = (unsigned char)(Color);
    751            LCD_set_window(x,y,Length,1);
   \                     ??CrossCallReturnLabel_19:
   \   000013                ; Setup parameters for call to function LCD_set_window
   \   000013   75..01       MOV     ?V0 + 4,#0x1
   \   000016   75..00       MOV     ?V0 + 5,#0x0
   \   000019   78..         MOV     R0,#?V0 + 4
   \   00001B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000026   12....       LCALL   ?DEALLOC_XSTACK8
    752            for(index=0;index<Length;index++)
   \   000029   7E00         MOV     R6,#0x0
   \   00002B   7F00         MOV     R7,#0x0
   \   00002D   8003         SJMP    ??CrossCallReturnLabel_36
    753            {
    754              LCD_write_byte(ch,LCD_DATA);
   \                     ??DrawHorizonLine_0:
   \   00002F                ; Setup parameters for call to function LCD_write_byte
   \   00002F   12....       LCALL   ?Subroutine22 & 0xFFFF
    755              LCD_write_byte(cl,LCD_DATA);
    756            }
   \                     ??CrossCallReturnLabel_36:
   \   000032   C3           CLR     C
   \   000033   EE           MOV     A,R6
   \   000034   95..         SUBB    A,?V0 + 0
   \   000036   EF           MOV     A,R7
   \   000037   95..         SUBB    A,?V0 + 1
   \   000039   40F4         JC      ??DrawHorizonLine_0
    757          }
   \   00003B                REQUIRE ?Subroutine4
   \   00003B                ; // Fall through to label ?Subroutine4
    758          
    759          /****************************************************************************
    760          * Ãû    ³Æ: DrawRect()
    761          * ¹¦    ÄÜ: ÔÚÖ¸¶¨Î»ÖÃÒÔÖ¸¶¨ÑÕÉ«»­¾ØĞÎ
    762          * Èë¿Ú²ÎÊı: X - ¾ØĞÎÆğÊ¼Î»ÖÃºá×ø±ê      Y ¡ª¾ØĞÎÆğÊ¼Î»ÖÃ×İ×ø±ê
    763          *           Width  ¡ª¾ØĞÎ¿í¶È           Height ¡ª¾ØĞÎ¸ß¶È                   
    764          *           Color  ¡ª¾ØĞÎÑÕÉ«             
    765          * ³ö¿Ú²ÎÊı: ÎŞ
    766          ****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    767          void DrawRect(unsigned int Xpos, unsigned int Ypos, unsigned int Width, 
   \                     DrawRect:
    768                        unsigned int Height,unsigned Color)
    769          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   \   00000D   7410         MOV     A,#0x10
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V0 + 6,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V0 + 7,A
   \   000019   7412         MOV     A,#0x12
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000021   7414         MOV     A,#0x14
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   12....       LCALL   ?Subroutine11 & 0xFFFF
    770            DrawHorizonLine(Xpos, Ypos, Width, Color) ;
   \                     ??CrossCallReturnLabel_14:
   \   000029                ; Setup parameters for call to function DrawHorizonLine
   \   000029   78..         MOV     R0,#?V0 + 2
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   78..         MOV     R0,#?V0 + 6
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   12....       LCALL   ??DrawHorizonLine?relay
   \   000036   7404         MOV     A,#0x4
   \   000038   12....       LCALL   ?DEALLOC_XSTACK8
    771            DrawHorizonLine(Xpos, (Ypos + Height), Width, Color) ;
   \   00003B                ; Setup parameters for call to function DrawHorizonLine
   \   00003B   78..         MOV     R0,#?V0 + 2
   \   00003D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000040   78..         MOV     R0,#?V0 + 6
   \   000042   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000045   E5..         MOV     A,?V0 + 0
   \   000047   25..         ADD     A,?V0 + 4
   \   000049   FC           MOV     R4,A
   \   00004A   E5..         MOV     A,?V0 + 1
   \   00004C   35..         ADDC    A,?V0 + 5
   \   00004E   FD           MOV     R5,A
   \   00004F   EE           MOV     A,R6
   \   000050   FA           MOV     R2,A
   \   000051   EF           MOV     A,R7
   \   000052   FB           MOV     R3,A
   \   000053   12....       LCALL   ??DrawHorizonLine?relay
   \   000056   7404         MOV     A,#0x4
   \   000058   12....       LCALL   ?DEALLOC_XSTACK8
    772            DrawVerticalLine(Xpos, Ypos, Height, Color) ;
   \   00005B                ; Setup parameters for call to function DrawVerticalLine
   \   00005B   78..         MOV     R0,#?V0 + 2
   \   00005D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000060   78..         MOV     R0,#?V0 + 4
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000065   AC..         MOV     R4,?V0 + 0
   \   000067   AD..         MOV     R5,?V0 + 1
   \   000069   EE           MOV     A,R6
   \   00006A   FA           MOV     R2,A
   \   00006B   EF           MOV     A,R7
   \   00006C   FB           MOV     R3,A
   \   00006D   12....       LCALL   ??DrawVerticalLine?relay
   \   000070   7404         MOV     A,#0x4
   \   000072   12....       LCALL   ?DEALLOC_XSTACK8
    773            DrawVerticalLine((Xpos+Width-1) ,Ypos, Height, Color);
   \   000075                ; Setup parameters for call to function DrawVerticalLine
   \   000075   78..         MOV     R0,#?V0 + 2
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007A   78..         MOV     R0,#?V0 + 4
   \   00007C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007F   AC..         MOV     R4,?V0 + 0
   \   000081   AD..         MOV     R5,?V0 + 1
   \   000083   EE           MOV     A,R6
   \   000084   25..         ADD     A,?V0 + 6
   \   000086   F8           MOV     R0,A
   \   000087   EF           MOV     A,R7
   \   000088   35..         ADDC    A,?V0 + 7
   \   00008A   F9           MOV     R1,A
   \   00008B   E8           MOV     A,R0
   \   00008C   24FF         ADD     A,#-0x1
   \   00008E   FA           MOV     R2,A
   \   00008F   E9           MOV     A,R1
   \   000090   34FF         ADDC    A,#-0x1
   \   000092   FB           MOV     R3,A
   \   000093   12....       LCALL   ??DrawVerticalLine?relay
   \   000096   7404         MOV     A,#0x4
   \   000098   02....       LJMP    ?Subroutine1 & 0xFFFF
    774          }
    775          
    776          /****************************************************************************
    777          * Ãû    ³Æ: DrawRectFill()
    778          * ¹¦    ÄÜ: ÔÚÖ¸¶¨Î»ÖÃÒÔÖ¸¶¨ÑÕÉ«»­¾ØĞÎ
    779          * Èë¿Ú²ÎÊı: X - ¾ØĞÎÆğÊ¼Î»ÖÃºá×ø±ê      Y ¡ª¾ØĞÎÆğÊ¼Î»ÖÃ×İ×ø±ê
    780          *           Width  ¡ª¾ØĞÎ¿í¶È           Height ¡ª¾ØĞÎ¸ß¶È                   
    781          *           Color  ¡ª¾ØĞÎÌî³äÑÕÉ«             
    782          * ³ö¿Ú²ÎÊı: ÎŞ
    783          ****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    784          void DrawRectFill(unsigned int Xpos  , unsigned int Ypos, unsigned int Width, 
   \                     DrawRectFill:
    785                            unsigned int Height, unsigned Color                        )
    786          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   7410         MOV     A,#0x10
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00000D   7412         MOV     A,#0x12
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000015   7414         MOV     A,#0x14
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V0 + 6,A
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V0 + 7,A
    787            register unsigned int i;
    788            register unsigned int index = Width*Height/16+1;
   \   000021   85....       MOV     ?V0 + 0,?V0 + 4
   \   000024   85....       MOV     ?V0 + 1,?V0 + 5
   \   000027   E5..         MOV     A,?V0 + 0
   \   000029   85..F0       MOV     B,?V0 + 2
   \   00002C   A4           MUL     AB
   \   00002D   C5..         XCH     A,?V0 + 0
   \   00002F   A8F0         MOV     R0,B
   \   000031   85..F0       MOV     B,?V0 + 3
   \   000034   A4           MUL     AB
   \   000035   28           ADD     A,R0
   \   000036   F8           MOV     R0,A
   \   000037   85..F0       MOV     B,?V0 + 2
   \   00003A   E5..         MOV     A,?V0 + 1
   \   00003C   A4           MUL     AB
   \   00003D   28           ADD     A,R0
   \   00003E   F5..         MOV     ?V0 + 1,A
   \   000040   7404         MOV     A,#0x4
   \   000042   78..         MOV     R0,#?V0 + 0
   \   000044   12....       LCALL   ?US_SHR
   \   000047   E5..         MOV     A,?V0 + 0
   \   000049   2401         ADD     A,#0x1
   \   00004B   F5..         MOV     ?V0 + 0,A
   \   00004D   E5..         MOV     A,?V0 + 1
   \   00004F   3400         ADDC    A,#0x0
   \   000051   F5..         MOV     ?V0 + 1,A
    789            register char ch,cl;
    790            
    791            ch = (unsigned char)(Color>>8);
   \   000053   AE..         MOV     R6,?V0 + 7
    792            cl = (unsigned char)(Color);
   \   000055   AF..         MOV     R7,?V0 + 6
    793            LCD_set_window(Xpos,Ypos,Width,Height);
   \   000057                ; Setup parameters for call to function LCD_set_window
   \   000057   78..         MOV     R0,#?V0 + 2
   \   000059   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005C   78..         MOV     R0,#?V0 + 4
   \   00005E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000061   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000064   12....       LCALL   ?DEALLOC_XSTACK8
    794            LCD_write_byte(0x2C,LCD_COMMAND);
   \   000067                ; Setup parameters for call to function LCD_write_byte
   \   000067   7A00         MOV     R2,#0x0
   \   000069   792C         MOV     R1,#0x2c
   \   00006B   12....       LCALL   ??LCD_write_byte?relay
    795            //LCD_CS_CLR ; andy
    796            LCD_DC_SET ;
   \   00006E   D280         SETB    0x80.0
    797            for(i=0;i<index;i++)
   \   000070   75..00       MOV     ?V0 + 2,#0x0
   \   000073   75..00       MOV     ?V0 + 3,#0x0
   \   000076   8012         SJMP    ??DrawRectFill_0
    798            {
    799                SendByte(ch);
   \                     ??DrawRectFill_1:
   \   000078                ; Setup parameters for call to function SendByte
   \   000078   12....       LCALL   ?Subroutine29 & 0xFFFF
    800                SendByte(cl);
    801                SendByte(ch);
    802                SendByte(cl); 
    803                SendByte(ch);
    804                SendByte(cl);      
    805                SendByte(ch);
    806                SendByte(cl);
    807                SendByte(ch);
    808                SendByte(cl);
    809                SendByte(ch);
    810                SendByte(cl);
    811                SendByte(ch);
    812                SendByte(cl);
    813                SendByte(ch);
    814                SendByte(cl);
    815                SendByte(ch);
   \                     ??CrossCallReturnLabel_46:
   \   00007B                ; Setup parameters for call to function SendByte
   \   00007B   12....       LCALL   ?Subroutine29 & 0xFFFF
    816                SendByte(cl);
    817                SendByte(ch);
    818                SendByte(cl);
    819                SendByte(ch);
    820                SendByte(cl);
    821                SendByte(ch);
    822                SendByte(cl);
    823                SendByte(ch);
    824                SendByte(cl);
    825                SendByte(ch);
    826                SendByte(cl);
    827                SendByte(ch);
    828                SendByte(cl);
    829                SendByte(ch);
    830                SendByte(cl);
    831            }    
   \                     ??CrossCallReturnLabel_47:
   \   00007E   E5..         MOV     A,?V0 + 2
   \   000080   2401         ADD     A,#0x1
   \   000082   F5..         MOV     ?V0 + 2,A
   \   000084   E5..         MOV     A,?V0 + 3
   \   000086   3400         ADDC    A,#0x0
   \   000088   F5..         MOV     ?V0 + 3,A
   \                     ??DrawRectFill_0:
   \   00008A   C3           CLR     C
   \   00008B   E5..         MOV     A,?V0 + 2
   \   00008D   95..         SUBB    A,?V0 + 0
   \   00008F   E5..         MOV     A,?V0 + 3
   \   000091   95..         SUBB    A,?V0 + 1
   \   000093   40E3         JC      ??DrawRectFill_1
    832          }
   \   000095   02....       LJMP    ??Subroutine43_0 & 0xFFFF
   \   000098                REQUIRE _A_P0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   EE           MOV     A,R6
   \   000001   F9           MOV     R1,A
   \   000002   12....       LCALL   ??SendByte?relay
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005   EF           MOV     A,R7
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   ??SendByte?relay
   \   00000A   22           RET
    833          
    834          /****************************************************************************
    835          * Ãû    ³Æ: LCD_clear()
    836          * ¹¦    ÄÜ: ÒÔÖ¸¶¨ÑÕÉ«ÇåÆÁ
    837          * Èë¿Ú²ÎÊı: color ¡ªÇåÆÁÑÕÉ«
    838          * ³ö¿Ú²ÎÊı: ÎŞ
    839          ****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    840          void LCD_clear(unsigned int color)
   \                     LCD_clear:
    841          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
    842            register unsigned int  i=0,j=0;
    843            register unsigned char ch;
    844            register unsigned char cl;
    845            
    846            LCD_set_window(0,0,X_MAX_PIXEL,Y_MAX_PIXEL);
   \   000009                ; Setup parameters for call to function LCD_set_window
   \   000009   75..80       MOV     ?V0 + 2,#-0x80
   \   00000C   75..00       MOV     ?V0 + 3,#0x0
   \   00000F   78..         MOV     R0,#?V0 + 2
   \   000011   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000014   78..         MOV     R0,#?V0 + 2
   \   000016   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000019   7C00         MOV     R4,#0x0
   \   00001B   7D00         MOV     R5,#0x0
   \   00001D   7A00         MOV     R2,#0x0
   \   00001F   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000022   12....       LCALL   ?DEALLOC_XSTACK8
    847            ch = color>>8;
   \   000025   AF..         MOV     R7,?V0 + 1
    848            cl = color&0xFF;
   \   000027   AE..         MOV     R6,?V0 + 0
    849            LCD_write_byte(0x2C,LCD_COMMAND);
   \   000029                ; Setup parameters for call to function LCD_write_byte
   \   000029   7A00         MOV     R2,#0x0
   \   00002B   792C         MOV     R1,#0x2c
   \   00002D   12....       LCALL   ??LCD_write_byte?relay
    850            //LCD_CS_CLR;
    851            LCD_DC_SET;
   \   000030   D280         SETB    0x80.0
    852            for (i=0;i<Y_MAX_PIXEL;i++)
   \   000032   75..80       MOV     ?V0 + 1,#-0x80
    853              for (j=0;j<2;j++)
   \                     ??LCD_clear_0:
   \   000035   75..02       MOV     ?V0 + 0,#0x2
    854              {
    855                SendByte(ch);
   \                     ??LCD_clear_1:
   \   000038                ; Setup parameters for call to function SendByte
   \   000038   12....       LCALL   ?Subroutine28 & 0xFFFF
    856                SendByte(cl);
    857                SendByte(ch);
    858                SendByte(cl);
    859                SendByte(ch);
    860                SendByte(cl);
    861                SendByte(ch);
    862                SendByte(cl);
    863                SendByte(ch);
    864                SendByte(cl);
    865                SendByte(ch);
    866                SendByte(cl);
    867                SendByte(ch);
    868                SendByte(cl);
    869                SendByte(ch);
    870                SendByte(cl);
    871                SendByte(ch);
    872                SendByte(cl);
    873                SendByte(ch);
    874                SendByte(cl);
    875                SendByte(ch);
    876                SendByte(cl);
    877                SendByte(ch);
    878                SendByte(cl);
    879                SendByte(ch);
    880                SendByte(cl);
    881                SendByte(ch);
    882                SendByte(cl);
    883                SendByte(ch);
    884                SendByte(cl);
    885                SendByte(ch);
    886                SendByte(cl);
    887                SendByte(ch);
    888                SendByte(cl);
    889                SendByte(ch);
    890                SendByte(cl);
    891                SendByte(ch);
    892                SendByte(cl);
    893                SendByte(ch);
    894                SendByte(cl);
    895                SendByte(ch);
    896                SendByte(cl);
    897                SendByte(ch);
    898                SendByte(cl);
    899                SendByte(ch);
    900                SendByte(cl);
    901                SendByte(ch);
    902                SendByte(cl);
    903                SendByte(ch);
    904                SendByte(cl);
    905                SendByte(ch);
    906                SendByte(cl);
    907                SendByte(ch);
    908                SendByte(cl);
    909                SendByte(ch);
    910                SendByte(cl);
    911                SendByte(ch);
    912                SendByte(cl);
    913                SendByte(ch);
    914                SendByte(cl);
    915                SendByte(ch);
    916                SendByte(cl);
    917                SendByte(ch);
    918                SendByte(cl);      
    919                SendByte(ch);
   \                     ??CrossCallReturnLabel_44:
   \   00003B                ; Setup parameters for call to function SendByte
   \   00003B   12....       LCALL   ?Subroutine28 & 0xFFFF
    920                SendByte(cl);
    921                SendByte(ch);
    922                SendByte(cl);
    923                SendByte(ch);
    924                SendByte(cl);
    925                SendByte(ch);
    926                SendByte(cl);
    927                SendByte(ch);
    928                SendByte(cl);
    929                SendByte(ch);
    930                SendByte(cl);
    931                SendByte(ch);
    932                SendByte(cl);
    933                SendByte(ch);
    934                SendByte(cl);
    935                SendByte(ch);
    936                SendByte(cl);
    937                SendByte(ch);
    938                SendByte(cl);
    939                SendByte(ch);
    940                SendByte(cl);
    941                SendByte(ch);
    942                SendByte(cl);
    943                SendByte(ch);
    944                SendByte(cl);
    945                SendByte(ch);
    946                SendByte(cl);
    947                SendByte(ch);
    948                SendByte(cl);
    949                SendByte(ch);
    950                SendByte(cl);
    951                SendByte(ch);
    952                SendByte(cl);
    953                SendByte(ch);
    954                SendByte(cl);
    955                SendByte(ch);
    956                SendByte(cl);
    957                SendByte(ch);
    958                SendByte(cl);
    959                SendByte(ch);
    960                SendByte(cl);
    961                SendByte(ch);
    962                SendByte(cl);
    963                SendByte(ch);
    964                SendByte(cl);
    965                SendByte(ch);
    966                SendByte(cl);
    967                SendByte(ch);
    968                SendByte(cl);
    969                SendByte(ch);
    970                SendByte(cl);
    971                SendByte(ch);
    972                SendByte(cl);
    973                SendByte(ch);
    974                SendByte(cl);
    975                SendByte(ch);
    976                SendByte(cl);
    977                SendByte(ch);
    978                SendByte(cl);
    979                SendByte(ch);
    980                SendByte(cl);
    981                SendByte(ch);
    982                SendByte(cl);
    983              }
   \                     ??CrossCallReturnLabel_45:
   \   00003E   15..         DEC     ?V0 + 0
   \   000040   E5..         MOV     A,?V0 + 0
   \   000042   70F4         JNZ     ??LCD_clear_1
   \   000044   15..         DEC     ?V0 + 1
   \   000046   E5..         MOV     A,?V0 + 1
   \   000048   70EB         JNZ     ??LCD_clear_0
    984            LCD_DC_SET;
   \   00004A                REQUIRE ?Subroutine5
   \   00004A                REQUIRE _A_P0
   \   00004A                ; // Fall through to label ?Subroutine5
    985            //LCD_CS_SET;
    986          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   D280         SETB    0x80.0
   \   000002   80..         SJMP    ??Subroutine48_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   EF           MOV     A,R7
   \   000001   F9           MOV     R1,A
   \   000002   12....       LCALL   ??SendByte?relay
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008   EE           MOV     A,R6
   \   000009   F9           MOV     R1,A
   \   00000A   12....       LCALL   ??SendByte?relay
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   7B00         MOV     R3,#0x0
   \   000002                REQUIRE ??Subroutine49_0
   \   000002                ; // Fall through to label ??Subroutine49_0
    987          
    988          /****************************************************************************
    989          * Ãû    ³Æ: LCD_write_EN()
    990          * ¹¦    ÄÜ: ÔÚÖ¸¶¨Î»ÖÃÏÔÊ¾ 7 ¡Á14 µãÕóASCII×Ö·û 
    991          * Èë¿Ú²ÎÊı: X - ÏÔÊ¾Î»ÖÃ×óÉÏ½Çºá×ø±ê      Y ¡ªÏÔÊ¾Î»ÖÃ×óÉÏ½Ç×İ×ø±ê
    992          *           c ¡ªÏÔÊ¾×Ö·û                  
    993          * ³ö¿Ú²ÎÊı: ÎŞ
    994          ****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    995          static void LCD_write_EN(unsigned int X, unsigned int Y, unsigned char c)
   \                     LCD_write_EN:
    996          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    997            unsigned char i,j,temp;
    998            
    999            LCD_set_window(X,Y,7,14);
   \   000007                ; Setup parameters for call to function LCD_set_window
   \   000007   75..0E       MOV     ?V0 + 0,#0xe
   \   00000A   75..00       MOV     ?V0 + 1,#0x0
   \   00000D   78..         MOV     R0,#?V0 + 0
   \   00000F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000012   75..07       MOV     ?V0 + 0,#0x7
   \   000015   78..         MOV     R0,#?V0 + 0
   \   000017   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001A   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   00001D   12....       LCALL   ?DEALLOC_XSTACK8
   1000            //LCD_CS_CLR ;
   1001            LCD_DC_SET ;
   \   000020   D280         SETB    0x80.0
   1002            for(i=0;i<14;i++)
   \   000022   7F00         MOV     R7,#0x0
   1003            {
   1004              temp = ASCII7x14[c-32][i];
   \                     ??LCD_write_EN_0:
   \   000024   EE           MOV     A,R6
   \   000025   75F00E       MOV     B,#0xe
   \   000028   A4           MUL     AB
   \   000029   FA           MOV     R2,A
   \   00002A   ABF0         MOV     R3,B
   \   00002C   8F..         MOV     ?V0 + 0,R7
   \   00002E   74..         MOV     A,#(ASCII7x14 + 64) & 0xff
   \   000030   25..         ADD     A,?V0 + 0
   \   000032   F8           MOV     R0,A
   \   000033   74..         MOV     A,#((ASCII7x14 - 448) >> 8) & 0xff
   \   000035   3400         ADDC    A,#0x0
   \   000037   F9           MOV     R1,A
   \   000038   E8           MOV     A,R0
   \   000039   2A           ADD     A,R2
   \   00003A   F582         MOV     DPL,A
   \   00003C   E9           MOV     A,R1
   \   00003D   3B           ADDC    A,R3
   \   00003E   F583         MOV     DPH,A
   \   000040   E4           CLR     A
   \   000041   93           MOVC    A,@A+DPTR
   \   000042   F5..         MOV     ?V0 + 1,A
   1005              for(j=0;j<7;j++)
   \   000044   75..07       MOV     ?V0 + 0,#0x7
   1006              {
   1007                if(temp&0x80)
   \                     ??LCD_write_EN_1:
   \   000047   E5..         MOV     A,?V0 + 1
   \   000049   A2E7         MOV     C,0xE0 /* A   */.7
   \   00004B   5005         JNC     ??LCD_write_EN_2
   1008                {
   1009                  SendByte(Color>>8);  
   \   00004D                ; Setup parameters for call to function SendByte
   \   00004D   12....       LCALL   ?Subroutine6 & 0xFFFF
   1010                  SendByte(Color) ;
   1011                }
   \                     ??CrossCallReturnLabel_0:
   \   000050   8003         SJMP    ??CrossCallReturnLabel_3
   1012                else
   1013                {
   1014                  SendByte(Color_BK>>8) ;  
   \                     ??LCD_write_EN_2:
   \   000052                ; Setup parameters for call to function SendByte
   \   000052   12....       LCALL   ?Subroutine7 & 0xFFFF
   1015                  SendByte(Color_BK);
   1016                }            
   \                     ??CrossCallReturnLabel_3:
   \   000055   12....       LCALL   ?Subroutine30 & 0xFFFF
   1017                temp <<= 1 ;
   \                     ??CrossCallReturnLabel_48:
   \   000058   E5..         MOV     A,?V0 + 1
   \   00005A   C3           CLR     C
   \   00005B   33           RLC     A
   \   00005C   F5..         MOV     ?V0 + 1,A
   1018              }
   \   00005E   15..         DEC     ?V0 + 0
   \   000060   E5..         MOV     A,?V0 + 0
   \   000062   70E3         JNZ     ??LCD_write_EN_1
   1019            }
   \   000064   0F           INC     R7
   \   000065   EF           MOV     A,R7
   \   000066   C3           CLR     C
   \   000067   940E         SUBB    A,#0xe
   \   000069   40B9         JC      ??LCD_write_EN_0
   1020            //LCD_CS_SET ; andy
   1021            LCD_DC_SET ;
   \   00006B   D280         SETB    0x80.0
   1022          }
   \   00006D   7F02         MOV     R7,#0x2
   \   00006F   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000072                REQUIRE _A_P0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   90....       MOV     DPTR,#Color_BK + 1
   \   000003   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000006                ; Setup parameters for call to function SendByte
   \   000006                ; Setup parameters for call to function SendByte
   \   000006                ; Setup parameters for call to function SendByte
   \   000006   90....       MOV     DPTR,#Color_BK
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F9           MOV     R1,A
   \   000002   12....       LCALL   ??SendByte?relay
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   90....       MOV     DPTR,#Color + 1
   \   000003   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000006                ; Setup parameters for call to function SendByte
   \   000006                ; Setup parameters for call to function SendByte
   \   000006                ; Setup parameters for call to function SendByte
   \   000006   90....       MOV     DPTR,#Color
   \   000009   22           RET
   1023          
   1024          /****************************************************************************
   1025          * Ãû    ³Æ: LCD_write_EN_string()
   1026          * ¹¦    ÄÜ: ÔÚÖ¸¶¨Î»ÖÃÏÔÊ¾ 7 ¡Á14 µãÕóASCII×Ö·û´® 
   1027          * Èë¿Ú²ÎÊı: X - ÏÔÊ¾Î»ÖÃ×óÉÏ½Çºá×ø±ê      Y ¡ªÏÔÊ¾Î»ÖÃ×óÉÏ½Ç×İ×ø±ê
   1028          *           s ¡ª×Ö·û´®Ö¸Õë                  
   1029          * ³ö¿Ú²ÎÊı: ÎŞ
   1030          ****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1031          void LCD_write_EN_string(unsigned char X,unsigned char Y,uint8 *s)
   \                     LCD_write_EN_string:
   1032          {
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 3,R1
   \   000007   8A..         MOV     ?V0 + 4,R2
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   1033            unsigned char i=0;
   \   00000D   75..00       MOV     ?V0 + 2,#0x0
   1034            
   1035            while (*s)
   \                     ??LCD_write_EN_string_0:
   \   000010   8E82         MOV     DPL,R6
   \   000012   8F83         MOV     DPH,R7
   \   000014   E0           MOVX    A,@DPTR
   \   000015   6030         JZ      ??LCD_write_EN_string_1
   1036            {
   1037              LCD_write_EN(X+i*7,Y,*s);
   \   000017                ; Setup parameters for call to function LCD_write_EN
   \   000017   F9           MOV     R1,A
   \   000018   85....       MOV     ?V0 + 0,?V0 + 4
   \   00001B   AC..         MOV     R4,?V0 + 0
   \   00001D   7D00         MOV     R5,#0x0
   \   00001F   85....       MOV     ?V0 + 0,?V0 + 3
   \   000022   E5..         MOV     A,?V0 + 2
   \   000024   75F007       MOV     B,#0x7
   \   000027   A4           MUL     AB
   \   000028   FA           MOV     R2,A
   \   000029   ABF0         MOV     R3,B
   \   00002B   E5..         MOV     A,?V0 + 0
   \   00002D   2A           ADD     A,R2
   \   00002E   FA           MOV     R2,A
   \   00002F   E4           CLR     A
   \   000030   3B           ADDC    A,R3
   \   000031   FB           MOV     R3,A
   \   000032   12....       LCALL   ??LCD_write_EN?relay
   1038              s++;
   \   000035   8E82         MOV     DPL,R6
   \   000037   8F83         MOV     DPH,R7
   \   000039   A3           INC     DPTR
   \   00003A   AE82         MOV     R6,DPL
   \   00003C   AF83         MOV     R7,DPH
   1039              i++;
   \   00003E   05..         INC     ?V0 + 2
   1040              if(i>=HAL_LCD_MAX_CHARS)return;
   \   000040   E5..         MOV     A,?V0 + 2
   \   000042   C3           CLR     C
   \   000043   9410         SUBB    A,#0x10
   \   000045   40C9         JC      ??LCD_write_EN_string_0
   \                     ??LCD_write_EN_string_1:
   \   000047   7F05         MOV     R7,#0x5
   \   000049   02....       LJMP    ?BANKED_LEAVE_XDATA
   1041            }
   1042            return;
   1043          }
   1044          
   1045          /****************************************************************************
   1046          * Ãû    ³Æ: LCD_write_CN()
   1047          * ¹¦    ÄÜ: ÔÚÖ¸¶¨Î»ÖÃÏÔÊ¾ 14 ¡Á14 µãÕóºº×Ö×Ö·û  
   1048          * Èë¿Ú²ÎÊı: X - ÏÔÊ¾Î»ÖÃ×óÉÏ½Çºá×ø±ê      Y ¡ªÏÔÊ¾Î»ÖÃ×óÉÏ½Ç×İ×ø±ê
   1049          *           c ¡ªÏÔÊ¾×Ö·ûÖ¸Õë                  
   1050          * ³ö¿Ú²ÎÊı: ÎŞ
   1051          ****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1052          static void LCD_write_CN(unsigned int X, unsigned int Y, unsigned char c)
   \                     LCD_write_CN:
   1053          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1054            unsigned char i,j,temp;
   1055            
   1056            LCD_set_window(X,Y,14,14);  //°´×Ö·ûµãÕó´óĞ¡ÉèÖÃÏÔÊ¾´°¿Ú
   \   000007                ; Setup parameters for call to function LCD_set_window
   \   000007   75..0E       MOV     ?V0 + 0,#0xe
   \   00000A   75..00       MOV     ?V0 + 1,#0x0
   \   00000D   78..         MOV     R0,#?V0 + 0
   \   00000F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000012   78..         MOV     R0,#?V0 + 0
   \   000014   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000017   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   00001A   12....       LCALL   ?DEALLOC_XSTACK8
   1057            //LCD_CS_CLR;               //Òº¾§SPIÊ¹ÄÜandy
   1058            LCD_DC_SET;                 //·¢ËÍÊı¾İĞÅºÅÊ¹ÄÜ
   \   00001D   D280         SETB    0x80.0
   1059            for(i=0;i<28;i++)           // 14x14×Ö·ûµãÕóÊı¾İ´óĞ¡Îª2x14=28×Ö½Ú
   \   00001F   75..00       MOV     ?V0 + 0,#0x0
   1060            {
   1061              temp = CN14x14[c][i] ;    //¶Á×ÖÄ£Êı×é
   \                     ??LCD_write_CN_0:
   \   000022   12....       LCALL   ?Subroutine9 & 0xFFFF
   1062              for(j=0;j<8;j++)          // °´Î»ÏÔÊ¾
   \                     ??CrossCallReturnLabel_8:
   \   000025   75..08       MOV     ?V0 + 1,#0x8
   1063              {
   1064                if(temp&0x80)           //Èç¹ûÎ»ÖµÎª1£¬ÏÔÊ¾×Ö·ûÉ«
   \                     ??LCD_write_CN_1:
   \   000028   EF           MOV     A,R7
   \   000029   A2E7         MOV     C,0xE0 /* A   */.7
   \   00002B   5005         JNC     ??LCD_write_CN_2
   1065                {
   1066                  SendByte(Color>>8);  
   \   00002D                ; Setup parameters for call to function SendByte
   \   00002D   12....       LCALL   ?Subroutine6 & 0xFFFF
   1067                  SendByte(Color) ;
   1068                }
   \                     ??CrossCallReturnLabel_1:
   \   000030   8003         SJMP    ??CrossCallReturnLabel_4
   1069                else                    //Èç¹ûÎ»ÖµÎª0£¬ÏÔÊ¾±³¾°É«
   1070                {
   1071                  SendByte(Color_BK>>8) ;  
   \                     ??LCD_write_CN_2:
   \   000032                ; Setup parameters for call to function SendByte
   \   000032   12....       LCALL   ?Subroutine7 & 0xFFFF
   1072                  SendByte(Color_BK);
   1073                }            
   1074                temp <<= 1 ;
   1075              }
   \                     ??CrossCallReturnLabel_4:
   \   000035   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000038   70EE         JNZ     ??LCD_write_CN_1
   1076              i++ ;                     //Ö¸ÏòÏÂÒ»×Ö½Ú
   \   00003A   05..         INC     ?V0 + 0
   1077              temp = CN14x14[c][i];
   \   00003C   12....       LCALL   ?Subroutine9 & 0xFFFF
   1078              for(j=0;j<6;j++)          // °´Î»ÏÔÊ¾£¬µãÕóºáÏòÎª14ÏñËØ£¬
   \                     ??CrossCallReturnLabel_9:
   \   00003F   75..06       MOV     ?V0 + 1,#0x6
   1079              {                         // ËùÒÔÃ¿ĞĞµÚ2×Ö½Ú×îºó2Î»Å×Æú
   1080                if(temp&0x80)           // Èç¹ûÎ»ÖµÎª1£¬ÏÔÊ¾×Ö·ûÉ«
   \                     ??LCD_write_CN_3:
   \   000042   EF           MOV     A,R7
   \   000043   A2E7         MOV     C,0xE0 /* A   */.7
   \   000045   5005         JNC     ??LCD_write_CN_4
   1081                {
   1082                  SendByte(Color>>8);  
   \   000047                ; Setup parameters for call to function SendByte
   \   000047   12....       LCALL   ?Subroutine6 & 0xFFFF
   1083                  SendByte(Color) ;
   1084                }
   \                     ??CrossCallReturnLabel_2:
   \   00004A   8003         SJMP    ??CrossCallReturnLabel_5
   1085                else                    // Èç¹ûÎ»ÖµÎª0£¬ÏÔÊ¾±³¾°É«
   1086                {
   1087                  SendByte(Color_BK>>8) ;  
   \                     ??LCD_write_CN_4:
   \   00004C                ; Setup parameters for call to function SendByte
   \   00004C   12....       LCALL   ?Subroutine7 & 0xFFFF
   1088                  SendByte(Color_BK);
   1089                }            
   1090                temp <<= 1 ;
   1091              }
   1092            }
   \                     ??CrossCallReturnLabel_5:
   \   00004F   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000052   70EE         JNZ     ??LCD_write_CN_3
   \   000054   05..         INC     ?V0 + 0
   \   000056   E5..         MOV     A,?V0 + 0
   \   000058   C3           CLR     C
   \   000059   941C         SUBB    A,#0x1c
   \   00005B   40C5         JC      ??LCD_write_CN_0
   1093            //LCD_CS_SET;               //Òº¾§SPI½ûÖ¹
   1094            LCD_DC_SET;                 //Êı¾İ¿ØÖÆĞÅºÅ½ûÖ¹
   \   00005D   02....       LJMP    ?Subroutine5 & 0xFFFF
   \   000060                REQUIRE _A_P0
   1095          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   85....       MOV     ?V0 + 2,?V0 + 0
   \   000003   EE           MOV     A,R6
   \   000004   75F01C       MOV     B,#0x1c
   \   000007   A4           MUL     AB
   \   000008   F8           MOV     R0,A
   \   000009   A9F0         MOV     R1,B
   \   00000B   74..         MOV     A,#CN14x14 & 0xff
   \   00000D   28           ADD     A,R0
   \   00000E   F8           MOV     R0,A
   \   00000F   74..         MOV     A,#(CN14x14 >> 8) & 0xff
   \   000011   39           ADDC    A,R1
   \   000012   F9           MOV     R1,A
   \   000013   E8           MOV     A,R0
   \   000014   25..         ADD     A,?V0 + 2
   \   000016   F582         MOV     DPL,A
   \   000018   E9           MOV     A,R1
   \   000019   3400         ADDC    A,#0x0
   \   00001B   F583         MOV     DPH,A
   \   00001D   E4           CLR     A
   \   00001E   93           MOVC    A,@A+DPTR
   \   00001F   FF           MOV     R7,A
   \   000020   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000003   EF           MOV     A,R7
   \   000004   C3           CLR     C
   \   000005   33           RLC     A
   \   000006   FF           MOV     R7,A
   \   000007   15..         DEC     ?V0 + 1
   \   000009   E5..         MOV     A,?V0 + 1
   \   00000B   22           RET
   1096          
   1097          /****************************************************************************
   1098          * Ãû    ³Æ: LCD_write_CN_string()
   1099          * ¹¦    ÄÜ: ÔÚÖ¸¶¨Î»ÖÃÏÔÊ¾ 14 ¡Á14 µãÕóÖĞÎÄ×Ö·û´®   
   1100          * Èë¿Ú²ÎÊı: X - ÏÔÊ¾Î»ÖÃ×óÉÏ½Çºá×ø±ê      Y ¡ªÏÔÊ¾Î»ÖÃ×óÉÏ½Ç×İ×ø±ê
   1101          *           s ¡ª×Ö·û´®Ö¸Õë                  
   1102          * ³ö¿Ú²ÎÊı: ÎŞ
   1103          ****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1104          void LCD_write_CN_string(unsigned char X,unsigned char Y,uint8 *s)
   \                     LCD_write_CN_string:
   1105          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   8A..         MOV     ?V0 + 1,R2
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   1106            unsigned char i=0;
   \   00000D   75..00       MOV     ?V0 + 0,#0x0
   1107            static unsigned char j=0;
   1108            
   1109            while (*s)
   \                     ??LCD_write_CN_string_0:
   \   000010   8E82         MOV     DPL,R6
   \   000012   8F83         MOV     DPH,R7
   \   000014   E0           MOVX    A,@DPTR
   \   000015   7003         JNZ     $+5
   \   000017   02....       LJMP    ??LCD_write_CN_string_1 & 0xFFFF
   1110            {
   1111              for(j=0;j<ALL_CNS;j++)                  //ËÑË÷µãÕó×ÖÄ£
   \   00001A   90....       MOV     DPTR,#??j
   \   00001D   E4           CLR     A
   \   00001E   F0           MOVX    @DPTR,A
   1112              { 
   1113                if(  *s    ==CN14x14_Index[j*2]            
   1114                   &&*(s+1)==CN14x14_Index[j*2+1])    //ºº×ÖÄÚÂë´æÔÚÓÚ×ÖÄ£Ë÷ÒıÊı×éÖĞ
   \                     ??LCD_write_CN_string_2:
   \   00001F   8E82         MOV     DPL,R6
   \   000021   8F83         MOV     DPH,R7
   \   000023   E0           MOVX    A,@DPTR
   \   000024   FA           MOV     R2,A
   \   000025   90....       MOV     DPTR,#??j
   \   000028   E0           MOVX    A,@DPTR
   \   000029   C3           CLR     C
   \   00002A   33           RLC     A
   \   00002B   F8           MOV     R0,A
   \   00002C   E4           CLR     A
   \   00002D   33           RLC     A
   \   00002E   F9           MOV     R1,A
   \   00002F   74..         MOV     A,#CN14x14_Index & 0xff
   \   000031   28           ADD     A,R0
   \   000032   F582         MOV     DPL,A
   \   000034   74..         MOV     A,#(CN14x14_Index >> 8) & 0xff
   \   000036   39           ADDC    A,R1
   \   000037   F583         MOV     DPH,A
   \   000039   E4           CLR     A
   \   00003A   93           MOVC    A,@A+DPTR
   \   00003B   6A           XRL     A,R2
   \   00003C   703A         JNZ     ??LCD_write_CN_string_3
   \   00003E   8E82         MOV     DPL,R6
   \   000040   8F83         MOV     DPH,R7
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   FA           MOV     R2,A
   \   000045   74..         MOV     A,#(CN14x14_Index + 1) & 0xff
   \   000047   28           ADD     A,R0
   \   000048   F582         MOV     DPL,A
   \   00004A   74..         MOV     A,#((CN14x14_Index + 1) >> 8) & 0xff
   \   00004C   39           ADDC    A,R1
   \   00004D   F583         MOV     DPH,A
   \   00004F   E4           CLR     A
   \   000050   93           MOVC    A,@A+DPTR
   \   000051   6A           XRL     A,R2
   \   000052   7024         JNZ     ??LCD_write_CN_string_3
   1115                {
   1116                  LCD_write_CN(X+i*14,Y,j) ;          //ÏÔÊ¾ºº×Ö
   \   000054                ; Setup parameters for call to function LCD_write_CN
   \   000054   90....       MOV     DPTR,#??j
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F9           MOV     R1,A
   \   000059   85....       MOV     ?V0 + 4,?V0 + 1
   \   00005C   AC..         MOV     R4,?V0 + 4
   \   00005E   7D00         MOV     R5,#0x0
   \   000060   85....       MOV     ?V0 + 4,?V0 + 2
   \   000063   E5..         MOV     A,?V0 + 0
   \   000065   75F00E       MOV     B,#0xe
   \   000068   A4           MUL     AB
   \   000069   FA           MOV     R2,A
   \   00006A   ABF0         MOV     R3,B
   \   00006C   E5..         MOV     A,?V0 + 4
   \   00006E   2A           ADD     A,R2
   \   00006F   FA           MOV     R2,A
   \   000070   E4           CLR     A
   \   000071   3B           ADDC    A,R3
   \   000072   FB           MOV     R3,A
   \   000073   12....       LCALL   ??LCD_write_CN?relay
   1117                  break; 
   \   000076   800B         SJMP    ??LCD_write_CN_string_4
   1118                }
   1119              }
   \                     ??LCD_write_CN_string_3:
   \   000078   90....       MOV     DPTR,#??j
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   04           INC     A
   \   00007D   F0           MOVX    @DPTR,A
   \   00007E   C3           CLR     C
   \   00007F   9480         SUBB    A,#-0x80
   \   000081   409C         JC      ??LCD_write_CN_string_2
   1120              if(j>=ALL_CNS)                          //ÎŞ´Ë×ÖµÄµãÕó×ÖÄ£
   \                     ??LCD_write_CN_string_4:
   \   000083   90....       MOV     DPTR,#??j
   \   000086   E0           MOVX    A,@DPTR
   \   000087   C3           CLR     C
   \   000088   9480         SUBB    A,#-0x80
   \   00008A   4038         JC      ??LCD_write_CN_string_5
   1121              {
   1122                DrawRectFill(X+i*14,Y,14,14,Color_BK);//ÏÔÊ¾¿Õ¸ñ
   \   00008C                ; Setup parameters for call to function DrawRectFill
   \   00008C   90....       MOV     DPTR,#Color_BK
   \   00008F   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000092   75..0E       MOV     ?V0 + 4,#0xe
   \   000095   75..00       MOV     ?V0 + 5,#0x0
   \   000098   78..         MOV     R0,#?V0 + 4
   \   00009A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009D   78..         MOV     R0,#?V0 + 4
   \   00009F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A2   85....       MOV     ?V0 + 4,?V0 + 1
   \   0000A5   AC..         MOV     R4,?V0 + 4
   \   0000A7   7D00         MOV     R5,#0x0
   \   0000A9   85....       MOV     ?V0 + 4,?V0 + 2
   \   0000AC   E5..         MOV     A,?V0 + 0
   \   0000AE   75F00E       MOV     B,#0xe
   \   0000B1   A4           MUL     AB
   \   0000B2   F8           MOV     R0,A
   \   0000B3   A9F0         MOV     R1,B
   \   0000B5   E5..         MOV     A,?V0 + 4
   \   0000B7   28           ADD     A,R0
   \   0000B8   FA           MOV     R2,A
   \   0000B9   E4           CLR     A
   \   0000BA   39           ADDC    A,R1
   \   0000BB   FB           MOV     R3,A
   \   0000BC   12....       LCALL   ??DrawRectFill?relay
   \   0000BF   7406         MOV     A,#0x6
   \   0000C1   12....       LCALL   ?DEALLOC_XSTACK8
   1123              }
   1124              s++; s++ ;                              //×Ö·ûÖ¸ÕëÒÆÎ»
   \                     ??LCD_write_CN_string_5:
   \   0000C4   EE           MOV     A,R6
   \   0000C5   2402         ADD     A,#0x2
   \   0000C7   0E           INC     R6
   \   0000C8   0E           INC     R6
   \   0000C9   EF           MOV     A,R7
   \   0000CA   3400         ADDC    A,#0x0
   \   0000CC   FF           MOV     R7,A
   1125              i++;
   \   0000CD   05..         INC     ?V0 + 0
   1126              if(i>=HAL_LCD_MAX_CHARS/2)  
   \   0000CF   E5..         MOV     A,?V0 + 0
   \   0000D1   C3           CLR     C
   \   0000D2   9408         SUBB    A,#0x8
   \   0000D4   5003         JNC     $+5
   \   0000D6   02....       LJMP    ??LCD_write_CN_string_0 & 0xFFFF
   1127                return;                               //³¬¹ı×î´óÏÔÊ¾×Ö·ûÊı£¬·µ»Ø
   1128            }
   \                     ??LCD_write_CN_string_1:
   \   0000D9   02....       LJMP    ?Subroutine4 & 0xFFFF
   1129            return ;
   1130          }

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??j:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
   1131          
   1132          /****************************************************************************
   1133          * Ãû    ³Æ: ShowImage()
   1134          * ¹¦    ÄÜ: ÏÔÊ¾Í¼Æ¬   
   1135          * Èë¿Ú²ÎÊı: p - Í¼Æ¬µãÕóÊı¾İ  È¡Ä£·½Ê½ Ë®Æ½É¨Ãè ´Ó×óµ½ÓÒ µÍÎ»ÔÚÇ°           
   1136          * ³ö¿Ú²ÎÊı: ÎŞ
   1137          ****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1138          void ShowImage(const unsigned char *p) 
   \                     ShowImage:
   1139          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   1140            int i; 
   1141            unsigned char picH,picL;
   1142            
   1143            LCD_set_window(24,5,80,40); //×ø±êÉèÖÃ
   \   000009                ; Setup parameters for call to function LCD_set_window
   \   000009   75..28       MOV     ?V0 + 2,#0x28
   \   00000C   75..00       MOV     ?V0 + 3,#0x0
   \   00000F   78..         MOV     R0,#?V0 + 2
   \   000011   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000014   75..50       MOV     ?V0 + 2,#0x50
   \   000017   78..         MOV     R0,#?V0 + 2
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001C   7C05         MOV     R4,#0x5
   \   00001E   7D00         MOV     R5,#0x0
   \   000020   7A18         MOV     R2,#0x18
   \   000022   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000025   12....       LCALL   ?DEALLOC_XSTACK8
   1144            for(i=0;i<80*40;i++)
   \   000028   7E00         MOV     R6,#0x0
   \   00002A   7F00         MOV     R7,#0x0
   1145            {	
   1146              picL=*(p+i*2);	//Êı¾İµÍÎ»ÔÚÇ°
   1147              picH=*(p+i*2+1);				
   1148              LCD_WriteData_16Bit(picH<<8|picL);  						
   \                     ??ShowImage_0:
   \   00002C   EE           MOV     A,R6
   \   00002D   F8           MOV     R0,A
   \   00002E   EF           MOV     A,R7
   \   00002F   F9           MOV     R1,A
   \   000030   E8           MOV     A,R0
   \   000031   C3           CLR     C
   \   000032   33           RLC     A
   \   000033   F8           MOV     R0,A
   \   000034   E9           MOV     A,R1
   \   000035   33           RLC     A
   \   000036   F9           MOV     R1,A
   \   000037   E5..         MOV     A,?V0 + 0
   \   000039   28           ADD     A,R0
   \   00003A   F8           MOV     R0,A
   \   00003B   E5..         MOV     A,?V0 + 1
   \   00003D   39           ADDC    A,R1
   \   00003E   F9           MOV     R1,A
   \   00003F                ; Setup parameters for call to function LCD_WriteData_16Bit
   \   00003F   8882         MOV     DPL,R0
   \   000041   8983         MOV     DPH,R1
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   FB           MOV     R3,A
   \   000046   8882         MOV     DPL,R0
   \   000048   8983         MOV     DPH,R1
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   FA           MOV     R2,A
   \   00004C   12....       LCALL   ??LCD_WriteData_16Bit?relay
   1149            }	
   \   00004F   EE           MOV     A,R6
   \   000050   2401         ADD     A,#0x1
   \   000052   0E           INC     R6
   \   000053   EF           MOV     A,R7
   \   000054   3400         ADDC    A,#0x0
   \   000056   FF           MOV     R7,A
   \   000057   C3           CLR     C
   \   000058   EE           MOV     A,R6
   \   000059   9480         SUBB    A,#-0x80
   \   00005B   EF           MOV     A,R7
   \   00005C   940C         SUBB    A,#0xc
   \   00005E   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000060   65D0         XRL     A,PSW
   \   000062   33           RLC     A
   \   000063   40C7         JC      ??ShowImage_0
   1150          }
   \   000065   02....       LJMP    ??Subroutine48_0 & 0xFFFF
   1151          
   1152          //³õÊ¼»¯LCD

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1153          void HalLcd_HW_Init(void)
   \                     HalLcd_HW_Init:
   1154          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1155            P0SEL &= 0xFE; //ÉèÖÃP00ÎªÆÕÍ¨IO¿Ú£¬
   \   000004   53F3FE       ANL     0xf3,#0xfe
   1156            P0DIR |= 0x01; //ÉèÖÃP00ÎªÊä³ö
   \   000007   43FD01       ORL     0xfd,#0x1
   1157            P1SEL &= 0x73; //ÉèÖÃP12£¬P13,P17ÎªÆÕÍ¨IO¿Ú
   \   00000A   53F473       ANL     0xf4,#0x73
   1158            P1DIR |= 0x8c; //ÉèÖÃP12£¬P13,P17ÎªÊä³ö 
   \   00000D   43FE8C       ORL     0xfe,#0x8c
   1159          
   1160            Lcd_Reset();
   \   000010                ; Setup parameters for call to function Lcd_Reset
   \   000010   12....       LCALL   ??Lcd_Reset?relay
   1161            
   1162          #ifdef HARDWARE_SPI                                         
   1163            P1DIR &= 0x9F;
   1164            SPI_Init();   //³õÊ¼»¯SPI¶Ë¿Ú  
   1165          #endif
   1166           
   1167            LCD_write_byte(0x11,LCD_COMMAND); //ÍË³öË¯ÃßÄ£Ê½
   \   000013                ; Setup parameters for call to function LCD_write_byte
   \   000013   7A00         MOV     R2,#0x0
   \   000015   7911         MOV     R1,#0x11
   \   000017   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   1168            DelayMS(1); 
   \                     ??CrossCallReturnLabel_90:
   \   00001A   7B00         MOV     R3,#0x0
   \   00001C   12....       LCALL   ??DelayMS?relay
   1169          
   1170            ///ST7735R Frame Rate
   1171            LCD_write_byte(0xB1,LCD_COMMAND); 
   \   00001F                ; Setup parameters for call to function LCD_write_byte
   \   00001F   7A00         MOV     R2,#0x0
   \   000021   79B1         MOV     R1,#-0x4f
   \   000023   12....       LCALL   ?Subroutine17 & 0xFFFF
   1172            LCD_write_byte(0x01,LCD_DATA); 
   1173            LCD_write_byte(0x2C,LCD_DATA); 
   1174            LCD_write_byte(0x2D,LCD_DATA); 
   1175            LCD_write_byte(0xB2,LCD_COMMAND); 
   \                     ??CrossCallReturnLabel_24:
   \   000026   79B2         MOV     R1,#-0x4e
   \   000028   12....       LCALL   ?Subroutine17 & 0xFFFF
   1176            LCD_write_byte(0x01,LCD_DATA); 
   1177            LCD_write_byte(0x2C,LCD_DATA); 
   1178            LCD_write_byte(0x2D,LCD_DATA); 
   1179            LCD_write_byte(0xB3,LCD_COMMAND); 
   \                     ??CrossCallReturnLabel_25:
   \   00002B   79B3         MOV     R1,#-0x4d
   \   00002D   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   1180            LCD_write_byte(0x01,LCD_DATA); 
   \                     ??CrossCallReturnLabel_91:
   \   000030   7901         MOV     R1,#0x1
   \   000032   12....       LCALL   ?Subroutine23 & 0xFFFF
   1181            LCD_write_byte(0x2C,LCD_DATA); 
   1182            LCD_write_byte(0x2D,LCD_DATA); 
   \                     ??CrossCallReturnLabel_37:
   \   000035   792D         MOV     R1,#0x2d
   \   000037   12....       LCALL   ?Subroutine17 & 0xFFFF
   1183            LCD_write_byte(0x01,LCD_DATA); 
   1184            LCD_write_byte(0x2C,LCD_DATA); 
   1185            LCD_write_byte(0x2D,LCD_DATA); 
   1186          
   1187            LCD_write_byte(0xB4,LCD_COMMAND);//ÁĞ¶Ôµ÷
   \                     ??CrossCallReturnLabel_26:
   \   00003A   79B4         MOV     R1,#-0x4c
   \   00003C   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   1188            LCD_write_byte(0x07,LCD_DATA); 
   \                     ??CrossCallReturnLabel_92:
   \   00003F   7907         MOV     R1,#0x7
   \   000041   12....       LCALL   ??Subroutine51_0 & 0xFFFF
   1189            //ST7735R¼ÓµçĞòÁĞ
   1190            LCD_write_byte(0xC0,LCD_COMMAND); 
   \                     ??CrossCallReturnLabel_136:
   \   000044   79C0         MOV     R1,#-0x40
   \   000046   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   1191            LCD_write_byte(0xA2,LCD_DATA); 
   \                     ??CrossCallReturnLabel_93:
   \   000049   79A2         MOV     R1,#-0x5e
   \   00004B   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   1192            LCD_write_byte(0x02,LCD_DATA); 
   \                     ??CrossCallReturnLabel_94:
   \   00004E   12....       LCALL   ?Subroutine26 & 0xFFFF
   1193            LCD_write_byte(0x84,LCD_DATA); 
   \                     ??CrossCallReturnLabel_84:
   \   000051   7984         MOV     R1,#-0x7c
   \   000053   12....       LCALL   ??Subroutine51_0 & 0xFFFF
   1194            LCD_write_byte(0xC1,LCD_COMMAND); 
   \                     ??CrossCallReturnLabel_137:
   \   000056   79C1         MOV     R1,#-0x3f
   \   000058   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   1195            LCD_write_byte(0xC5,LCD_DATA); 
   \                     ??CrossCallReturnLabel_95:
   \   00005B   79C5         MOV     R1,#-0x3b
   \   00005D   12....       LCALL   ??Subroutine51_0 & 0xFFFF
   1196            LCD_write_byte(0xC2,LCD_COMMAND); 
   \                     ??CrossCallReturnLabel_138:
   \   000060   79C2         MOV     R1,#-0x3e
   \   000062   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   1197            LCD_write_byte(0x0A,LCD_DATA); 
   \                     ??CrossCallReturnLabel_96:
   \   000065   790A         MOV     R1,#0xa
   \   000067   12....       LCALL   ?Subroutine20 & 0xFFFF
   1198            LCD_write_byte(0x00,LCD_DATA); 
   1199            LCD_write_byte(0xC3,LCD_COMMAND); 
   \                     ??CrossCallReturnLabel_132:
   \   00006A   79C3         MOV     R1,#-0x3d
   \   00006C   12....       LCALL   ?Subroutine24 & 0xFFFF
   1200            LCD_write_byte(0x8A,LCD_DATA); 
   1201            LCD_write_byte(0x2A,LCD_DATA); 
   \                     ??CrossCallReturnLabel_39:
   \   00006F   792A         MOV     R1,#0x2a
   \   000071   12....       LCALL   ??Subroutine51_0 & 0xFFFF
   1202            LCD_write_byte(0xC4,LCD_COMMAND); 
   \                     ??CrossCallReturnLabel_139:
   \   000074   79C4         MOV     R1,#-0x3c
   \   000076   12....       LCALL   ?Subroutine24 & 0xFFFF
   1203            LCD_write_byte(0x8A,LCD_DATA); 
   1204            LCD_write_byte(0xEE,LCD_DATA); 
   \                     ??CrossCallReturnLabel_40:
   \   000079   79EE         MOV     R1,#-0x12
   \   00007B   12....       LCALL   ??Subroutine51_0 & 0xFFFF
   1205          
   1206            LCD_write_byte(0xC5,LCD_COMMAND); //¼ÓVCOM 
   \                     ??CrossCallReturnLabel_140:
   \   00007E   79C5         MOV     R1,#-0x3b
   \   000080   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   1207            LCD_write_byte(0x0E,LCD_DATA); 
   \                     ??CrossCallReturnLabel_97:
   \   000083   790E         MOV     R1,#0xe
   \   000085   12....       LCALL   ??Subroutine51_0 & 0xFFFF
   1208          
   1209            LCD_write_byte(0x36,LCD_COMMAND); //RGBÄ£Ê½ 
   \                     ??CrossCallReturnLabel_141:
   \   000088   7936         MOV     R1,#0x36
   \   00008A   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   1210            LCD_write_byte(0xC8,LCD_DATA); 
   \                     ??CrossCallReturnLabel_98:
   \   00008D   79C8         MOV     R1,#-0x38
   \   00008F   12....       LCALL   ??Subroutine51_0 & 0xFFFF
   1211            
   1212            // ST7735R Gamma Ğ£ÕıĞòÁĞ
   1213            LCD_write_byte(0xe0,LCD_COMMAND); 
   \                     ??CrossCallReturnLabel_142:
   \   000092   79E0         MOV     R1,#-0x20
   \   000094   12....       LCALL   ?Subroutine18 & 0xFFFF
   1214            LCD_write_byte(0x0f,LCD_DATA); 
   1215            LCD_write_byte(0x1a,LCD_DATA); 
   \                     ??CrossCallReturnLabel_27:
   \   000097   791A         MOV     R1,#0x1a
   \   000099   12....       LCALL   ?Subroutine18 & 0xFFFF
   1216            LCD_write_byte(0x0f,LCD_DATA); 
   1217            LCD_write_byte(0x18,LCD_DATA); 
   \                     ??CrossCallReturnLabel_28:
   \   00009C   7918         MOV     R1,#0x18
   \   00009E   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   1218            LCD_write_byte(0x2f,LCD_DATA); 
   \                     ??CrossCallReturnLabel_99:
   \   0000A1   792F         MOV     R1,#0x2f
   \   0000A3   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   1219            LCD_write_byte(0x28,LCD_DATA); 
   \                     ??CrossCallReturnLabel_100:
   \   0000A6   7928         MOV     R1,#0x28
   \   0000A8   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   1220            LCD_write_byte(0x20,LCD_DATA); 
   \                     ??CrossCallReturnLabel_101:
   \   0000AB   7920         MOV     R1,#0x20
   \   0000AD   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   1221            LCD_write_byte(0x22,LCD_DATA); 
   \                     ??CrossCallReturnLabel_102:
   \   0000B0   7922         MOV     R1,#0x22
   \   0000B2   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   1222            LCD_write_byte(0x1f,LCD_DATA); 
   \                     ??CrossCallReturnLabel_103:
   \   0000B5   791F         MOV     R1,#0x1f
   \   0000B7   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   1223            LCD_write_byte(0x1b,LCD_DATA); 
   \                     ??CrossCallReturnLabel_104:
   \   0000BA   791B         MOV     R1,#0x1b
   \   0000BC   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   1224            LCD_write_byte(0x23,LCD_DATA); 
   \                     ??CrossCallReturnLabel_105:
   \   0000BF   7923         MOV     R1,#0x23
   \   0000C1   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   1225            LCD_write_byte(0x37,LCD_DATA); 
   \                     ??CrossCallReturnLabel_106:
   \   0000C4   7937         MOV     R1,#0x37
   \   0000C6   12....       LCALL   ?Subroutine21 & 0xFFFF
   1226            LCD_write_byte(0x00,LCD_DATA); 
   1227          
   1228            LCD_write_byte(0x07,LCD_DATA); 
   1229            LCD_write_byte(0x02,LCD_DATA); 
   \                     ??CrossCallReturnLabel_33:
   \   0000C9   12....       LCALL   ?Subroutine26 & 0xFFFF
   1230            LCD_write_byte(0x10,LCD_DATA); 
   \                     ??CrossCallReturnLabel_85:
   \   0000CC   7910         MOV     R1,#0x10
   \   0000CE   12....       LCALL   ??Subroutine51_0 & 0xFFFF
   1231            LCD_write_byte(0xe1,LCD_COMMAND); 
   \                     ??CrossCallReturnLabel_143:
   \   0000D1   79E1         MOV     R1,#-0x1f
   \   0000D3   12....       LCALL   ?Subroutine18 & 0xFFFF
   1232            LCD_write_byte(0x0f,LCD_DATA); 
   1233            LCD_write_byte(0x1b,LCD_DATA); 
   \                     ??CrossCallReturnLabel_29:
   \   0000D6   791B         MOV     R1,#0x1b
   \   0000D8   12....       LCALL   ?Subroutine18 & 0xFFFF
   1234            LCD_write_byte(0x0f,LCD_DATA); 
   1235            LCD_write_byte(0x17,LCD_DATA); 
   \                     ??CrossCallReturnLabel_30:
   \   0000DB   7917         MOV     R1,#0x17
   \   0000DD   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   1236            LCD_write_byte(0x33,LCD_DATA); 
   \                     ??CrossCallReturnLabel_107:
   \   0000E0   7933         MOV     R1,#0x33
   \   0000E2   12....       LCALL   ?Subroutine23 & 0xFFFF
   1237            LCD_write_byte(0x2c,LCD_DATA); 
   1238            LCD_write_byte(0x29,LCD_DATA); 
   \                     ??CrossCallReturnLabel_38:
   \   0000E5   7929         MOV     R1,#0x29
   \   0000E7   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   1239            LCD_write_byte(0x2e,LCD_DATA); 
   \                     ??CrossCallReturnLabel_108:
   \   0000EA   792E         MOV     R1,#0x2e
   \   0000EC   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   1240            LCD_write_byte(0x30,LCD_DATA); 
   \                     ??CrossCallReturnLabel_109:
   \   0000EF   7930         MOV     R1,#0x30
   \   0000F1   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   1241            LCD_write_byte(0x30,LCD_DATA); 
   \                     ??CrossCallReturnLabel_110:
   \   0000F4   7930         MOV     R1,#0x30
   \   0000F6   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   1242            LCD_write_byte(0x39,LCD_DATA); 
   \                     ??CrossCallReturnLabel_111:
   \   0000F9   7939         MOV     R1,#0x39
   \   0000FB   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   1243            LCD_write_byte(0x3f,LCD_DATA); 
   \                     ??CrossCallReturnLabel_112:
   \   0000FE   793F         MOV     R1,#0x3f
   \   000100   12....       LCALL   ?Subroutine21 & 0xFFFF
   1244            LCD_write_byte(0x00,LCD_DATA); 
   1245            LCD_write_byte(0x07,LCD_DATA); 
   1246            LCD_write_byte(0x03,LCD_DATA); 
   \                     ??CrossCallReturnLabel_34:
   \   000103   7903         MOV     R1,#0x3
   \   000105   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   1247            LCD_write_byte(0x10,LCD_DATA);  
   \                     ??CrossCallReturnLabel_113:
   \   000108   7910         MOV     R1,#0x10
   \   00010A   12....       LCALL   ??Subroutine51_0 & 0xFFFF
   1248          
   1249            LCD_write_byte(0x2a,LCD_COMMAND);
   \                     ??CrossCallReturnLabel_144:
   \   00010D   792A         MOV     R1,#0x2a
   \   00010F   12....       LCALL   ?Subroutine19 & 0xFFFF
   1250            LCD_write_byte(0x00,LCD_DATA);
   1251            LCD_write_byte(0x00,LCD_DATA);
   1252            LCD_write_byte(0x00,LCD_DATA);
   1253            LCD_write_byte(0x7f,LCD_DATA);
   \                     ??CrossCallReturnLabel_31:
   \   000112   797F         MOV     R1,#0x7f
   \   000114   12....       LCALL   ??Subroutine51_0 & 0xFFFF
   1254            LCD_write_byte(0x2b,LCD_COMMAND);
   \                     ??CrossCallReturnLabel_145:
   \   000117   792B         MOV     R1,#0x2b
   \   000119   12....       LCALL   ?Subroutine19 & 0xFFFF
   1255            LCD_write_byte(0x00,LCD_DATA);
   1256            LCD_write_byte(0x00,LCD_DATA);
   1257            LCD_write_byte(0x00,LCD_DATA);
   1258            LCD_write_byte(0x9f,LCD_DATA);
   \                     ??CrossCallReturnLabel_32:
   \   00011C   799F         MOV     R1,#-0x61
   \   00011E   12....       LCALL   ??Subroutine51_0 & 0xFFFF
   1259          
   1260            LCD_write_byte(0xF0,LCD_COMMAND); //Ê¹ÄÜ²âÊÔÃüÁî  
   \                     ??CrossCallReturnLabel_146:
   \   000121   79F0         MOV     R1,#-0x10
   \   000123   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   1261            LCD_write_byte(0x01,LCD_DATA); 
   \                     ??CrossCallReturnLabel_114:
   \   000126   7901         MOV     R1,#0x1
   \   000128   12....       LCALL   ??Subroutine51_0 & 0xFFFF
   1262            LCD_write_byte(0xF6,LCD_COMMAND); //¹Ø±ÕramÊ¡µçÄ£Ê½ 
   \                     ??CrossCallReturnLabel_147:
   \   00012B   79F6         MOV     R1,#-0xa
   \   00012D   12....       LCALL   ?Subroutine20 & 0xFFFF
   1263            LCD_write_byte(0x00,LCD_DATA); 
   1264          
   1265            LCD_write_byte(0x3A,LCD_COMMAND); //É«Éî16bit 
   \                     ??CrossCallReturnLabel_133:
   \   000130   793A         MOV     R1,#0x3a
   \   000132   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   1266            LCD_write_byte(0x05,LCD_DATA); 
   \                     ??CrossCallReturnLabel_115:
   \   000135   7905         MOV     R1,#0x5
   \   000137   12....       LCALL   ??Subroutine51_0 & 0xFFFF
   1267            
   1268            LCD_write_byte(0x29,LCD_COMMAND); //¿ªÏÔÊ¾  
   \                     ??CrossCallReturnLabel_148:
   \   00013A   7929         MOV     R1,#0x29
   \   00013C   12....       LCALL   ??LCD_write_byte?relay
   1269            LCD_clear(GREEN);                 //ÇåÆÁ 
   \   00013F                ; Setup parameters for call to function LCD_clear
   \   00013F   7AE0         MOV     R2,#-0x20
   \   000141   7B07         MOV     R3,#0x7
   \   000143   12....       LCALL   ??LCD_clear?relay
   1270          }
   \   000146   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   000149                REQUIRE P0SEL
   \   000149                REQUIRE P0DIR
   \   000149                REQUIRE P1SEL
   \   000149                REQUIRE P1DIR

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   7902         MOV     R1,#0x2
   \   000002                REQUIRE ??Subroutine50_0
   \   000002                ; // Fall through to label ??Subroutine50_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000003   798A         MOV     R1,#-0x76
   \   000005   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000003   792C         MOV     R1,#0x2c
   \   000005   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000003   7907         MOV     R1,#0x7
   \   000005   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000003   7900         MOV     R1,#0x0
   \   000005                REQUIRE ??Subroutine51_0
   \   000005                ; // Fall through to label ??Subroutine51_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000003   7900         MOV     R1,#0x0
   \   000005   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000003   7900         MOV     R1,#0x0
   \   000005   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000003   790F         MOV     R1,#0xf
   \   000005   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000003   7901         MOV     R1,#0x1
   \   000005   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000008   792D         MOV     R1,#0x2d
   \   00000A   12....       LCALL   ??LCD_write_byte?relay
   \   00000D                ; Setup parameters for call to function LCD_write_byte
   \   00000D                ; Setup parameters for call to function LCD_write_byte
   \   00000D                ; Setup parameters for call to function LCD_write_byte
   \   00000D   7A00         MOV     R2,#0x0
   \   00000F   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for Color>`:
   \   000000   1F00         DW 31

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for Color_BK>`:
   \   000000   E007         DW 2016

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcdInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcdWriteValue?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdWriteValue

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcdWriteScreen?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdWriteScreen

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcdWriteStringValue?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdWriteStringValue

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcdWriteEnString?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdWriteEnString

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcdWriteStringValueValue?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdWriteStringValueValue

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??DelayMS?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    DelayMS

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcdWriteString?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdWriteString

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SendByte?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SendByte

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SPI_WriteData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SPI_WriteData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_WrCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_WrCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_WrDat?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_WrDat

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_WriteData_16Bit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_WriteData_16Bit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_write_byte?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_write_byte

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Lcd_Reset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Lcd_Reset

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_set_window?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_set_window

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??DrawPixel?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    DrawPixel

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??DrawVerticalLine?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    DrawVerticalLine

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??DrawHorizonLine?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    DrawHorizonLine

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??DrawRect?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    DrawRect

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??DrawRectFill?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    DrawRectFill

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_clear?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_clear

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_write_EN?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_write_EN

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_write_EN_string?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_write_EN_string

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_write_CN?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_write_CN

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_write_CN_string?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_write_CN_string

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ShowImage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ShowImage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcd_HW_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcd_HW_Init
   1271          #endif

   Maximum stack usage in bytes:

     Function                    ISTACK PSTACK XSTACK
     --------                    ------ ------ ------
     DelayMS                         0      0      0
     DrawHorizonLine                 0      0     38
       -> LCD_set_window             0      0     36
       -> LCD_write_byte             0      0     28
       -> LCD_write_byte             0      0     28
     DrawPixel                       0      0     11
       -> LCD_write_byte             0      0     18
       -> LCD_write_byte             0      0     18
     DrawRect                        0      0     26
       -> DrawHorizonLine            0      0     40
       -> DrawHorizonLine            0      0     40
       -> DrawVerticalLine           0      0     40
       -> DrawVerticalLine           0      0     40
     DrawRectFill                    0      0     40
       -> LCD_set_window             0      0     40
       -> LCD_write_byte             0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
     DrawVerticalLine                0      0     38
       -> LCD_set_window             0      0     36
       -> LCD_write_byte             0      0     28
       -> LCD_write_byte             0      0     28
     HalLcdInit                      2      0      0
       -> HalLcd_HW_Init             4      0      0
     HalLcdWriteEnString             0      0     18
       -> osal_strlen                0      0     32
       -> DrawRectFill               0      0     36
       -> LCD_write_EN_string        0      0     24
     HalLcdWriteScreen               0      0      9
       -> HalLcdWriteString          0      0     18
       -> HalLcdWriteString          0      0     18
     HalLcdWriteString               0      0     62
       -> DrawRectFill               0      0     36
       -> LCD_write_EN_string        0      0     24
     HalLcdWriteStringValue          0      0     47
       -> osal_strlen                0      0     86
       -> osal_memcpy                0      0     92
       -> _ltoa                      0      0     90
       -> HalLcdWriteString          0      0     86
     HalLcdWriteStringValueValue     0      0     51
       -> osal_strlen                0      0     88
       -> osal_memcpy                0      0     94
       -> _ltoa                      0      0     92
       -> osal_strlen                0      0     88
       -> _ltoa                      0      0     92
       -> HalLcdWriteString          0      0     88
     HalLcdWriteValue                0      0     44
       -> _ltoa                      0      0     86
       -> HalLcdWriteString          0      0     82
     HalLcd_HW_Init                  2      0      0
       -> Lcd_Reset                  4      0      0
       -> LCD_write_byte             4      0      0
       -> DelayMS                    4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_clear                  4      0      0
     LCD_WrCmd                       0      0     18
       -> SPI_WriteData              0      0     18
     LCD_WrDat                       0      0     18
       -> SPI_WriteData              0      0     18
     LCD_WriteData_16Bit             0      0     21
       -> SPI_WriteData              0      0     18
       -> SPI_WriteData              0      0     18
     LCD_clear                       0      0     16
       -> LCD_set_window             0      0     32
       -> LCD_write_byte             0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
     LCD_set_window                  0      0     34
       -> LCD_write_byte             0      0     28
       -> LCD_write_byte             0      0     28
       -> LCD_write_byte             0      0     28
       -> LCD_write_byte             0      0     28
       -> LCD_write_byte             0      0     28
       -> LCD_write_byte             0      0     28
       -> LCD_write_byte             0      0     28
       -> LCD_write_byte             0      0     28
       -> LCD_write_byte             0      0     28
       -> LCD_write_byte             0      0     28
       -> LCD_write_byte             0      0     28
     LCD_write_CN                    0      0     30
       -> LCD_set_window             0      0     32
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
     LCD_write_CN_string             0      0     20
       -> LCD_write_CN               0      0     28
       -> DrawRectFill               0      0     40
     LCD_write_EN                    0      0     27
       -> LCD_set_window             0      0     28
       -> SendByte                   0      0     20
       -> SendByte                   0      0     20
       -> SendByte                   0      0     20
       -> SendByte                   0      0     20
     LCD_write_EN_string             0      0     25
       -> LCD_write_EN               0      0     26
     LCD_write_byte                  0      0     25
       -> LCD_WrCmd                  0      0     18
       -> LCD_WrDat                  0      0     18
     Lcd_Reset                       2      0      0
       -> DelayMS                    4      0      0
       -> DelayMS                    4      0      0
     SPI_WriteData                   0      0      9
     SendByte                        0      0     16
     ShowImage                       0      0     16
       -> LCD_set_window             0      0     32
       -> LCD_WriteData_16Bit        0      0     24


   Segment part sizes:

     Function/Label                      Bytes
     --------------                      -----
     _A_P0                                  1
     _A_P1                                  1
     P0SEL                                  1
     P1SEL                                  1
     P0DIR                                  1
     P1DIR                                  1
     Color                                  2
     Color_BK                               2
     CN14x14_Index                        131
     CN14x14                             1820
     ASCII7x14                           1288
     HalLcdInit                             7
     ?Subroutine0                           7
     HalLcdWriteValue                      57
     ?Subroutine1                           3
     ??Subroutine43_0                       5
     ??Subroutine46_0                       6
     HalLcdWriteScreen                     25
     ??Subroutine44_0                       5
     HalLcdWriteStringValue               125
     ?Subroutine15                          4
     ??Subroutine45_0                       3
     HalLcdWriteEnString                   91
     ?Subroutine3                           3
     ??Subroutine48_0                       5
     HalLcdWriteStringValueValue          224
     ?Subroutine12                         19
     DelayMS                               34
     HalLcdWriteString                     99
     SendByte                              27
     SPI_WriteData                         27
     ?Subroutine2                           3
     LCD_WrCmd                             10
     LCD_WrDat                             10
     LCD_WriteData_16Bit                   19
     LCD_write_byte                        19
     Lcd_Reset                             25
     LCD_set_window                       118
     ?Subroutine16                          7
     ?Subroutine33                          1
     ??Subroutine47_0                       4
     ?Subroutine25                          5
     ?Subroutine4                           5
     ?Subroutine11                          8
     ?Subroutine10                          8
     ??Subroutine50_0                       4
     ?Subroutine38                          6
     ??Subroutine51_0                       6
     DrawPixel                             26
     DrawVerticalLine                      61
     ?Subroutine22                         21
     ?Subroutine14                         10
     ?Subroutine13                         10
     ??Subroutine49_0                       6
     DrawHorizonLine                       59
     DrawRect                             155
     DrawRectFill                         152
     ?Subroutine29                          7
     ?Subroutine35                          7
     ?Subroutine37                          7
     ?Subroutine40                          4
     ?Subroutine42                         11
     LCD_clear                             74
     ?Subroutine5                           4
     ?Subroutine28                          7
     ?Subroutine34                          7
     ?Subroutine36                          7
     ?Subroutine39                          7
     ?Subroutine41                         14
     ?Subroutine27                          2
     LCD_write_EN                         114
     ?Subroutine7                          10
     ?Subroutine30                          6
     ?Subroutine6                          10
     LCD_write_EN_string                   76
     LCD_write_CN                          96
     ?Subroutine9                          33
     ?Subroutine8                          12
     LCD_write_CN_string                  220
     j                                      1
     ShowImage                            104
     HalLcd_HW_Init                       329
     ?Subroutine26                          2
     ?Subroutine24                          9
     ?Subroutine23                          4
     ?Subroutine32                          9
     ?Subroutine21                          9
     ?Subroutine20                          5
     ?Subroutine19                          9
     ?Subroutine31                          9
     ?Subroutine18                          9
     ?Subroutine17                         16
     ?<Initializer for Color>               2
     ?<Initializer for Color_BK>            2
     ??HalLcdInit?relay                     6
     ??HalLcdWriteValue?relay               6
     ??HalLcdWriteScreen?relay              6
     ??HalLcdWriteStringValue?relay         6
     ??HalLcdWriteEnString?relay            6
     ??HalLcdWriteStringValueValue?relay    6
     ??DelayMS?relay                        6
     ??HalLcdWriteString?relay              6
     ??SendByte?relay                       6
     ??SPI_WriteData?relay                  6
     ??LCD_WrCmd?relay                      6
     ??LCD_WrDat?relay                      6
     ??LCD_WriteData_16Bit?relay            6
     ??LCD_write_byte?relay                 6
     ??Lcd_Reset?relay                      6
     ??LCD_set_window?relay                 6
     ??DrawPixel?relay                      6
     ??DrawVerticalLine?relay               6
     ??DrawHorizonLine?relay                6
     ??DrawRect?relay                       6
     ??DrawRectFill?relay                   6
     ??LCD_clear?relay                      6
     ??LCD_write_EN?relay                   6
     ??LCD_write_EN_string?relay            6
     ??LCD_write_CN?relay                   6
     ??LCD_write_CN_string?relay            6
     ??ShowImage?relay                      6
     ??HalLcd_HW_Init?relay                 6

 
 2 783 bytes in segment BANKED_CODE
   168 bytes in segment BANK_RELAYS
 3 239 bytes in segment CODE_C
     6 bytes in segment SFR_AN
     4 bytes in segment XDATA_I
     4 bytes in segment XDATA_ID
     1 byte  in segment XDATA_Z
 
 6 194 bytes of CODE  memory
     0 bytes of DATA  memory (+ 6 bytes shared)
     5 bytes of XDATA memory

Errors: none
Warnings: none
