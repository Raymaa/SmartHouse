###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         24/Jun/2019  20:06:36 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+Æ #
#                          øÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\ZMain\TI253 #
#                          0DB\ZMain.c                                        #
#    Command line       =  -f "F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª #
#                          ¶È+ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEnd #
#                          ev.cfg" (-DCPU32MHZ -DROOT=__near_func             #
#                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6         #
#                          -DMAC_CFG_RX_MAX=3) -f "F:\Zigbee\µÚ5ÕÂ            #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\Tools\CC2530DB\f8wConfig.cfg"             #
#                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0      #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0x1234                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "F:\Zigbee\µÚ5ÕÂ            #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZStack- #
#                          2.5.1a\Projects\zstack\ZMain\TI2530DB\ZMain.c" -D  #
#                          NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D            #
#                          MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG  #
#                          -lC "F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊ #
#                          ª¶È+ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\EndDeviceEB\List\" -lA        #
#                          "F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ #
#                          ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\EndDeviceEB\List\"                #
#                          --diag_suppress Pe001,Pa010 -o "F:\Zigbee\µÚ5ÕÂ    #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          EndDeviceEB\Obj\" -e --no_code_motion --debug      #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "F:\Zigbee\µÚ5ÕÂ           #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          " -I "F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.Êª #
#                          Êª¶È+ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Sampl #
#                          es\SampleApp\CC2530DB\..\Source\" -I               #
#                          "F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ #
#                          ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\ZMain\TI2530DB\" -I      #
#                          "F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ #
#                          ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\..\..\Components\hal\inc #
#                          lude\" -I "F:\Zigbee\µÚ5ÕÂ                         #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\hal\target\CC2530EB\"    #
#                          -I "F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª #
#                          ¶È+ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\..\..\Components\mac\ #
#                          include\" -I "F:\Zigbee\µÚ5ÕÂ                      #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\mac\high_level\" -I      #
#                          "F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ #
#                          ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\..\..\Components\mac\low #
#                          _level\srf04\" -I "F:\Zigbee\µÚ5ÕÂ                 #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\mac\low_level\srf04\sing #
#                          le_chip\" -I "F:\Zigbee\µÚ5ÕÂ                      #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\mt\" -I                  #
#                          "F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ #
#                          ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\..\..\Components\osal\in #
#                          clude\" -I "F:\Zigbee\µÚ5ÕÂ                        #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\services\saddr\" -I      #
#                          "F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ #
#                          ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\..\..\Components\service #
#                          s\sdata\" -I "F:\Zigbee\µÚ5ÕÂ                      #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\stack\af\" -I            #
#                          "F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ #
#                          ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\..\..\Components\stack\n #
#                          wk\" -I "F:\Zigbee\µÚ5ÕÂ                           #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\stack\sapi\" -I          #
#                          "F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ #
#                          ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\..\..\Components\stack\s #
#                          ec\" -I "F:\Zigbee\µÚ5ÕÂ                           #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\stack\sys\" -I           #
#                          "F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ #
#                          ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\..\..\Components\stack\z #
#                          do\" -I "F:\Zigbee\µÚ5ÕÂ                           #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\zmac\" -I                #
#                          "F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ #
#                          ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8 #
#                          w\" -Ohz --require_prototypes                      #
#    List file          =  F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+Æ #
#                          øÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples\Sam #
#                          pleApp\CC2530DB\EndDeviceEB\List\ZMain.lst         #
#    Object file        =  F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+Æ #
#                          øÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples\Sam #
#                          pleApp\CC2530DB\EndDeviceEB\Obj\ZMain.r51          #
#                                                                             #
#                                                                             #
###############################################################################

F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\ZMain\TI2530DB\ZMain.c
      1          /**************************************************************************************************
      2            Filename:       ZMain.c
      3            Revised:        $Date: 2010-09-17 16:25:30 -0700 (Fri, 17 Sep 2010) $
      4            Revision:       $Revision: 23835 $ V1.0 ALD Andy
      5          
      6            Description:    Startup and shutdown code for ZStack
      7            Notes:          This version targets the Chipcon CC2530
      8          
      9          
     10            Copyright 2005-2010 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at https://aldsz.taobao.com
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          
     45          #ifndef NONWK
     46          #include "AF.h"
     47          #endif
     48          #include "hal_adc.h"

   \                                 In  segment SFR_AN, at 0x8f
   \   unsigned char volatile __sfr P0INP
   \                     P0INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9d
   \   unsigned char volatile __sfr SLEEPSTA
   \                     SLEEPSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9e
   \   unsigned char volatile __sfr CLKCONSTA
   \                     CLKCONSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbe
   \   unsigned char volatile __sfr SLEEPCMD
   \                     SLEEPCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc6
   \   unsigned char volatile __sfr CLKCONCMD
   \                     CLKCONCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     49          #include "hal_flash.h"
     50          #include "hal_lcd.h"
     51          #include "hal_led.h"
     52          #include "hal_drivers.h"
     53          #include "OnBoard.h"
     54          #include "OSAL.h"
     55          #include "OSAL_Nv.h"
     56          #include "ZComDef.h"
     57          #include "ZMAC.h" 
     58          
     59          /*********************************************************************
     60           * LOCAL FUNCTIONS
     61           */
     62          
     63          static void zmain_ext_addr( void );
     64          #if defined ZCL_KEY_ESTABLISH
     65          static void zmain_cert_init( void );
     66          #endif
     67          static void zmain_dev_info( void );
     68          static void zmain_vdd_check( void );
     69          
     70          #ifdef LCD_SUPPORTED
     71          static void zmain_lcd_init( void );
     72          #endif
     73          
     74          extern uint8 AppTitle[]; //Ó¦ÓÃ³ÌĞòÃû³Æ
     75          
     76          /*********************************************************************
     77           * @fn      main
     78           * @brief   First function called after startup.
     79           * @return  don't care
     80           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     81          int main( void )
   \                     main:
     82          {
   \   000000                ; Auto size: 0
     83            // Turn off interrupts
     84            osal_int_disable( INTS_ALL );
   \   000000                ; Setup parameters for call to function osal_int_disable
   \   000000   79FF         MOV     R1,#-0x1
   \   000002   12....       LCALL   ??osal_int_disable?relay
     85          
     86            // Initialization for board related stuff such as LEDs
     87            HAL_BOARD_INIT();
   \   000005   53BEFB       ANL     0xbe,#0xfb
   \                     ??main_0:
   \   000008   E59D         MOV     A,0x9d
   \   00000A   A2E6         MOV     C,0xE0 /* A   */.6
   \   00000C   50FA         JNC     ??main_0
   \   00000E   00           NOP
   \   00000F   78F8         MOV     R0,#-0x8
   \   000011   7901         MOV     R1,#0x1
   \                     ??main_1:
   \   000013   00           NOP
   \   000014   E8           MOV     A,R0
   \   000015   24FF         ADD     A,#-0x1
   \   000017   18           DEC     R0
   \   000018   E9           MOV     A,R1
   \   000019   34FF         ADDC    A,#-0x1
   \   00001B   F9           MOV     R1,A
   \   00001C   E8           MOV     A,R0
   \   00001D   49           ORL     A,R1
   \   00001E   70F3         JNZ     ??main_1
   \   000020   75C600       MOV     0xc6,#0x0
   \                     ??main_2:
   \   000023   E59E         MOV     A,0x9e
   \   000025   70FC         JNZ     ??main_2
   \   000027   43BE04       ORL     0xbe,#0x4
   \   00002A   906270       MOV     DPTR,#0x6270
   \   00002D   7408         MOV     A,#0x8
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   C290         CLR     0x90.0
   \   000032   43FE01       ORL     0xfe,#0x1
   \   000035   C291         CLR     0x90.1
   \   000037   43FE02       ORL     0xfe,#0x2
   \   00003A   C294         CLR     0x90.4
   \   00003C   43FE10       ORL     0xfe,#0x10
   \   00003F   438F01       ORL     0x8f,#0x1
     88          
     89            // Make sure supply voltage is high enough to run
     90            zmain_vdd_check();
   \   000042   7E10         MOV     R6,#0x10
   \                     ??main_3:
   \   000044                ; Setup parameters for call to function HalAdcCheckVdd
   \   000044   794A         MOV     R1,#0x4a
   \   000046   12....       LCALL   ??HalAdcCheckVdd?relay
   \   000049   E9           MOV     A,R1
   \   00004A   60F8         JZ      ??main_3
   \   00004C   1E           DEC     R6
   \   00004D   EE           MOV     A,R6
   \   00004E   70F4         JNZ     ??main_3
     91          
     92            // Initialize board I/O
     93            InitBoard( OB_COLD );
   \   000050                ; Setup parameters for call to function InitBoard
   \   000050   7900         MOV     R1,#0x0
   \   000052   12....       LCALL   ??InitBoard?relay
     94          
     95            // Initialze HAL drivers
     96            HalDriverInit();
   \   000055                ; Setup parameters for call to function HalDriverInit
   \   000055   12....       LCALL   ??HalDriverInit?relay
     97          
     98            // Initialize NV System
     99            osal_nv_init( NULL );
   \   000058                ; Setup parameters for call to function osal_nv_init
   \   000058   7A00         MOV     R2,#0x0
   \   00005A   7B00         MOV     R3,#0x0
   \   00005C   12....       LCALL   ??osal_nv_init?relay
    100            
    101            // Initialize the MAC
    102            ZMacInit();
   \   00005F                ; Setup parameters for call to function ZMacInit
   \   00005F   12....       LCALL   ??ZMacInit?relay
    103          
    104            // Determine the extended address
    105            zmain_ext_addr();
   \   000062                ; Setup parameters for call to function zmain_ext_addr
   \   000062   12....       LCALL   ??zmain_ext_addr?relay
    106          
    107          #if defined ZCL_KEY_ESTABLISH
    108            // Initialize the Certicom certificate information.
    109            zmain_cert_init();
    110          #endif
    111          
    112            // Initialize basic NV items
    113            zgInit();
   \   000065                ; Setup parameters for call to function zgInit
   \   000065   12....       LCALL   ??zgInit?relay
    114          
    115          #ifndef NONWK
    116            // Since the AF isn't a task, call it's initialization routine
    117            afInit();
    118          #endif
    119          
    120            // Initialize the operating system
    121            osal_init_system();
   \   000068                ; Setup parameters for call to function osal_init_system
   \   000068   12....       LCALL   ??osal_init_system?relay
    122          
    123            // Allow interrupts
    124            osal_int_enable( INTS_ALL );
   \   00006B                ; Setup parameters for call to function osal_int_enable
   \   00006B   79FF         MOV     R1,#-0x1
   \   00006D   12....       LCALL   ??osal_int_enable?relay
    125          
    126            // Final board initialization
    127            InitBoard( OB_READY );
   \   000070                ; Setup parameters for call to function InitBoard
   \   000070   7902         MOV     R1,#0x2
   \   000072   12....       LCALL   ??InitBoard?relay
    128          
    129            // Display information about this device
    130            zmain_dev_info();
   \   000075                ; Setup parameters for call to function zmain_dev_info
   \   000075   12....       LCALL   ??zmain_dev_info?relay
    131          
    132            /* Display the device info on the LCD */
    133          #ifdef LCD_SUPPORTED
    134            zmain_lcd_init();
   \   000078                ; Setup parameters for call to function HalLcdWriteString
   \   000078   7900         MOV     R1,#0x0
   \   00007A   7A..         MOV     R2,#`?<Constant "TexasInstruments">` & 0xff
   \   00007C   7B..         MOV     R3,#(`?<Constant "TexasInstruments">` >> 8) & 0xff
   \   00007E   12....       LCALL   ??HalLcdWriteString?relay
    135          #endif
    136          
    137          #ifdef WDT_IN_PM1
    138            /* If WDT is used, this is a good place to enable it. */
    139            WatchDogEnable( WDTIMX );
    140          #endif
    141          
    142            osal_start_system(); // No Return from here
   \   000081                ; Setup parameters for call to function osal_start_system
   \   000081   12....       LCALL   ??osal_start_system?relay
    143          
    144            return 0;  // Shouldn't get here.
   \   000084   7A00         MOV     R2,#0x0
   \   000086   7B00         MOV     R3,#0x0
   \   000088   02....       LJMP    ?BRET
   \   00008B                REQUIRE SLEEPCMD
   \   00008B                REQUIRE SLEEPSTA
   \   00008B                REQUIRE CLKCONCMD
   \   00008B                REQUIRE CLKCONSTA
   \   00008B                REQUIRE _A_P1
   \   00008B                REQUIRE P1DIR
   \   00008B                REQUIRE P0INP
    145          } // main()
    146          
    147          /*********************************************************************
    148           * @fn      zmain_vdd_check
    149           * @brief   Check if the Vdd is OK to run the processor.
    150           * @return  Return if Vdd is ok; otherwise, flash LED, then reset
    151           *********************************************************************/
    152          static void zmain_vdd_check( void )
    153          {
    154            uint8 cnt = 16;
    155            
    156            do {
    157              while (!HalAdcCheckVdd(VDD_MIN_RUN));
    158            } while (--cnt);
    159          }
    160          
    161          /**************************************************************************************************
    162           * @fn          zmain_ext_addr
    163           *
    164           * @brief       Execute a prioritized search for a valid extended address and write the results
    165           *              into the OSAL NV system for use by the system. Temporary address not saved to NV.
    166           *
    167           * input parameters
    168           *
    169           * None.
    170           *
    171           * output parameters
    172           *
    173           * None.
    174           *
    175           * @return      None.
    176           **************************************************************************************************
    177           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    178          static void zmain_ext_addr(void)
   \                     zmain_ext_addr:
    179          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    180            uint8 nullAddr[Z_EXTADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#(`?<Constant {255, 255, 255, 255, 255, 255, 255,` >> 8) & 0xff
   \   000017   7582..       MOV     DPL,#`?<Constant {255, 255, 255, 255, 255, 255, 255,` & 0xff
   \   00001A   7408         MOV     A,#0x8
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    181            uint8 writeNV = TRUE;
    182          
    183            // First check whether a non-erased extended address exists in the OSAL NV.
    184            if ((SUCCESS != osal_nv_item_init(ZCD_NV_EXTADDR, Z_EXTADDR_LEN, NULL))  ||
    185                (SUCCESS != osal_nv_read(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress)) ||
    186                (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN)))
   \   00001F                ; Setup parameters for call to function osal_nv_item_init
   \   00001F   F5..         MOV     ?V0 + 0,A
   \   000021   F5..         MOV     ?V0 + 1,A
   \   000023   78..         MOV     R0,#?V0 + 0
   \   000025   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000028   7C08         MOV     R4,#0x8
   \   00002A   7D00         MOV     R5,#0x0
   \   00002C   7A01         MOV     R2,#0x1
   \   00002E   7B00         MOV     R3,#0x0
   \   000030   12....       LCALL   ??osal_nv_item_init?relay
   \   000033   7402         MOV     A,#0x2
   \   000035   12....       LCALL   ?DEALLOC_XSTACK8
   \   000038   E9           MOV     A,R1
   \   000039   7057         JNZ     ??zmain_ext_addr_0
   \   00003B                ; Setup parameters for call to function osal_nv_read
   \   00003B   75....       MOV     ?V0 + 0,#aExtendedAddress & 0xff
   \   00003E   75....       MOV     ?V0 + 1,#(aExtendedAddress >> 8) & 0xff
   \   000041   78..         MOV     R0,#?V0 + 0
   \   000043   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000046   75..08       MOV     ?V0 + 0,#0x8
   \   000049   75..00       MOV     ?V0 + 1,#0x0
   \   00004C   78..         MOV     R0,#?V0 + 0
   \   00004E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000051   7C00         MOV     R4,#0x0
   \   000053   7D00         MOV     R5,#0x0
   \   000055   7A01         MOV     R2,#0x1
   \   000057   7B00         MOV     R3,#0x0
   \   000059   12....       LCALL   ??osal_nv_read?relay
   \   00005C   7404         MOV     A,#0x4
   \   00005E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000061   E9           MOV     A,R1
   \   000062   702E         JNZ     ??zmain_ext_addr_0
   \   000064                ; Setup parameters for call to function osal_memcmp
   \   000064   85..82       MOV     DPL,?XSP + 0
   \   000067   85..83       MOV     DPH,?XSP + 1
   \   00006A   A982         MOV     R1,DPL
   \   00006C   AA83         MOV     R2,DPH
   \   00006E   89..         MOV     ?V0 + 0,R1
   \   000070   8A..         MOV     ?V0 + 1,R2
   \   000072   75..00       MOV     ?V0 + 2,#0x0
   \   000075   78..         MOV     R0,#?V0 + 0
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00007A   7C08         MOV     R4,#0x8
   \   00007C   7D00         MOV     R5,#0x0
   \   00007E   79..         MOV     R1,#aExtendedAddress & 0xff
   \   000080   7A..         MOV     R2,#(aExtendedAddress >> 8) & 0xff
   \   000082   7B00         MOV     R3,#0x0
   \   000084   12....       LCALL   ??osal_memcmp?relay
   \   000087   7403         MOV     A,#0x3
   \   000089   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008C   E9           MOV     A,R1
   \   00008D   7003         JNZ     $+5
   \   00008F   02....       LJMP    ??zmain_ext_addr_1 & 0xFFFF
    187            {
    188              // Attempt to read the extended address from the location on the lock bits page
    189              // where the programming tools know to reserve it.
    190              HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_IEEE_OSET, aExtendedAddress, Z_EXTADDR_LEN);
   \                     ??zmain_ext_addr_0:
   \   000092                ; Setup parameters for call to function HalFlashRead
   \   000092   75..08       MOV     ?V0 + 0,#0x8
   \   000095   75..00       MOV     ?V0 + 1,#0x0
   \   000098   78..         MOV     R0,#?V0 + 0
   \   00009A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009D   7C..         MOV     R4,#aExtendedAddress & 0xff
   \   00009F   7D..         MOV     R5,#(aExtendedAddress >> 8) & 0xff
   \   0000A1   7AE8         MOV     R2,#-0x18
   \   0000A3   7B07         MOV     R3,#0x7
   \   0000A5   797F         MOV     R1,#0x7f
   \   0000A7   12....       LCALL   ??HalFlashRead?relay
   \   0000AA   7402         MOV     A,#0x2
   \   0000AC   12....       LCALL   ?DEALLOC_XSTACK8
    191          
    192              if (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN))
   \   0000AF                ; Setup parameters for call to function osal_memcmp
   \   0000AF   85..82       MOV     DPL,?XSP + 0
   \   0000B2   85..83       MOV     DPH,?XSP + 1
   \   0000B5   A982         MOV     R1,DPL
   \   0000B7   AA83         MOV     R2,DPH
   \   0000B9   89..         MOV     ?V0 + 0,R1
   \   0000BB   8A..         MOV     ?V0 + 1,R2
   \   0000BD   75..00       MOV     ?V0 + 2,#0x0
   \   0000C0   78..         MOV     R0,#?V0 + 0
   \   0000C2   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000C5   7C08         MOV     R4,#0x8
   \   0000C7   7D00         MOV     R5,#0x0
   \   0000C9   79..         MOV     R1,#aExtendedAddress & 0xff
   \   0000CB   7A..         MOV     R2,#(aExtendedAddress >> 8) & 0xff
   \   0000CD   7B00         MOV     R3,#0x0
   \   0000CF   12....       LCALL   ??osal_memcmp?relay
   \   0000D2   7403         MOV     A,#0x3
   \   0000D4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D7   E9           MOV     A,R1
   \   0000D8   6035         JZ      ??zmain_ext_addr_2
    193              {
    194                // Attempt to read the extended address from the designated location in the Info Page.
    195                if (!osal_memcmp((uint8 *)(P_INFOPAGE+HAL_INFOP_IEEE_OSET), nullAddr, Z_EXTADDR_LEN))
   \   0000DA                ; Setup parameters for call to function osal_memcmp
   \   0000DA   78..         MOV     R0,#?V0 + 0
   \   0000DC   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000DF   7C08         MOV     R4,#0x8
   \   0000E1   7D00         MOV     R5,#0x0
   \   0000E3   790C         MOV     R1,#0xc
   \   0000E5   7A78         MOV     R2,#0x78
   \   0000E7   7B00         MOV     R3,#0x0
   \   0000E9   12....       LCALL   ??osal_memcmp?relay
   \   0000EC   7403         MOV     A,#0x3
   \   0000EE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F1   E9           MOV     A,R1
   \   0000F2   7054         JNZ     ??zmain_ext_addr_3
    196                {
    197                  osal_memcpy(aExtendedAddress, (uint8 *)(P_INFOPAGE+HAL_INFOP_IEEE_OSET), Z_EXTADDR_LEN);
   \   0000F4                ; Setup parameters for call to function osal_memcpy
   \   0000F4   75..0C       MOV     ?V0 + 0,#0xc
   \   0000F7   75..78       MOV     ?V0 + 1,#0x78
   \   0000FA   78..         MOV     R0,#?V0 + 0
   \   0000FC   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000FF   7C08         MOV     R4,#0x8
   \   000101   7D00         MOV     R5,#0x0
   \   000103   7A..         MOV     R2,#aExtendedAddress & 0xff
   \   000105   7B..         MOV     R3,#(aExtendedAddress >> 8) & 0xff
   \   000107   12....       LCALL   ??osal_memcpy?relay
   \   00010A   7403         MOV     A,#0x3
   \   00010C   12....       LCALL   ?DEALLOC_XSTACK8
    198                }
    199                else  // No valid extended address was found.
    200                {
    201                  uint8 idx;
    202                  
    203          #if !defined ( NV_RESTORE )
    204                  writeNV = FALSE;  // Make this a temporary IEEE address
    205          #endif
    206          
    207                  /* Attempt to create a sufficiently random extended address for expediency.
    208                   * Note: this is only valid/legal in a test environment and
    209                   *       must never be used for a commercial product.
    210                   */
    211                  for (idx = 0; idx < (Z_EXTADDR_LEN - 2);)
    212                  {
    213                    uint16 randy = osal_rand();
    214                    aExtendedAddress[idx++] = LO_UINT16(randy);
    215                    aExtendedAddress[idx++] = HI_UINT16(randy);
    216                  }
    217                  // Next-to-MSB identifies ZigBee devicetype.
    218          #if ZG_BUILD_COORDINATOR_TYPE && !ZG_BUILD_JOINING_TYPE
    219                  aExtendedAddress[idx++] = 0x10;
    220          #elif ZG_BUILD_RTRONLY_TYPE
    221                  aExtendedAddress[idx++] = 0x20;
    222          #else
    223                  aExtendedAddress[idx++] = 0x30;
    224          #endif
    225                  // MSB has historical signficance.
    226                  aExtendedAddress[idx] = 0xF8;
    227                }
    228              }
    229          
    230              if (writeNV)
    231              {
    232                (void)osal_nv_write(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress);
   \                     ??zmain_ext_addr_2:
   \   00010F                ; Setup parameters for call to function osal_nv_write
   \   00010F   75....       MOV     ?V0 + 0,#aExtendedAddress & 0xff
   \   000112   75....       MOV     ?V0 + 1,#(aExtendedAddress >> 8) & 0xff
   \   000115   78..         MOV     R0,#?V0 + 0
   \   000117   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00011A   75..08       MOV     ?V0 + 0,#0x8
   \   00011D   75..00       MOV     ?V0 + 1,#0x0
   \   000120   78..         MOV     R0,#?V0 + 0
   \   000122   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000125   7C00         MOV     R4,#0x0
   \   000127   7D00         MOV     R5,#0x0
   \   000129   7A01         MOV     R2,#0x1
   \   00012B   7B00         MOV     R3,#0x0
   \   00012D   12....       LCALL   ??osal_nv_write?relay
   \   000130   7404         MOV     A,#0x4
   \   000132   12....       LCALL   ?DEALLOC_XSTACK8
    233              }
    234            }
    235          
    236            // Set the MAC PIB extended address according to results from above.
    237            (void)ZMacSetReq(MAC_EXTENDED_ADDRESS, aExtendedAddress);
   \                     ??zmain_ext_addr_1:
   \   000135                ; Setup parameters for call to function ZMacSetReq
   \   000135   7A..         MOV     R2,#aExtendedAddress & 0xff
   \   000137   7B..         MOV     R3,#(aExtendedAddress >> 8) & 0xff
   \   000139   79E2         MOV     R1,#-0x1e
   \   00013B   12....       LCALL   ??ZMacSetReq?relay
    238          }
   \   00013E   7408         MOV     A,#0x8
   \   000140   12....       LCALL   ?DEALLOC_XSTACK8
   \   000143   7F03         MOV     R7,#0x3
   \   000145   02....       LJMP    ?BANKED_LEAVE_XDATA
   \                     ??zmain_ext_addr_3:
   \   000148   7E00         MOV     R6,#0x0
   \                     ??zmain_ext_addr_4:
   \   00014A                ; Setup parameters for call to function osal_rand
   \   00014A   12....       LCALL   ??osal_rand?relay
   \   00014D   8A..         MOV     ?V0 + 0,R2
   \   00014F   A8..         MOV     R0,?V0 + 0
   \   000151   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000154   E8           MOV     A,R0
   \   000155   F0           MOVX    @DPTR,A
   \   000156   0E           INC     R6
   \   000157   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00015A   EB           MOV     A,R3
   \   00015B   F0           MOVX    @DPTR,A
   \   00015C   0E           INC     R6
   \   00015D   EE           MOV     A,R6
   \   00015E   C3           CLR     C
   \   00015F   9406         SUBB    A,#0x6
   \   000161   40E7         JC      ??zmain_ext_addr_4
   \   000163   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000166   7430         MOV     A,#0x30
   \   000168   F0           MOVX    @DPTR,A
   \   000169   7401         MOV     A,#0x1
   \   00016B   2E           ADD     A,R6
   \   00016C   F8           MOV     R0,A
   \   00016D   74..         MOV     A,#aExtendedAddress & 0xff
   \   00016F   28           ADD     A,R0
   \   000170   F582         MOV     DPL,A
   \   000172   74..         MOV     A,#(aExtendedAddress >> 8) & 0xff
   \   000174   3400         ADDC    A,#0x0
   \   000176   F583         MOV     DPH,A
   \   000178   74F8         MOV     A,#-0x8
   \   00017A   F0           MOVX    @DPTR,A
   \   00017B   80B8         SJMP    ??zmain_ext_addr_1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   8E..         MOV     ?V0 + 0,R6
   \   000002   74..         MOV     A,#aExtendedAddress & 0xff
   \   000004   25..         ADD     A,?V0 + 0
   \   000006   F582         MOV     DPL,A
   \   000008   74..         MOV     A,#(aExtendedAddress >> 8) & 0xff
   \   00000A   3400         ADDC    A,#0x0
   \   00000C   F583         MOV     DPH,A
   \   00000E   22           RET
    239          
    240          #if defined ZCL_KEY_ESTABLISH
    241          /**************************************************************************************************
    242           * @fn          zmain_cert_init
    243           *
    244           * @brief       Initialize the Certicom certificate information.
    245           *
    246           * input parameters
    247           *
    248           * None.
    249           *
    250           * output parameters
    251           *
    252           * None.
    253           *
    254           * @return      None.
    255           **************************************************************************************************
    256           */
    257          static void zmain_cert_init(void)
    258          {
    259            uint8 certData[ZCL_KE_IMPLICIT_CERTIFICATE_LEN];
    260            uint8 nullData[ZCL_KE_IMPLICIT_CERTIFICATE_LEN] = {
    261              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    262              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    263              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    264              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    265              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    266              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
    267            };
    268          
    269            (void)osal_nv_item_init(ZCD_NV_IMPLICIT_CERTIFICATE, ZCL_KE_IMPLICIT_CERTIFICATE_LEN, NULL);
    270            (void)osal_nv_item_init(ZCD_NV_DEVICE_PRIVATE_KEY, ZCL_KE_DEVICE_PRIVATE_KEY_LEN, NULL);
    271          
    272            // First check whether non-null certificate data exists in the OSAL NV. To save on code space,
    273            // just use the ZCD_NV_CA_PUBLIC_KEY as the bellwether for all three.
    274            if ((SUCCESS != osal_nv_item_init(ZCD_NV_CA_PUBLIC_KEY, ZCL_KE_CA_PUBLIC_KEY_LEN, NULL))    ||
    275                (SUCCESS != osal_nv_read(ZCD_NV_CA_PUBLIC_KEY, 0, ZCL_KE_CA_PUBLIC_KEY_LEN, certData))  ||
    276                (osal_memcmp(certData, nullData, ZCL_KE_CA_PUBLIC_KEY_LEN)))
    277            {
    278              // Attempt to read the certificate data from its corresponding location on the lock bits page.
    279              HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_CA_PUBLIC_KEY_OSET, certData,
    280                                                   ZCL_KE_CA_PUBLIC_KEY_LEN);
    281              // If the certificate data is not NULL, use it to update the corresponding NV items.
    282              if (!osal_memcmp(certData, nullData, ZCL_KE_CA_PUBLIC_KEY_LEN))
    283              {
    284                (void)osal_nv_write(ZCD_NV_CA_PUBLIC_KEY, 0, ZCL_KE_CA_PUBLIC_KEY_LEN, certData);
    285                HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_IMPLICIT_CERT_OSET, certData,
    286                                                     ZCL_KE_IMPLICIT_CERTIFICATE_LEN);
    287                (void)osal_nv_write(ZCD_NV_IMPLICIT_CERTIFICATE, 0,
    288                                    ZCL_KE_IMPLICIT_CERTIFICATE_LEN, certData);
    289                HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_DEV_PRIVATE_KEY_OSET, certData,
    290                                                  ZCL_KE_DEVICE_PRIVATE_KEY_LEN);
    291                (void)osal_nv_write(ZCD_NV_DEVICE_PRIVATE_KEY, 0, ZCL_KE_DEVICE_PRIVATE_KEY_LEN, certData);
    292              }
    293            }
    294          }
    295          #endif
    296          
    297          /**************************************************************************************************
    298           * @fn          zmain_dev_info
    299           *
    300           * @brief       This displays the IEEE (MSB to LSB) on the LCD.
    301           *
    302           * input parameters
    303           *
    304           * None.
    305           *
    306           * output parameters
    307           *
    308           * None.
    309           *
    310           * @return      None.
    311           **************************************************************************************************
    312           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    313          static void zmain_dev_info(void)
   \                     zmain_dev_info:
    314          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    315          #ifdef LCD_SUPPORTED
    316            uint8 i;
    317            uint8 *xad;
    318            uint8 lcd_buf[Z_EXTADDR_LEN*2+1];
    319          
    320            // Display the extended address.
    321            xad = aExtendedAddress + Z_EXTADDR_LEN - 1;
   \   00000A   78..         MOV     R0,#(aExtendedAddress + 7) & 0xff
   \   00000C   79..         MOV     R1,#((aExtendedAddress + 7) >> 8) & 0xff
    322          
    323            for (i = 0; i < Z_EXTADDR_LEN*2; xad--)
   \   00000E   7C00         MOV     R4,#0x0
    324            {
    325              uint8 ch;
    326              ch = (*xad >> 4) & 0x0F;
   \                     ??zmain_dev_info_0:
   \   000010   8882         MOV     DPL,R0
   \   000012   8983         MOV     DPH,R1
   \   000014   E0           MOVX    A,@DPTR
   \   000015   C4           SWAP    A
   \   000016   540F         ANL     A,#0xf
   \   000018   FD           MOV     R5,A
    327              lcd_buf[i++] = ch + (( ch < 10 ) ? '0' : '7');
   \   000019   8C..         MOV     ?V0 + 0,R4
   \   00001B   0C           INC     R4
   \   00001C   C3           CLR     C
   \   00001D   940A         SUBB    A,#0xa
   \   00001F   5004         JNC     ??zmain_dev_info_1
   \   000021   7A30         MOV     R2,#0x30
   \   000023   8002         SJMP    ??zmain_dev_info_2
   \                     ??zmain_dev_info_1:
   \   000025   7A37         MOV     R2,#0x37
   \                     ??zmain_dev_info_2:
   \   000027   EA           MOV     A,R2
   \   000028   2D           ADD     A,R5
   \   000029   C0E0         PUSH    A
   \   00002B   85....       MOV     ?V0 + 2,?V0 + 0
   \   00002E   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000031   D0E0         POP     A
   \   000033   F0           MOVX    @DPTR,A
    328              ch = *xad & 0x0F;
   \   000034   8882         MOV     DPL,R0
   \   000036   8983         MOV     DPH,R1
   \   000038   E0           MOVX    A,@DPTR
   \   000039   540F         ANL     A,#0xf
   \   00003B   FD           MOV     R5,A
    329              lcd_buf[i++] = ch + (( ch < 10 ) ? '0' : '7');
   \   00003C   8C..         MOV     ?V0 + 1,R4
   \   00003E   0C           INC     R4
   \   00003F   C3           CLR     C
   \   000040   940A         SUBB    A,#0xa
   \   000042   5004         JNC     ??zmain_dev_info_3
   \   000044   7A30         MOV     R2,#0x30
   \   000046   8002         SJMP    ??zmain_dev_info_4
   \                     ??zmain_dev_info_3:
   \   000048   7A37         MOV     R2,#0x37
   \                     ??zmain_dev_info_4:
   \   00004A   EA           MOV     A,R2
   \   00004B   2D           ADD     A,R5
   \   00004C   C0E0         PUSH    A
   \   00004E   85....       MOV     ?V0 + 2,?V0 + 1
   \   000051   12....       LCALL   ?Subroutine1 & 0xFFFF
    330            }
   \                     ??CrossCallReturnLabel_4:
   \   000054   D0E0         POP     A
   \   000056   F0           MOVX    @DPTR,A
   \   000057   E8           MOV     A,R0
   \   000058   24FF         ADD     A,#-0x1
   \   00005A   18           DEC     R0
   \   00005B   E9           MOV     A,R1
   \   00005C   34FF         ADDC    A,#-0x1
   \   00005E   F9           MOV     R1,A
   \   00005F   EC           MOV     A,R4
   \   000060   C3           CLR     C
   \   000061   9410         SUBB    A,#0x10
   \   000063   40AB         JC      ??zmain_dev_info_0
    331            lcd_buf[Z_EXTADDR_LEN*2] = '\0';
   \   000065   7410         MOV     A,#0x10
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   E4           CLR     A
   \   00006B   F0           MOVX    @DPTR,A
    332            
    333            //DrawRectFill(0 ,0 ,128,128,GREEN);//±³¾°É«
    334            DrawRectFill(3 ,20 ,122,106,WHITE); //ÏÔÊ¾´°¿Ú
   \   00006C                ; Setup parameters for call to function DrawRectFill
   \   00006C   75..FF       MOV     ?V0 + 2,#-0x1
   \   00006F   75..FF       MOV     ?V0 + 3,#-0x1
   \   000072   78..         MOV     R0,#?V0 + 2
   \   000074   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000077   75..6A       MOV     ?V0 + 2,#0x6a
   \   00007A   75..00       MOV     ?V0 + 3,#0x0
   \   00007D   78..         MOV     R0,#?V0 + 2
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000082   75..7A       MOV     ?V0 + 2,#0x7a
   \   000085   78..         MOV     R0,#?V0 + 2
   \   000087   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008A   7C14         MOV     R4,#0x14
   \   00008C   7D00         MOV     R5,#0x0
   \   00008E   7A03         MOV     R2,#0x3
   \   000090   7B00         MOV     R3,#0x0
   \   000092   12....       LCALL   ??DrawRectFill?relay
   \   000095   7406         MOV     A,#0x6
   \   000097   12....       LCALL   ?DEALLOC_XSTACK8
    335             
    336            Color    = BLACK; //Ç°¾°É«
   \   00009A   90....       MOV     DPTR,#Color
   \   00009D   E4           CLR     A
   \   00009E   F0           MOVX    @DPTR,A
   \   00009F   A3           INC     DPTR
   \   0000A0   F0           MOVX    @DPTR,A
    337            Color_BK = GREEN; //±³¾°É«
   \   0000A1   90....       MOV     DPTR,#Color_BK
   \   0000A4   74E0         MOV     A,#-0x20
   \   0000A6   F0           MOVX    @DPTR,A
   \   0000A7   A3           INC     DPTR
   \   0000A8   7407         MOV     A,#0x7
   \   0000AA   F0           MOVX    @DPTR,A
    338            LCD_write_EN_string(64-7*osal_strlen((char *)AppTitle)/2,3,AppTitle); //ÏÔÊ¾±êÌâ
   \   0000AB                ; Setup parameters for call to function LCD_write_EN_string
   \   0000AB   7A03         MOV     R2,#0x3
   \   0000AD   EA           MOV     A,R2
   \   0000AE   C0E0         PUSH    A
   \   0000B0                ; Setup parameters for call to function osal_strlen
   \   0000B0   7A..         MOV     R2,#AppTitle & 0xff
   \   0000B2   7B..         MOV     R3,#(AppTitle >> 8) & 0xff
   \   0000B4   12....       LCALL   ??osal_strlen?relay
   \   0000B7   EA           MOV     A,R2
   \   0000B8   75F007       MOV     B,#0x7
   \   0000BB   A4           MUL     AB
   \   0000BC   FA           MOV     R2,A
   \   0000BD   A8F0         MOV     R0,B
   \   0000BF   75F007       MOV     B,#0x7
   \   0000C2   EB           MOV     A,R3
   \   0000C3   A4           MUL     AB
   \   0000C4   28           ADD     A,R0
   \   0000C5   FB           MOV     R3,A
   \   0000C6   EA           MOV     A,R2
   \   0000C7   F8           MOV     R0,A
   \   0000C8   EB           MOV     A,R3
   \   0000C9   F9           MOV     R1,A
   \   0000CA   7A02         MOV     R2,#0x2
   \   0000CC   7B00         MOV     R3,#0x0
   \   0000CE   12....       LCALL   ?S_DIV_MOD
   \   0000D1   7440         MOV     A,#0x40
   \   0000D3   C3           CLR     C
   \   0000D4   98           SUBB    A,R0
   \   0000D5   F9           MOV     R1,A
   \   0000D6   7C..         MOV     R4,#AppTitle & 0xff
   \   0000D8   74..         MOV     A,#(AppTitle >> 8) & 0xff
   \   0000DA   FD           MOV     R5,A
   \   0000DB   D0E0         POP     A
   \   0000DD   FA           MOV     R2,A
   \   0000DE   12....       LCALL   ??LCD_write_EN_string?relay
    339            
    340            Color    = BLUE;  //Ç°¾°É«
   \   0000E1   90....       MOV     DPTR,#Color
   \   0000E4   741F         MOV     A,#0x1f
   \   0000E6   F0           MOVX    @DPTR,A
   \   0000E7   A3           INC     DPTR
   \   0000E8   E4           CLR     A
   \   0000E9   F0           MOVX    @DPTR,A
    341            Color_BK = WHITE; //±³¾°É«
   \   0000EA   90....       MOV     DPTR,#Color_BK
   \   0000ED   74FF         MOV     A,#-0x1
   \   0000EF   F0           MOVX    @DPTR,A
   \   0000F0   A3           INC     DPTR
   \   0000F1   F0           MOVX    @DPTR,A
    342            HalLcdWriteString( "IEEE: ", HAL_LCD_LINE_3 );                 
   \   0000F2                ; Setup parameters for call to function HalLcdWriteString
   \   0000F2   7902         MOV     R1,#0x2
   \   0000F4   7A..         MOV     R2,#`?<Constant "IEEE: ">` & 0xff
   \   0000F6   7B..         MOV     R3,#(`?<Constant "IEEE: ">` >> 8) & 0xff
   \   0000F8   12....       LCALL   ??HalLcdWriteString?relay
    343            HalLcdWriteString( (char*)lcd_buf, HAL_LCD_LINE_4 );
   \   0000FB                ; Setup parameters for call to function HalLcdWriteString
   \   0000FB   7903         MOV     R1,#0x3
   \   0000FD   85..82       MOV     DPL,?XSP + 0
   \   000100   85..83       MOV     DPH,?XSP + 1
   \   000103   AA82         MOV     R2,DPL
   \   000105   AB83         MOV     R3,DPH
   \   000107   12....       LCALL   ??HalLcdWriteString?relay
    344            
    345            Color    = RED; 
   \   00010A   90....       MOV     DPTR,#Color
   \   00010D   E4           CLR     A
   \   00010E   F0           MOVX    @DPTR,A
   \   00010F   A3           INC     DPTR
   \   000110   74F8         MOV     A,#-0x8
   \   000112   F0           MOVX    @DPTR,A
    346            LCD_write_CN_string(9, 110, "ÉîÛÚÊĞ°²ÁªµÂ¿Æ¼¼"); 
   \   000113                ; Setup parameters for call to function LCD_write_CN_string
   \   000113   7C..         MOV     R4,#`?<Constant "\\311\\356\\333\\332\\312\\320\\260\\262\\3` & 0xff
   \   000115   7D..         MOV     R5,#(`?<Constant "\\311\\356\\333\\332\\312\\320\\260\\262\\3` >> 8) & 0xff
   \   000117   7A6E         MOV     R2,#0x6e
   \   000119   7909         MOV     R1,#0x9
   \   00011B   12....       LCALL   ??LCD_write_CN_string?relay
    347          #endif
    348          }
   \   00011E   7411         MOV     A,#0x11
   \   000120   12....       LCALL   ?DEALLOC_XSTACK8
   \   000123   7F04         MOV     R7,#0x4
   \   000125   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E582         MOV     A,DPL
   \   000008   25..         ADD     A,?V0 + 2
   \   00000A   F582         MOV     DPL,A
   \   00000C   E583         MOV     A,DPH
   \   00000E   3400         ADDC    A,#0x0
   \   000010   F583         MOV     DPH,A
   \   000012   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??main?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    main

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zmain_ext_addr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zmain_ext_addr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zmain_dev_info?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zmain_dev_info

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "IEEE: ">`:
   \   000000   49454545     DB "IEEE: "
   \            3A2000  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\311\\356\\333\\332\\312\\320\\260\\262\\3`:
   \   000000   C9EEDBDA     DB "\311\356\333\332\312\320\260\262\301\252\265\302\277\306\274\274"
   \            CAD0B0B2
   \            C1AAB5C2
   \            BFC6BCBC
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "TexasInstruments">`:
   \   000000   54657861     DB "TexasInstruments"
   \            73496E73
   \            7472756D
   \            656E7473
   \            00      
    349          
    350          #ifdef LCD_SUPPORTED
    351          /*********************************************************************
    352           * @fn      zmain_lcd_init
    353           * @brief   Initialize LCD at start up.
    354           * @return  none
    355           *********************************************************************/
    356          static void zmain_lcd_init ( void )
    357          {
    358          #ifdef SERIAL_DEBUG_SUPPORTED
    359            {
    360              HalLcdWriteString( "TexasInstruments", HAL_LCD_LINE_1 );
    361          
    362          #if defined( MT_MAC_FUNC )
    363          #if defined( ZDO_COORDINATOR )
    364                HalLcdWriteString( "MAC-MT Coord", HAL_LCD_LINE_2 );
    365          #else
    366                HalLcdWriteString( "MAC-MT Device", HAL_LCD_LINE_2 );
    367          #endif // ZDO
    368          #elif defined( MT_NWK_FUNC )
    369          #if defined( ZDO_COORDINATOR )
    370                HalLcdWriteString( "NWK Coordinator", HAL_LCD_LINE_2 );
    371          #else
    372                HalLcdWriteString( "NWK Device", HAL_LCD_LINE_2 );
    373          #endif // ZDO
    374          #endif // MT_FUNC
    375            }
    376          #endif // SERIAL_DEBUG_SUPPORTED
    377          }
    378          #endif
    379          
    380          /*********************************************************************
    381          *********************************************************************/

   Maximum stack usage in bytes:

     Function                 ISTACK PSTACK XSTACK
     --------                 ------ ------ ------
     main                         0      0      0
       -> osal_int_disable        0      0      0
       -> HalAdcCheckVdd          0      0      0
       -> InitBoard               0      0      0
       -> HalDriverInit           0      0      0
       -> osal_nv_init            0      0      0
       -> ZMacInit                0      0      0
       -> zmain_ext_addr          0      0      0
       -> zgInit                  0      0      0
       -> osal_init_system        0      0      0
       -> osal_int_enable         0      0      0
       -> InitBoard               0      0      0
       -> zmain_dev_info          0      0      0
       -> HalLcdWriteString       0      0      0
       -> osal_start_system       0      0      0
     zmain_dev_info               1      0     35
       -> DrawRectFill            0      0     70
       -> osal_strlen             2      0     58
       -> LCD_write_EN_string     0      0     58
       -> HalLcdWriteString       0      0     58
       -> HalLcdWriteString       0      0     58
       -> LCD_write_CN_string     0      0     58
     zmain_ext_addr               2      0     23
       -> osal_nv_item_init       0      0     42
       -> osal_nv_read            0      0     46
       -> osal_memcmp             0      0     44
       -> HalFlashRead            0      0     42
       -> osal_memcmp             0      0     44
       -> osal_memcmp             0      0     44
       -> osal_memcpy             0      0     44
       -> osal_nv_write           0      0     46
       -> ZMacSetReq              0      0     38
       -> osal_rand               0      0     38


   Segment part sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     P0INP                                             1
     _A_P1                                             1
     SLEEPSTA                                          1
     CLKCONSTA                                         1
     SLEEPCMD                                          1
     CLKCONCMD                                         1
     P1DIR                                             1
     main                                            139
     zmain_ext_addr                                  381
     ?Subroutine0                                     15
     zmain_dev_info                                  296
     ?Subroutine1                                     19
     ??main?relay                                      6
     ??zmain_ext_addr?relay                            6
     ??zmain_dev_info?relay                            6
     ?<Constant {255, 255, 255, 255, 255, 255, 255,    8
     ?<Constant "IEEE: ">                              7
     ?<Constant "\311\356\333\332\312\320\260\262\3   17
     ?<Constant "TexasInstruments">                   17

 
 850 bytes in segment BANKED_CODE
  18 bytes in segment BANK_RELAYS
   7 bytes in segment SFR_AN
  49 bytes in segment XDATA_ROM_C
 
 868 bytes of CODE  memory
  49 bytes of CONST memory
   0 bytes of DATA  memory (+ 7 bytes shared)

Errors: none
Warnings: none
