###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         18/Jun/2019  22:50:00 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+Æ #
#                          øÌå+¹âÕÕ\ZStack-2.5.1a\Components\mt\MT_UART.c     #
#    Command line       =  -f "F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª #
#                          ¶È+ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoo #
#                          rd.cfg" (-DCPU32MHZ -DROOT=__near_func             #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f "F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª #
#                          ¶È+ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCon #
#                          fig.cfg" (-DZIGBEEPRO -DSECURE=0                   #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x1234                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "F:\Zigbee\µÚ5ÕÂ            #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZStack- #
#                          2.5.1a\Components\mt\MT_UART.c" -D ZTOOL_P1 -D     #
#                          xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D        #
#                          LCD_SUPPORTED=DEBUG -lC "F:\Zigbee\µÚ5ÕÂ           #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          CoordinatorEB\List\" -lA "F:\Zigbee\µÚ5ÕÂ          #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          CoordinatorEB\List\" --diag_suppress Pe001,Pa010   #
#                          -o "F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª #
#                          ¶È+ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\CoordinatorEB\Obj\" -e         #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª #
#                          ¶È+ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\" -I "F:\Zigbee\µÚ5ÕÂ          #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\Source\" -I "F:\Zigbee\µÚ5ÕÂ                    #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\ZMain\TI2530DB\" -I "F:\Zigbee\µÚ5ÕÂ      #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\hal\include\" -I         #
#                          "F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ #
#                          ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\..\..\Components\hal\tar #
#                          get\CC2530EB\" -I "F:\Zigbee\µÚ5ÕÂ                 #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\mac\include\" -I         #
#                          "F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ #
#                          ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\..\..\Components\mac\hig #
#                          h_level\" -I "F:\Zigbee\µÚ5ÕÂ                      #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\mac\low_level\srf04\"    #
#                          -I "F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª #
#                          ¶È+ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\..\..\Components\mac\ #
#                          low_level\srf04\single_chip\" -I "F:\Zigbee\µÚ5ÕÂ  #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\mt\" -I                  #
#                          "F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ #
#                          ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\..\..\Components\osal\in #
#                          clude\" -I "F:\Zigbee\µÚ5ÕÂ                        #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\services\saddr\" -I      #
#                          "F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ #
#                          ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\..\..\Components\service #
#                          s\sdata\" -I "F:\Zigbee\µÚ5ÕÂ                      #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\stack\af\" -I            #
#                          "F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ #
#                          ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\..\..\Components\stack\n #
#                          wk\" -I "F:\Zigbee\µÚ5ÕÂ                           #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\stack\sapi\" -I          #
#                          "F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ #
#                          ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\..\..\Components\stack\s #
#                          ec\" -I "F:\Zigbee\µÚ5ÕÂ                           #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\stack\sys\" -I           #
#                          "F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ #
#                          ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\..\..\Components\stack\z #
#                          do\" -I "F:\Zigbee\µÚ5ÕÂ                           #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\zmac\" -I                #
#                          "F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ #
#                          ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8 #
#                          w\" -Ohz --require_prototypes                      #
#    List file          =  F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+Æ #
#                          øÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples\Sam #
#                          pleApp\CC2530DB\CoordinatorEB\List\MT_UART.lst     #
#    Object file        =  F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+Æ #
#                          øÌå+¹âÕÕ\ZStack-2.5.1a\Projects\zstack\Samples\Sam #
#                          pleApp\CC2530DB\CoordinatorEB\Obj\MT_UART.r51      #
#                                                                             #
#                                                                             #
###############################################################################

F:\Zigbee\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\33.ÊªÊª¶È+ÆøÌå+¹âÕÕ\ZStack-2.5.1a\Components\mt\MT_UART.c
      1          /***************************************************************************************************
      2            Filename:       MT_UART.c
      3            Revised:        $Date: 2009-03-12 16:25:22 -0700 (Thu, 12 Mar 2009) $
      4            Revision:       $Revision: 19404 $
      5          
      6            Description:  This module handles anything dealing with the serial port.
      7          
      8            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License").  You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product.  Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.anlde.com.
     37          
     38          ***************************************************************************************************/
     39          
     40          /***************************************************************************************************
     41           * INCLUDES
     42           ***************************************************************************************************/
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "hal_uart.h"
     46          #include "MT.h"
     47          #include "MT_UART.h"
     48          #include "OSAL_Memory.h"
     49          
     50          
     51          /***************************************************************************************************
     52           * MACROS
     53           ***************************************************************************************************/
     54          
     55          /***************************************************************************************************
     56           * CONSTANTS
     57           ***************************************************************************************************/
     58          /* State values for ZTool protocal */
     59          #define SOP_STATE      0x00
     60          #define CMD_STATE1     0x01
     61          #define CMD_STATE2     0x02
     62          #define LEN_STATE      0x03
     63          #define DATA_STATE     0x04
     64          #define FCS_STATE      0x05
     65          
     66          /***************************************************************************************************
     67           *                                         GLOBAL VARIABLES
     68           ***************************************************************************************************/
     69          /* Used to indentify the application ID for osal task */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     70          byte App_TaskID;
   \                     App_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     71          
     72          /* ZTool protocal parameters */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     73          uint8 state;
   \                     state:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     74          uint8  CMD_Token[2];
   \                     CMD_Token:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     75          uint8  LEN_Token;
   \                     LEN_Token:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     76          uint8  FSC_Token;
   \                     FSC_Token:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     77          mtOSALSerialData_t  *pMsg;
   \                     pMsg:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     78          uint8  tempDataLen;
   \                     tempDataLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     79          
     80          #if defined (ZAPP_P1) || defined (ZAPP_P2)
     81          uint16  MT_UartMaxZAppBufLen;
     82          bool    MT_UartZAppRxStatus;
     83          #endif
     84          
     85          
     86          /***************************************************************************************************
     87           *                                          LOCAL FUNCTIONS
     88           ***************************************************************************************************/
     89          
     90          /***************************************************************************************************
     91           * @fn      MT_UartInit
     92           *
     93           * @brief   Initialize MT with UART support
     94           *
     95           * @param   None
     96           *
     97           * @return  None
     98          ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     99          void MT_UartInit ()
   \                     MT_UartInit:
    100          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 29
   \   000004   74E3         MOV     A,#-0x1d
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    101            halUARTCfg_t uartConfig;
    102          
    103            /* Initialize APP ID */
    104            App_TaskID = 0;
   \   000009   90....       MOV     DPTR,#App_TaskID
   \   00000C   E4           CLR     A
   \   00000D   F0           MOVX    @DPTR,A
    105          
    106            /* UART Configuration */
    107            uartConfig.configured           = TRUE;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   04           INC     A
   \   000015   F0           MOVX    @DPTR,A
    108            uartConfig.baudRate             = MT_UART_DEFAULT_BAUDRATE;
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   7404         MOV     A,#0x4
   \   00001B   F0           MOVX    @DPTR,A
    109            uartConfig.flowControl          = MT_UART_DEFAULT_OVERFLOW;
   \   00001C   7402         MOV     A,#0x2
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   E4           CLR     A
   \   000022   F0           MOVX    @DPTR,A
    110            uartConfig.flowControlThreshold = MT_UART_DEFAULT_THRESHOLD;
   \   000023   7403         MOV     A,#0x3
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   7440         MOV     A,#0x40
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   A3           INC     DPTR
   \   00002C   E4           CLR     A
   \   00002D   F0           MOVX    @DPTR,A
    111            uartConfig.rx.maxBufSize        = MT_UART_DEFAULT_MAX_RX_BUFF;
   \   00002E   740A         MOV     A,#0xa
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   7480         MOV     A,#-0x80
   \   000035   F0           MOVX    @DPTR,A
   \   000036   A3           INC     DPTR
   \   000037   E4           CLR     A
   \   000038   F0           MOVX    @DPTR,A
    112            uartConfig.tx.maxBufSize        = MT_UART_DEFAULT_MAX_TX_BUFF;
   \   000039   7412         MOV     A,#0x12
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   7480         MOV     A,#-0x80
   \   000040   F0           MOVX    @DPTR,A
   \   000041   A3           INC     DPTR
   \   000042   E4           CLR     A
   \   000043   F0           MOVX    @DPTR,A
    113            uartConfig.idleTimeout          = MT_UART_DEFAULT_IDLE_TIMEOUT;
   \   000044   7405         MOV     A,#0x5
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   7406         MOV     A,#0x6
   \   00004B   F0           MOVX    @DPTR,A
    114            uartConfig.intEnable            = TRUE;
   \   00004C   7416         MOV     A,#0x16
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   7401         MOV     A,#0x1
   \   000053   F0           MOVX    @DPTR,A
    115          #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
    116            uartConfig.callBackFunc         = MT_UartProcessZToolData;
   \   000054   741B         MOV     A,#0x1b
   \   000056   12....       LCALL   ?XSTACK_DISP0_8
   \   000059   74..         MOV     A,#??MT_UartProcessZToolData?relay & 0xff
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C   A3           INC     DPTR
   \   00005D   74..         MOV     A,#(??MT_UartProcessZToolData?relay >> 8) & 0xff
   \   00005F   F0           MOVX    @DPTR,A
    117          #elif defined (ZAPP_P1) || defined (ZAPP_P2)
    118            uartConfig.callBackFunc         = MT_UartProcessZAppData;
    119          #else
    120            uartConfig.callBackFunc         = NULL;
    121          #endif
    122          
    123            /* Start UART */
    124          #if defined (MT_UART_DEFAULT_PORT)
    125            HalUARTOpen (MT_UART_DEFAULT_PORT, &uartConfig);
   \   000060                ; Setup parameters for call to function HalUARTOpen
   \   000060   85..82       MOV     DPL,?XSP + 0
   \   000063   85..83       MOV     DPH,?XSP + 1
   \   000066   AA82         MOV     R2,DPL
   \   000068   AB83         MOV     R3,DPH
   \   00006A   7900         MOV     R1,#0x0
   \   00006C   12....       LCALL   ??HalUARTOpen?relay
    126          #else
    127            /* Silence IAR compiler warning */
    128            (void)uartConfig;
    129          #endif
    130          
    131            /* Initialize for ZApp */
    132          #if defined (ZAPP_P1) || defined (ZAPP_P2)
    133            /* Default max bytes that ZAPP can take */
    134            MT_UartMaxZAppBufLen  = 1;
    135            MT_UartZAppRxStatus   = MT_UART_ZAPP_RX_READY;
    136          #endif
    137          
    138          }
   \   00006F   741D         MOV     A,#0x1d
   \   000071   12....       LCALL   ?DEALLOC_XSTACK8
   \   000074                REQUIRE ?Subroutine0
   \   000074                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    139          
    140          /***************************************************************************************************
    141           * @fn      MT_SerialRegisterTaskID
    142           *
    143           * @brief   This function registers the taskID of the application so it knows
    144           *          where to send the messages whent they come in.
    145           *
    146           * @param   void
    147           *
    148           * @return  void
    149           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    150          void MT_UartRegisterTaskID( byte taskID )
   \                     MT_UartRegisterTaskID:
    151          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    152            App_TaskID = taskID;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#App_TaskID
   \   000008   F0           MOVX    @DPTR,A
    153          }
   \   000009   80..         SJMP    ?Subroutine0
    154          
    155          /***************************************************************************************************
    156           * @fn      SPIMgr_CalcFCS
    157           *
    158           * @brief   Calculate the FCS of a message buffer by XOR'ing each byte.
    159           *          Remember to NOT include SOP and FCS fields, so start at the CMD field.
    160           *
    161           * @param   byte *msg_ptr - message pointer
    162           * @param   byte len - length (in bytes) of message
    163           *
    164           * @return  result byte
    165           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    166          byte MT_UartCalcFCS( uint8 *msg_ptr, uint8 len )
   \                     MT_UartCalcFCS:
    167          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FC           MOV     R4,A
    168            byte x;
    169            byte xorResult;
    170          
    171            xorResult = 0;
   \   000006   7900         MOV     R1,#0x0
    172          
    173            for ( x = 0; x < len; x++, msg_ptr++ )
   \   000008   7800         MOV     R0,#0x0
   \   00000A   800E         SJMP    ??MT_UartCalcFCS_0
    174              xorResult = xorResult ^ *msg_ptr;
   \                     ??MT_UartCalcFCS_1:
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   E0           MOVX    A,@DPTR
   \   000011   C9           XCH     A,R1
   \   000012   69           XRL     A,R1
   \   000013   F9           MOV     R1,A
   \   000014   08           INC     R0
   \   000015   A3           INC     DPTR
   \   000016   AA82         MOV     R2,DPL
   \   000018   AB83         MOV     R3,DPH
   \                     ??MT_UartCalcFCS_0:
   \   00001A   E8           MOV     A,R0
   \   00001B   C3           CLR     C
   \   00001C   9C           SUBB    A,R4
   \   00001D   40ED         JC      ??MT_UartCalcFCS_1
    175          
    176            return ( xorResult );
   \   00001F   80..         SJMP    ?Subroutine0
    177          }
    178          
    179          
    180          /***************************************************************************************************
    181           * @fn      MT_UartProcessZToolData
    182           *
    183           * @brief   | SOP | Data Length  |   CMD   |   Data   |  FCS  |
    184           *          |  1  |     1        |    2    |  0-Len   |   1   |
    185           *
    186           *          Parses the data and determine either is SPI or just simply serial data
    187           *          then send the data to correct place (MT or APP)
    188           *
    189           * @param   port     - UART port
    190           *          event    - Event that causes the callback
    191           *
    192           *
    193           * @return  None
    194           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    195          void MT_UartProcessZToolData ( uint8 port, uint8 event )
   \                     MT_UartProcessZToolData:
    196          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    197            uint8  ch;
    198            uint8  bytesInRxBuffer;
    199            
    200            (void)event;  // Intentionally unreferenced parameter
   \   00000C   802D         SJMP    ??MT_UartProcessZToolData_0
    201          
    202            while (Hal_UART_RxBufLen(port))
    203            {
    204              HalUARTRead (port, &ch, 1);
    205          
    206              switch (state)
    207              {
    208                case SOP_STATE:
    209                  if (ch == MT_UART_SOF)
    210                    state = LEN_STATE;
    211                  break;
    212          
    213                case LEN_STATE:
    214                  LEN_Token = ch;
    215          
    216                  tempDataLen = 0;
    217          
    218                  /* Allocate memory for the data */
    219                  pMsg = (mtOSALSerialData_t *)osal_msg_allocate( sizeof ( mtOSALSerialData_t ) +
    220                                                                  MT_RPC_FRAME_HDR_SZ + LEN_Token );
    221          
    222                  if (pMsg)
    223                  {
    224                    /* Fill up what we can */
    225                    pMsg->hdr.event = CMD_SERIAL_MSG;
   \                     ??MT_UartProcessZToolData_1:
   \   00000E   12....       LCALL   ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000011   7401         MOV     A,#0x1
   \   000013   F0           MOVX    @DPTR,A
    226                    pMsg->msg = (uint8*)(pMsg+1);
   \   000014   90....       MOV     DPTR,#pMsg
   \   000017   E0           MOVX    A,@DPTR
   \   000018   2404         ADD     A,#0x4
   \   00001A   F8           MOV     R0,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   3400         ADDC    A,#0x0
   \   00001F   F9           MOV     R1,A
   \   000020   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000023   E8           MOV     A,R0
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
   \   000026   E9           MOV     A,R1
   \   000027   12....       LCALL   ?Subroutine5 & 0xFFFF
    227                    pMsg->msg[MT_RPC_POS_LEN] = LEN_Token;
   \                     ??CrossCallReturnLabel_8:
   \   00002A   C0E0         PUSH    A
   \   00002C   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00002F   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000032   D0E0         POP     A
   \   000034   F0           MOVX    @DPTR,A
    228                    state = CMD_STATE1;
   \   000035   90....       MOV     DPTR,#state
   \   000038   7401         MOV     A,#0x1
   \                     ??MT_UartProcessZToolData_2:
   \   00003A   F0           MOVX    @DPTR,A
    229                  }
    230                  else
    231                  {
    232                    state = SOP_STATE;
    233                    return;
    234                  }
    235                  break;
   \                     ??MT_UartProcessZToolData_0:
   \   00003B                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   00003B   EE           MOV     A,R6
   \   00003C   F9           MOV     R1,A
   \   00003D   12....       LCALL   ??Hal_UART_RxBufLen?relay
   \   000040   8B..         MOV     ?V0 + 1,R3
   \   000042   EA           MOV     A,R2
   \   000043   45..         ORL     A,?V0 + 1
   \   000045   607A         JZ      ??MT_UartProcessZToolData_3
   \   000047                ; Setup parameters for call to function HalUARTRead
   \   000047   7C01         MOV     R4,#0x1
   \   000049   7D00         MOV     R5,#0x0
   \   00004B   85..82       MOV     DPL,?XSP + 0
   \   00004E   85..83       MOV     DPH,?XSP + 1
   \   000051   AA82         MOV     R2,DPL
   \   000053   AB83         MOV     R3,DPH
   \   000055   EE           MOV     A,R6
   \   000056   F9           MOV     R1,A
   \   000057   12....       LCALL   ??HalUARTRead?relay
   \   00005A   90....       MOV     DPTR,#state
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   6017         JZ      ??MT_UartProcessZToolData_4
   \   000060   14           DEC     A
   \   000061   6068         JZ      ??MT_UartProcessZToolData_5
   \   000063   14           DEC     A
   \   000064   607C         JZ      ??MT_UartProcessZToolData_6
   \   000066   14           DEC     A
   \   000067   6020         JZ      ??MT_UartProcessZToolData_7
   \   000069   14           DEC     A
   \   00006A   7003         JNZ     $+5
   \   00006C   02....       LJMP    ??MT_UartProcessZToolData_8 & 0xFFFF
   \   00006F   14           DEC     A
   \   000070   7003         JNZ     $+5
   \   000072   02....       LJMP    ??MT_UartProcessZToolData_9 & 0xFFFF
   \   000075   80C4         SJMP    ??MT_UartProcessZToolData_0
   \                     ??MT_UartProcessZToolData_4:
   \   000077   85..82       MOV     DPL,?XSP + 0
   \   00007A   85..83       MOV     DPH,?XSP + 1
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   64FE         XRL     A,#0xfe
   \   000080   70B9         JNZ     ??MT_UartProcessZToolData_0
   \   000082   90....       MOV     DPTR,#state
   \   000085   7403         MOV     A,#0x3
   \   000087   80B1         SJMP    ??MT_UartProcessZToolData_2
   \                     ??MT_UartProcessZToolData_7:
   \   000089   85..82       MOV     DPL,?XSP + 0
   \   00008C   85..83       MOV     DPH,?XSP + 1
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   90....       MOV     DPTR,#LEN_Token
   \   000093   F0           MOVX    @DPTR,A
   \   000094   90....       MOV     DPTR,#tempDataLen
   \   000097   E4           CLR     A
   \   000098   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00009B   2407         ADD     A,#0x7
   \   00009D   FA           MOV     R2,A
   \   00009E   E4           CLR     A
   \   00009F   3400         ADDC    A,#0x0
   \   0000A1   FB           MOV     R3,A
   \   0000A2   12....       LCALL   ??osal_msg_allocate?relay
   \   0000A5   90....       MOV     DPTR,#pMsg
   \   0000A8   EA           MOV     A,R2
   \   0000A9   F0           MOVX    @DPTR,A
   \   0000AA   A3           INC     DPTR
   \   0000AB   EB           MOV     A,R3
   \   0000AC   F0           MOVX    @DPTR,A
   \   0000AD   90....       MOV     DPTR,#pMsg
   \   0000B0   E0           MOVX    A,@DPTR
   \   0000B1   F8           MOV     R0,A
   \   0000B2   A3           INC     DPTR
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   F9           MOV     R1,A
   \   0000B5   E8           MOV     A,R0
   \   0000B6   49           ORL     A,R1
   \   0000B7   6003         JZ      $+5
   \   0000B9   02....       LJMP    ??MT_UartProcessZToolData_1 & 0xFFFF
   \   0000BC   90....       MOV     DPTR,#state
   \   0000BF   E4           CLR     A
   \   0000C0   F0           MOVX    @DPTR,A
   \                     ??MT_UartProcessZToolData_3:
   \   0000C1   7401         MOV     A,#0x1
   \   0000C3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C6   7F02         MOV     R7,#0x2
   \   0000C8   02....       LJMP    ?BANKED_LEAVE_XDATA
    236          
    237                case CMD_STATE1:
    238                  pMsg->msg[MT_RPC_POS_CMD0] = ch;
   \                     ??MT_UartProcessZToolData_5:
   \   0000CB   85..82       MOV     DPL,?XSP + 0
   \   0000CE   85..83       MOV     DPH,?XSP + 1
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   C0E0         PUSH    A
   \   0000D4   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0000D7   D0E0         POP     A
   \   0000D9   F0           MOVX    @DPTR,A
    239                  state = CMD_STATE2;
   \   0000DA   90....       MOV     DPTR,#state
   \   0000DD   7402         MOV     A,#0x2
   \   0000DF   02....       LJMP    ??MT_UartProcessZToolData_2 & 0xFFFF
    240                  break;
    241          
    242                case CMD_STATE2:
    243                  pMsg->msg[MT_RPC_POS_CMD1] = ch;
   \                     ??MT_UartProcessZToolData_6:
   \   0000E2   85..82       MOV     DPL,?XSP + 0
   \   0000E5   85..83       MOV     DPH,?XSP + 1
   \   0000E8   E0           MOVX    A,@DPTR
   \   0000E9   C0E0         PUSH    A
   \   0000EB   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0000EE   A3           INC     DPTR
   \   0000EF   D0E0         POP     A
   \   0000F1   12....       LCALL   ?Subroutine5 & 0xFFFF
    244                  /* If there is no data, skip to FCS state */
    245                  if (LEN_Token)
   \                     ??CrossCallReturnLabel_10:
   \   0000F4   7003         JNZ     $+5
   \   0000F6   02....       LJMP    ??MT_UartProcessZToolData_10 & 0xFFFF
    246                  {
    247                    state = DATA_STATE;
   \   0000F9   90....       MOV     DPTR,#state
   \   0000FC   7404         MOV     A,#0x4
   \   0000FE   02....       LJMP    ??MT_UartProcessZToolData_2 & 0xFFFF
    248                  }
    249                  else
    250                  {
    251                    state = FCS_STATE;
    252                  }
    253                  break;
    254          
    255                case DATA_STATE:
    256          
    257                  /* Fill in the buffer the first byte of the data */
    258                  pMsg->msg[MT_RPC_FRAME_HDR_SZ + tempDataLen++] = ch;
   \                     ??MT_UartProcessZToolData_8:
   \   000101   85..82       MOV     DPL,?XSP + 0
   \   000104   85..83       MOV     DPH,?XSP + 1
   \   000107   E0           MOVX    A,@DPTR
   \   000108   C0E0         PUSH    A
   \   00010A   90....       MOV     DPTR,#tempDataLen
   \   00010D   E0           MOVX    A,@DPTR
   \   00010E   F8           MOV     R0,A
   \   00010F   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000112   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000115   D0E0         POP     A
   \   000117   F0           MOVX    @DPTR,A
   \   000118   90....       MOV     DPTR,#tempDataLen
   \   00011B   E0           MOVX    A,@DPTR
   \   00011C   04           INC     A
   \   00011D   F0           MOVX    @DPTR,A
    259          
    260                  /* Check number of bytes left in the Rx buffer */
    261                  bytesInRxBuffer = Hal_UART_RxBufLen(port);
   \   00011E                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   00011E   EE           MOV     A,R6
   \   00011F   F9           MOV     R1,A
   \   000120   12....       LCALL   ??Hal_UART_RxBufLen?relay
   \   000123   EA           MOV     A,R2
   \   000124   FF           MOV     R7,A
    262          
    263                  /* If the remain of the data is there, read them all, otherwise, just read enough */
    264                  if (bytesInRxBuffer <= LEN_Token - tempDataLen)
   \   000125   90....       MOV     DPTR,#LEN_Token
   \   000128   E0           MOVX    A,@DPTR
   \   000129   F8           MOV     R0,A
   \   00012A   90....       MOV     DPTR,#tempDataLen
   \   00012D   E0           MOVX    A,@DPTR
   \   00012E   FA           MOV     R2,A
   \   00012F   E8           MOV     A,R0
   \   000130   C3           CLR     C
   \   000131   9A           SUBB    A,R2
   \   000132   F8           MOV     R0,A
   \   000133   95E0         SUBB    A,0xE0 /* A   */
   \   000135   F9           MOV     R1,A
   \   000136   8F..         MOV     ?V0 + 0,R7
   \   000138   C3           CLR     C
   \   000139   E8           MOV     A,R0
   \   00013A   95..         SUBB    A,?V0 + 0
   \   00013C   E9           MOV     A,R1
   \   00013D   9400         SUBB    A,#0x0
   \   00013F   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000141   65D0         XRL     A,PSW
   \   000143   33           RLC     A
   \   000144   4010         JC      ??MT_UartProcessZToolData_11
    265                  {
    266                    HalUARTRead (port, &pMsg->msg[MT_RPC_FRAME_HDR_SZ + tempDataLen], bytesInRxBuffer);
   \   000146                ; Setup parameters for call to function HalUARTRead
   \   000146   AC..         MOV     R4,?V0 + 0
   \   000148   7D00         MOV     R5,#0x0
   \   00014A   E0           MOVX    A,@DPTR
   \   00014B   F8           MOV     R0,A
   \   00014C   12....       LCALL   ?Subroutine1 & 0xFFFF
    267                    tempDataLen += bytesInRxBuffer;
   \                     ??CrossCallReturnLabel_0:
   \   00014F   90....       MOV     DPTR,#tempDataLen
   \   000152   E0           MOVX    A,@DPTR
   \   000153   2F           ADD     A,R7
   \   000154   8016         SJMP    ??MT_UartProcessZToolData_12
    268                  }
    269                  else
    270                  {
    271                    HalUARTRead (port, &pMsg->msg[MT_RPC_FRAME_HDR_SZ + tempDataLen], LEN_Token - tempDataLen);
   \                     ??MT_UartProcessZToolData_11:
   \   000156   E0           MOVX    A,@DPTR
   \   000157   F8           MOV     R0,A
   \   000158                ; Setup parameters for call to function HalUARTRead
   \   000158   90....       MOV     DPTR,#LEN_Token
   \   00015B   E0           MOVX    A,@DPTR
   \   00015C   C3           CLR     C
   \   00015D   98           SUBB    A,R0
   \   00015E   FC           MOV     R4,A
   \   00015F   95E0         SUBB    A,0xE0 /* A   */
   \   000161   FD           MOV     R5,A
   \   000162   12....       LCALL   ?Subroutine1 & 0xFFFF
    272                    tempDataLen += (LEN_Token - tempDataLen);
   \                     ??CrossCallReturnLabel_1:
   \   000165   90....       MOV     DPTR,#LEN_Token
   \   000168   E0           MOVX    A,@DPTR
   \   000169   90....       MOV     DPTR,#tempDataLen
   \                     ??MT_UartProcessZToolData_12:
   \   00016C   F0           MOVX    @DPTR,A
    273                  }
    274          
    275                  /* If number of bytes read is equal to data length, time to move on to FCS */
    276                  if ( tempDataLen == LEN_Token )
   \   00016D   E0           MOVX    A,@DPTR
   \   00016E   F8           MOV     R0,A
   \   00016F   90....       MOV     DPTR,#LEN_Token
   \   000172   E0           MOVX    A,@DPTR
   \   000173   68           XRL     A,R0
   \   000174   6003         JZ      $+5
   \   000176   02....       LJMP    ??MT_UartProcessZToolData_0 & 0xFFFF
   \                     ??MT_UartProcessZToolData_10:
   \   000179   90....       MOV     DPTR,#state
   \   00017C   7405         MOV     A,#0x5
   \   00017E   02....       LJMP    ??MT_UartProcessZToolData_2 & 0xFFFF
    277                      state = FCS_STATE;
    278          
    279                  break;
    280          
    281                case FCS_STATE:
    282          
    283                  FSC_Token = ch;
   \                     ??MT_UartProcessZToolData_9:
   \   000181   85..82       MOV     DPL,?XSP + 0
   \   000184   85..83       MOV     DPH,?XSP + 1
   \   000187   E0           MOVX    A,@DPTR
   \   000188   90....       MOV     DPTR,#FSC_Token
   \   00018B   12....       LCALL   ?Subroutine5 & 0xFFFF
    284          
    285                  /* Make sure it's correct */
    286                  if ((MT_UartCalcFCS ((uint8*)&pMsg->msg[0], MT_RPC_FRAME_HDR_SZ + LEN_Token) == FSC_Token))
   \                     ??CrossCallReturnLabel_11:
   \   00018E   2403         ADD     A,#0x3
   \   000190   F9           MOV     R1,A
   \   000191   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000194   FA           MOV     R2,A
   \   000195   A3           INC     DPTR
   \   000196   E0           MOVX    A,@DPTR
   \   000197   FB           MOV     R3,A
   \   000198   12....       LCALL   ??MT_UartCalcFCS?relay
   \   00019B   E9           MOV     A,R1
   \   00019C   F8           MOV     R0,A
   \   00019D   90....       MOV     DPTR,#FSC_Token
   \   0001A0   E0           MOVX    A,@DPTR
   \   0001A1   68           XRL     A,R0
   \   0001A2   90....       MOV     DPTR,#pMsg
   \   0001A5   700F         JNZ     ??MT_UartProcessZToolData_13
    287                  {
    288                    osal_msg_send( App_TaskID, (byte *)pMsg );
   \   0001A7                ; Setup parameters for call to function osal_msg_send
   \   0001A7   E0           MOVX    A,@DPTR
   \   0001A8   FA           MOV     R2,A
   \   0001A9   A3           INC     DPTR
   \   0001AA   E0           MOVX    A,@DPTR
   \   0001AB   FB           MOV     R3,A
   \   0001AC   90....       MOV     DPTR,#App_TaskID
   \   0001AF   E0           MOVX    A,@DPTR
   \   0001B0   F9           MOV     R1,A
   \   0001B1   12....       LCALL   ??osal_msg_send?relay
   \   0001B4   8008         SJMP    ??MT_UartProcessZToolData_14
    289                  }
    290                  else
    291                  {
    292                    /* deallocate the msg */
    293                    osal_msg_deallocate ( (uint8 *)pMsg );
   \                     ??MT_UartProcessZToolData_13:
   \   0001B6                ; Setup parameters for call to function osal_msg_deallocate
   \   0001B6   E0           MOVX    A,@DPTR
   \   0001B7   FA           MOV     R2,A
   \   0001B8   A3           INC     DPTR
   \   0001B9   E0           MOVX    A,@DPTR
   \   0001BA   FB           MOV     R3,A
   \   0001BB   12....       LCALL   ??osal_msg_deallocate?relay
    294                  }
    295          
    296                  /* Reset the state, send or discard the buffers at this point */
    297                  state = SOP_STATE;
   \                     ??MT_UartProcessZToolData_14:
   \   0001BE   90....       MOV     DPTR,#state
   \   0001C1   E4           CLR     A
   \   0001C2   02....       LJMP    ??MT_UartProcessZToolData_2 & 0xFFFF
    298          
    299                  break;
    300          
    301                default:
    302                 break;
    303              }
    304            }
    305          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_msg_allocate
   \   000001                ; Setup parameters for call to function MT_UartCalcFCS
   \   000001   90....       MOV     DPTR,#LEN_Token
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   90....       MOV     DPTR,#pMsg
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FA           MOV     R2,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F583         MOV     DPH,A
   \   000009   8A82         MOV     DPL,R2
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   90....       MOV     DPTR,#pMsg
   \   000003   E0           MOVX    A,@DPTR
   \   000004   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine10_0
   \   000002                ; // Fall through to label ??Subroutine10_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine10_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F583         MOV     DPH,A
   \   000003   8882         MOV     DPL,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000003   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000003   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000006   AA82         MOV     R2,DPL
   \   000008   AB83         MOV     R3,DPH
   \   00000A   EE           MOV     A,R6
   \   00000B   F9           MOV     R1,A
   \   00000C   12....       LCALL   ??HalUARTRead?relay
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   28           ADD     A,R0
   \   000002   FA           MOV     R2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   3400         ADDC    A,#0x0
   \   000007   8A82         MOV     DPL,R2
   \   000009   F583         MOV     DPH,A
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UartInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UartInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UartRegisterTaskID?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UartRegisterTaskID

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UartCalcFCS?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UartCalcFCS

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UartProcessZToolData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UartProcessZToolData
    306          
    307          #if defined (ZAPP_P1) || defined (ZAPP_P2)
    308          /***************************************************************************************************
    309           * @fn      MT_UartProcessZAppData
    310           *
    311           * @brief   | SOP | CMD  |   Data Length   | FSC  |
    312           *          |  1  |  2   |       1         |  1   |
    313           *
    314           *          Parses the data and determine either is SPI or just simply serial data
    315           *          then send the data to correct place (MT or APP)
    316           *
    317           * @param   port    - UART port
    318           *          event   - Event that causes the callback
    319           *
    320           *
    321           * @return  None
    322           ***************************************************************************************************/
    323          void MT_UartProcessZAppData ( uint8 port, uint8 event )
    324          {
    325          
    326            osal_event_hdr_t  *msg_ptr;
    327            uint16 length = 0;
    328            uint16 rxBufLen  = Hal_UART_RxBufLen(MT_UART_DEFAULT_PORT);
    329          
    330            /*
    331               If maxZAppBufferLength is 0 or larger than current length
    332               the entire length of the current buffer is returned.
    333            */
    334            if ((MT_UartMaxZAppBufLen != 0) && (MT_UartMaxZAppBufLen <= rxBufLen))
    335            {
    336              length = MT_UartMaxZAppBufLen;
    337            }
    338            else
    339            {
    340              length = rxBufLen;
    341            }
    342          
    343            /* Verify events */
    344            if (event == HAL_UART_TX_FULL)
    345            {
    346              // Do something when TX if full
    347              return;
    348            }
    349          
    350            if (event & ( HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT))
    351            {
    352              if ( App_TaskID )
    353              {
    354                /*
    355                   If Application is ready to receive and there is something
    356                   in the Rx buffer then send it up
    357                */
    358                if ((MT_UartZAppRxStatus == MT_UART_ZAPP_RX_READY ) && (length != 0))
    359                {
    360                  /* Disable App flow control until it processes the current data */
    361                   MT_UartAppFlowControl (MT_UART_ZAPP_RX_NOT_READY);
    362          
    363                  /* 2 more bytes are added, 1 for CMD type, other for length */
    364                  msg_ptr = (osal_event_hdr_t *)osal_msg_allocate( length + sizeof(osal_event_hdr_t) );
    365                  if ( msg_ptr )
    366                  {
    367                    msg_ptr->event = SPI_INCOMING_ZAPP_DATA;
    368                    msg_ptr->status = length;
    369          
    370                    /* Read the data of Rx buffer */
    371                    HalUARTRead( MT_UART_DEFAULT_PORT, (uint8 *)(msg_ptr + 1), length );
    372          
    373                    /* Send the raw data to application...or where ever */
    374                    osal_msg_send( App_TaskID, (uint8 *)msg_ptr );
    375                  }
    376                }
    377              }
    378            }
    379          }
    380          
    381          /***************************************************************************************************
    382           * @fn      SPIMgr_ZAppBufferLengthRegister
    383           *
    384           * @brief
    385           *
    386           * @param   maxLen - Max Length that the application wants at a time
    387           *
    388           * @return  None
    389           *
    390           ***************************************************************************************************/
    391          void MT_UartZAppBufferLengthRegister ( uint16 maxLen )
    392          {
    393            /* If the maxLen is larger than the RX buff, something is not right */
    394            if (maxLen <= MT_UART_DEFAULT_MAX_RX_BUFF)
    395              MT_UartMaxZAppBufLen = maxLen;
    396            else
    397              MT_UartMaxZAppBufLen = 1; /* default is 1 byte */
    398          }
    399          
    400          /***************************************************************************************************
    401           * @fn      SPIMgr_AppFlowControl
    402           *
    403           * @brief
    404           *
    405           * @param   status - ready to send or not
    406           *
    407           * @return  None
    408           *
    409           ***************************************************************************************************/
    410          void MT_UartAppFlowControl ( bool status )
    411          {
    412          
    413            /* Make sure only update if needed */
    414            if (status != MT_UartZAppRxStatus )
    415            {
    416              MT_UartZAppRxStatus = status;
    417            }
    418          
    419            /* App is ready to read again, ProcessZAppData have to be triggered too */
    420            if (status == MT_UART_ZAPP_RX_READY)
    421            {
    422              MT_UartProcessZAppData (MT_UART_DEFAULT_PORT, HAL_UART_RX_TIMEOUT );
    423            }
    424          
    425          }
    426          
    427          #endif //ZAPP
    428          
    429          /***************************************************************************************************
    430          ***************************************************************************************************/

   Maximum stack usage in bytes:

     Function                 ISTACK PSTACK XSTACK
     --------                 ------ ------ ------
     MT_UartCalcFCS               2      0     11
     MT_UartInit                  2      0     29
       -> HalUARTOpen             4      0     58
     MT_UartProcessZToolData      1      0     11
       -> Hal_UART_RxBufLen       0      0     22
       -> HalUARTRead             0      0     22
       -> osal_msg_allocate       0      0     22
       -> Hal_UART_RxBufLen       0      0     22
       -> HalUARTRead             0      0     22
       -> HalUARTRead             0      0     22
       -> MT_UartCalcFCS          0      0     22
       -> osal_msg_send           0      0     22
       -> osal_msg_deallocate     0      0     22
     MT_UartRegisterTaskID        2      0      0


   Segment part sizes:

     Function/Label                  Bytes
     --------------                  -----
     App_TaskID                         1
     state                              1
     CMD_Token                          2
     LEN_Token                          1
     FSC_Token                          1
     pMsg                               2
     tempDataLen                        1
     MT_UartInit                      116
     ?Subroutine0                       7
     MT_UartRegisterTaskID             11
     MT_UartCalcFCS                    33
     MT_UartProcessZToolData          453
     ?Subroutine5                       6
     ?Subroutine4                       4
     ?Subroutine8                      14
     ?Subroutine3                       4
     ?Subroutine7                      11
     ?Subroutine9                       2
     ??Subroutine10_0                   6
     ?Subroutine2                       8
     ?Subroutine1                      16
     ?Subroutine6                      15
     ??MT_UartInit?relay                6
     ??MT_UartRegisterTaskID?relay      6
     ??MT_UartCalcFCS?relay             6
     ??MT_UartProcessZToolData?relay    6

 
 706 bytes in segment BANKED_CODE
  24 bytes in segment BANK_RELAYS
   9 bytes in segment XDATA_Z
 
 730 bytes of CODE  memory
   9 bytes of XDATA memory

Errors: none
Warnings: none
